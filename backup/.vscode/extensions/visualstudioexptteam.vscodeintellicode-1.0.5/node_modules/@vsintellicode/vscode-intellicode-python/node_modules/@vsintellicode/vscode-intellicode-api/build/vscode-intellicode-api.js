"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
// todo: evaluate whether getApiAsync should be removed
/**
 * Entrypoint for access to the IntelliCode API from another extension. If you are packaged as part of
 * IntelliCode, do not call this.
 *
 * @returns an instance of the IntelliCode API, or null if the IntelliCode extension
 * is not installed or failed to activate.
 *
 * @example To access the IntelliCode API from another extension:
 *
 *     import * as vsi from 'vs-intellicode-api';
 *     const intellicode = await vsi.getApiAsync(extensionContext);
 */
function getApiAsync(currentExtensionContext) {
    // todo: rewrite to call a hidden command so the extension is activated on demand
    const intelliCodeExtension = vscode.extensions.getExtension("ms-vsintellicode.ms-vsintellicode");
    if (intelliCodeExtension) {
        return intelliCodeExtension.activate().then((extensionApi) => {
            if (extensionApi) {
                const intelliCodeApiVersion = require(path.join(__dirname, "package.json")).version;
                return extensionApi.getApiAsync(currentExtensionContext, intelliCodeApiVersion);
            }
            else {
                return null;
            }
        }).catch(() => {
            vscode.window.showInformationMessage("Couldn't access IntelliCode API from extension");
            return null;
        });
    }
    return Promise.resolve(null);
}
exports.getApiAsync = getApiAsync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnNjb2RlLWludGVsbGljb2RlLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92c2NvZGUtaW50ZWxsaWNvZGUtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7Ozs7Ozs7O0FBQ2IsMkNBQTZCO0FBQzdCLCtDQUFpQztBQUVqQyx1REFBdUQ7QUFFdkQ7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxxQkFDSSx1QkFBZ0Q7SUFFaEQsaUZBQWlGO0lBQ2pGLE1BQU0sb0JBQW9CLEdBQVEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsbUNBQW1DLENBQUMsQ0FBQztJQUN0RyxJQUFJLG9CQUFvQixFQUFFO1FBQ3RCLE9BQU8sb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBbUMsRUFBRSxFQUFFO1lBQ2hGLElBQUksWUFBWSxFQUFFO2dCQUNkLE1BQU0scUJBQXFCLEdBQVcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUM1RixPQUFPLFlBQVksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLEVBQUUscUJBQXFCLENBQUMsQ0FBQzthQUNuRjtpQkFBTTtnQkFDSCxPQUFPLElBQUksQ0FBQzthQUNmO1FBQ0wsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsZ0RBQWdELENBQUMsQ0FBQztZQUN2RixPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztLQUNOO0lBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFuQkQsa0NBbUJDIn0=