/**
 * This declaration file requires TypeScript 2.1 or above.
 */

import * as http from "http";

declare namespace Github {
  type json = any;
  type date = string;

  export interface Response<T> {
    /** This is the data you would see in https://developer.github.com/v3/ */
    data: T;

    /** Response status number */
    status: number;

    /** Response headers */
    headers: {
      "x-ratelimit-limit": string;
      "x-ratelimit-remaining": string;
      "x-ratelimit-reset": string;
      "x-github-request-id": string;
      "x-github-media-type": string;
      link: string;
      "last-modified": string;
      etag: string;
      status: string;
    };

    [Symbol.iterator](): Iterator<any>;
  }

  export type AnyResponse = Response<any>;

  export interface EmptyParams {}

  export interface Options {
    baseUrl?: string;
    timeout?: number;
    headers?: { [header: string]: any };
    agent?: http.Agent;

    /**
     * @deprecated in version 15.0.0
     */
    proxy?: string;
    /**
     * @deprecated in version 15.0.0
     */
    ca?: string;
    /**
     * @deprecated in version 15.0.0
     */
    rejectUnauthorized?: boolean;
    /**
     * @deprecated in version 15.0.0
     */
    family?: number;

    /**
     * @deprecated in version 15.2.0
     */
    host?: string;
    /**
     * @deprecated in version 15.2.0
     */
    pathPrefix?: string;
    /**
     * @deprecated in version 15.2.0
     */
    protocol?: string;
    /**
     * @deprecated in version 15.2.0
     */
    port?: number;
  }

  export interface AuthBasic {
    type: "basic";
    username: string;
    password: string;
  }

  export interface AuthOAuthToken {
    type: "oauth";
    token: string;
  }

  export interface AuthOAuthSecret {
    type: "oauth";
    key: string;
    secret: string;
  }

  export interface AuthUserToken {
    type: "token";
    token: string;
  }

  /* @deprecated Use "app" instead of "integration" */
  export interface DeprecatedAuthJWT {
    type: "integration";
    token: string;
  }

  export interface AuthJWT {
    type: "app";
    token: string;
  }

  export type Auth =
    | AuthBasic
    | AuthOAuthToken
    | AuthOAuthSecret
    | AuthUserToken
    | AuthJWT
    | DeprecatedAuthJWT;

  export type Link = { link: string } | { meta: { link: string } } | string;

  export interface Callback<T> {
    (error: Error | null, result: T): any;
  }

  type UnfollowUserResponse = {};
  type TogglePrimaryEmailVisibilityResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
    visibility: string;
  };
  type GetTeamsResponseItemOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetRepoInvitesResponseItemInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRepoInvitesResponseItemInvitee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRepoInvitesResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRepoInvitesResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetRepoInvitesResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetRepoInvitesResponseItem = {
    id: number;
    repository: GetRepoInvitesResponseItemRepository;
    invitee: GetRepoInvitesResponseItemInvitee;
    inviter: GetRepoInvitesResponseItemInviter;
    permissions: string;
    created_at: string;
    url: string;
    html_url: string;
  };
  type GetPublicEmailsResponseItem = {
    email: string;
    verified: boolean;
    primary: boolean;
    visibility: string;
  };
  type GetOrgsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetOrgMembershipsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetOrgMembershipsResponseItemOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetOrgMembershipsResponseItem = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    organization: GetOrgMembershipsResponseItemOrganization;
    user: GetOrgMembershipsResponseItemUser;
  };
  type GetOrgMembershipResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetOrgMembershipResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetOrgMembershipResponse = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    organization: GetOrgMembershipResponseOrganization;
    user: GetOrgMembershipResponseUser;
  };
  type GetMarketplaceStubbedPurchasesResponseItemPlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplaceStubbedPurchasesResponseItemAccount = {
    login: string;
    id: number;
    url: string;
    email: null;
    organization_billing_email: string;
    type: string;
  };
  type GetMarketplaceStubbedPurchasesResponseItem = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    account: GetMarketplaceStubbedPurchasesResponseItemAccount;
    plan: GetMarketplaceStubbedPurchasesResponseItemPlan;
  };
  type GetMarketplacePurchasesResponseItemPlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplacePurchasesResponseItemAccount = {
    login: string;
    id: number;
    url: string;
    email: null;
    organization_billing_email: string;
    type: string;
  };
  type GetMarketplacePurchasesResponseItem = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    account: GetMarketplacePurchasesResponseItemAccount;
    plan: GetMarketplacePurchasesResponseItemPlan;
  };
  type GetKeysForUserResponseItem = {
    id: number;
    key: string;
  };
  type GetKeysResponseItem = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type GetKeyResponse = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type GetInstallationsResponseInstallationsItemPermissions = {
    metadata: string;
    contents: string;
    issues: string;
    single_file: string;
  };
  type GetInstallationsResponseInstallationsItemAccount = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url: string;
    description?: string;
    gravatar_id?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  };
  type GetInstallationsResponseInstallationsItem = {
    id: number;
    account: GetInstallationsResponseInstallationsItemAccount;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: GetInstallationsResponseInstallationsItemPermissions;
    events: Array<string>;
    single_file_name: string;
  };
  type GetInstallationReposResponseRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetInstallationReposResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInstallationReposResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetInstallationReposResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetInstallationReposResponseRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetInstallationReposResponse = {
    total_count: number;
    repositories: Array<GetInstallationReposResponseRepositoriesItem>;
  };
  type GetGpgKeysForUserResponseItemSubkeysItem = {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: Array<any>;
    subkeys: Array<any>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetGpgKeysForUserResponseItemEmailsItem = {
    email: string;
    verified: boolean;
  };
  type GetGpgKeysForUserResponseItem = {
    id: number;
    primary_key_id: null;
    key_id: string;
    public_key: string;
    emails: Array<GetGpgKeysForUserResponseItemEmailsItem>;
    subkeys: Array<GetGpgKeysForUserResponseItemSubkeysItem>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetGpgKeysResponseItemSubkeysItem = {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: Array<any>;
    subkeys: Array<any>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetGpgKeysResponseItemEmailsItem = {
    email: string;
    verified: boolean;
  };
  type GetGpgKeysResponseItem = {
    id: number;
    primary_key_id: null;
    key_id: string;
    public_key: string;
    emails: Array<GetGpgKeysResponseItemEmailsItem>;
    subkeys: Array<GetGpgKeysResponseItemSubkeysItem>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetGpgKeyResponseSubkeysItem = {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: Array<any>;
    subkeys: Array<any>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetGpgKeyResponseEmailsItem = {
    email: string;
    verified: boolean;
  };
  type GetGpgKeyResponse = {
    id: number;
    primary_key_id: null;
    key_id: string;
    public_key: string;
    emails: Array<GetGpgKeyResponseEmailsItem>;
    subkeys: Array<GetGpgKeyResponseSubkeysItem>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type GetFollowingForUserResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetFollowingResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetFollowersForUserResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetFollowersResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEmailsResponseItem = {
    email: string;
    verified: boolean;
    primary: boolean;
    visibility: string;
  };
  type FollowUserResponse = {};
  type EditOrgMembershipResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditOrgMembershipResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type EditOrgMembershipResponse = {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    organization: EditOrgMembershipResponseOrganization;
    user: EditOrgMembershipResponseUser;
  };
  type DeleteKeyResponse = {};
  type DeleteGpgKeyResponse = {};
  type DeleteEmailsResponse = {};
  type DeclineRepoInviteResponse = {};
  type CreateKeyResponse = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type CreateGpgKeyResponseSubkeysItem = {
    id: number;
    primary_key_id: number;
    key_id: string;
    public_key: string;
    emails: Array<any>;
    subkeys: Array<any>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type CreateGpgKeyResponseEmailsItem = {
    email: string;
    verified: boolean;
  };
  type CreateGpgKeyResponse = {
    id: number;
    primary_key_id: null;
    key_id: string;
    public_key: string;
    emails: Array<CreateGpgKeyResponseEmailsItem>;
    subkeys: Array<CreateGpgKeyResponseSubkeysItem>;
    can_sign: boolean;
    can_encrypt_comms: boolean;
    can_encrypt_storage: boolean;
    can_certify: boolean;
    created_at: string;
    expires_at: null;
  };
  type AddEmailsResponseItem = {
    email: string;
    primary: boolean;
    verified: boolean;
  };
  type AcceptRepoInviteResponse = {};
  type UpdateProtectedBranchRequiredStatusChecksResponse = {
    url: string;
    strict: boolean;
    contexts: Array<string>;
    contexts_url: string;
  };
  type UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions = {
    url: string;
    users_url: string;
    teams_url: string;
    users: Array<
      UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsUsersItem
    >;
    teams: Array<
      UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictionsTeamsItem
    >;
  };
  type UpdateProtectedBranchPullRequestReviewEnforcementResponse = {
    url: string;
    dismissal_restrictions: UpdateProtectedBranchPullRequestReviewEnforcementResponseDismissalRestrictions;
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
  };
  type UpdateInviteResponseInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateInviteResponseInvitee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateInviteResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateInviteResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: UpdateInviteResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type UpdateInviteResponse = {
    id: number;
    repository: UpdateInviteResponseRepository;
    invitee: UpdateInviteResponseInvitee;
    inviter: UpdateInviteResponseInviter;
    permissions: string;
    created_at: string;
    url: string;
    html_url: string;
  };
  type UpdateFileResponseCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type UpdateFileResponseCommitParentsItem = {
    url: string;
    html_url: string;
    sha: string;
  };
  type UpdateFileResponseCommitTree = {
    url: string;
    sha: string;
  };
  type UpdateFileResponseCommitCommitter = {
    date: string;
    name: string;
    email: string;
  };
  type UpdateFileResponseCommitAuthor = {
    date: string;
    name: string;
    email: string;
  };
  type UpdateFileResponseCommit = {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: UpdateFileResponseCommitAuthor;
    committer: UpdateFileResponseCommitCommitter;
    message: string;
    tree: UpdateFileResponseCommitTree;
    parents: Array<UpdateFileResponseCommitParentsItem>;
    verification: UpdateFileResponseCommitVerification;
  };
  type UpdateFileResponseContentLinks = {
    self: string;
    git: string;
    html: string;
  };
  type UpdateFileResponseContent = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: UpdateFileResponseContentLinks;
  };
  type UpdateFileResponse = {
    content: UpdateFileResponseContent;
    commit: UpdateFileResponseCommit;
  };
  type UpdateCommitCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateCommitCommentResponse = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: UpdateCommitCommentResponseUser;
    created_at: string;
    updated_at: string;
  };
  type UpdateBranchProtectionResponseRestrictionsTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type UpdateBranchProtectionResponseRestrictionsUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateBranchProtectionResponseRestrictions = {
    url: string;
    users_url: string;
    teams_url: string;
    users: Array<UpdateBranchProtectionResponseRestrictionsUsersItem>;
    teams: Array<UpdateBranchProtectionResponseRestrictionsTeamsItem>;
  };
  type UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions = {
    url: string;
    users_url: string;
    teams_url: string;
    users: Array<
      UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem
    >;
    teams: Array<
      UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem
    >;
  };
  type UpdateBranchProtectionResponseRequiredPullRequestReviews = {
    url: string;
    dismissal_restrictions: UpdateBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions;
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
  };
  type UpdateBranchProtectionResponseEnforceAdmins = {
    url: string;
    enabled: boolean;
  };
  type UpdateBranchProtectionResponseRequiredStatusChecks = {
    url: string;
    strict: boolean;
    contexts: Array<string>;
    contexts_url: string;
  };
  type UpdateBranchProtectionResponse = {
    url: string;
    required_status_checks: UpdateBranchProtectionResponseRequiredStatusChecks;
    enforce_admins: UpdateBranchProtectionResponseEnforceAdmins;
    required_pull_request_reviews: UpdateBranchProtectionResponseRequiredPullRequestReviews;
    restrictions: UpdateBranchProtectionResponseRestrictions;
  };
  type TransferResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type TransferResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type TransferResponse = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: TransferResponseOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: TransferResponsePermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type TestHookResponse = {};
  type RequestPageBuildResponse = {
    url: string;
    status: string;
  };
  type ReplaceTopicsResponse = { names: Array<string> };
  type ReplaceProtectedBranchUserRestrictionsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ReplaceProtectedBranchTeamRestrictionsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type RemoveProtectedBranchUserRestrictionsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type RemoveProtectedBranchTeamRestrictionsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type RemoveBranchProtectionResponse = {};
  type GetViewsResponseViewsItem = {
    timestamp: string;
    count: number;
    uniques: number;
  };
  type GetViewsResponse = {
    count: number;
    uniques: number;
    views: Array<GetViewsResponseViewsItem>;
  };
  type GetTopicsResponse = { names: Array<string> };
  type GetTagsResponseItemCommit = {
    sha: string;
    url: string;
  };
  type GetTagsResponseItem = {
    name: string;
    commit: GetTagsResponseItemCommit;
    zipball_url: string;
    tarball_url: string;
  };
  type GetStatusesResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStatusesResponseItem = {
    url: string;
    avatar_url: string;
    id: number;
    node_id: string;
    state: string;
    description: string;
    target_url: string;
    context: string;
    created_at: string;
    updated_at: string;
    creator: GetStatusesResponseItemCreator;
  };
  type GetStatsParticipationResponse = {
    all: Array<number>;
    owner: Array<number>;
  };
  type GetStatsContributorsResponseItemWeeksItem = {
    w: string;
    a: number;
    d: number;
    c: number;
  };
  type GetStatsContributorsResponseItemAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStatsContributorsResponseItem = {
    author: GetStatsContributorsResponseItemAuthor;
    total: number;
    weeks: Array<GetStatsContributorsResponseItemWeeksItem>;
  };
  type GetStatsCommitActivityResponseItem = {
    days: Array<number>;
    total: number;
    week: number;
  };
  type GetShaOfCommitRefResponse = {};
  type GetReleasesResponseItemAssetsItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleasesResponseItemAssetsItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetReleasesResponseItemAssetsItemUploader;
  };
  type GetReleasesResponseItemAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleasesResponseItem = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GetReleasesResponseItemAuthor;
    assets: Array<GetReleasesResponseItemAssetsItem>;
  };
  type GetReleaseByTagResponseAssetsItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleaseByTagResponseAssetsItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetReleaseByTagResponseAssetsItemUploader;
  };
  type GetReleaseByTagResponseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleaseByTagResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GetReleaseByTagResponseAuthor;
    assets: Array<GetReleaseByTagResponseAssetsItem>;
  };
  type GetReleaseResponseAssetsItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleaseResponseAssetsItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetReleaseResponseAssetsItemUploader;
  };
  type GetReleaseResponseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReleaseResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GetReleaseResponseAuthor;
    assets: Array<GetReleaseResponseAssetsItem>;
  };
  type GetReferrersResponseItem = {
    referrer: string;
    count: number;
    uniques: number;
  };
  type GetReadmeResponseLinks = {
    git: string;
    self: string;
    html: string;
  };
  type GetReadmeResponse = {
    type: string;
    encoding: string;
    size: number;
    name: string;
    path: string;
    content: string;
    sha: string;
    url: string;
    git_url: string;
    html_url: string;
    download_url: string;
    _links: GetReadmeResponseLinks;
  };
  type GetProtectedBranchRequiredStatusChecksResponse = {
    url: string;
    strict: boolean;
    contexts: Array<string>;
    contexts_url: string;
  };
  type GetProtectedBranchRequiredSignaturesResponse = {
    url: string;
    enabled: boolean;
  };
  type GetPathsResponseItem = {
    path: string;
    title: string;
    count: number;
    uniques: number;
  };
  type GetPagesResponseSource = {
    branch: string;
    directory: string;
  };
  type GetPagesResponse = {
    url: string;
    status: string;
    cname: string;
    custom_404: boolean;
    html_url: string;
    source: GetPagesResponseSource;
  };
  type GetLatestReleaseResponseAssetsItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetLatestReleaseResponseAssetsItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetLatestReleaseResponseAssetsItemUploader;
  };
  type GetLatestReleaseResponseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetLatestReleaseResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: GetLatestReleaseResponseAuthor;
    assets: Array<GetLatestReleaseResponseAssetsItem>;
  };
  type GetLanguagesResponse = {
    C: number;
    Python: number;
  };
  type GetInvitesResponseItemInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInvitesResponseItemInvitee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInvitesResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInvitesResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetInvitesResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetInvitesResponseItem = {
    id: number;
    repository: GetInvitesResponseItemRepository;
    invitee: GetInvitesResponseItemInvitee;
    inviter: GetInvitesResponseItemInviter;
    permissions: string;
    created_at: string;
    url: string;
    html_url: string;
  };
  type GetForksResponseItemLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetForksResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetForksResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItemLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetForOrgResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetForOrgResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetDownloadsResponseItem = {
    url: string;
    html_url: string;
    id: number;
    name: string;
    description: string;
    size: number;
    download_count: number;
    content_type: string;
  };
  type GetDownloadResponse = {
    url: string;
    html_url: string;
    id: number;
    name: string;
    description: string;
    size: number;
    download_count: number;
    content_type: string;
  };
  type GetDeploymentsResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetDeploymentsResponseItemPayload = { task: string };
  type GetDeploymentsResponseItem = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: GetDeploymentsResponseItemPayload;
    environment: string;
    description: string;
    creator: GetDeploymentsResponseItemCreator;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
  };
  type GetDeploymentStatusesResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetDeploymentStatusesResponseItem = {
    url: string;
    id: number;
    node_id: string;
    state: string;
    creator: GetDeploymentStatusesResponseItemCreator;
    description: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
  };
  type GetDeploymentStatusResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetDeploymentStatusResponse = {
    url: string;
    id: number;
    node_id: string;
    state: string;
    creator: GetDeploymentStatusResponseCreator;
    description: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
  };
  type GetDeploymentResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetDeploymentResponsePayload = { task: string };
  type GetDeploymentResponse = {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: GetDeploymentResponsePayload;
    environment: string;
    description: string;
    creator: GetDeploymentResponseCreator;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
  };
  type GetDeployKeysResponseItem = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type GetDeployKeyResponse = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type GetCommunityProfileMetricsResponseFilesReadme = {
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFilesLicense = {
    name: string;
    key: string;
    spdx_id: string;
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFilesPullRequestTemplate = {
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFilesIssueTemplate = {
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFilesContributing = {
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFilesCodeOfConduct = {
    name: string;
    key: string;
    url: string;
    html_url: string;
  };
  type GetCommunityProfileMetricsResponseFiles = {
    code_of_conduct: GetCommunityProfileMetricsResponseFilesCodeOfConduct;
    contributing: GetCommunityProfileMetricsResponseFilesContributing;
    issue_template: GetCommunityProfileMetricsResponseFilesIssueTemplate;
    pull_request_template: GetCommunityProfileMetricsResponseFilesPullRequestTemplate;
    license: GetCommunityProfileMetricsResponseFilesLicense;
    readme: GetCommunityProfileMetricsResponseFilesReadme;
  };
  type GetCommunityProfileMetricsResponse = {
    health_percentage: number;
    description: string;
    documentation: boolean;
    files: GetCommunityProfileMetricsResponseFiles;
    updated_at: string;
  };
  type GetCommitCommentsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommitCommentsResponseItem = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: GetCommitCommentsResponseItemUser;
    created_at: string;
    updated_at: string;
  };
  type GetCommitCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommitCommentResponse = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: GetCommitCommentResponseUser;
    created_at: string;
    updated_at: string;
  };
  type GetCommitResponseFilesItem = {
    filename: string;
    additions: number;
    deletions: number;
    changes: number;
    status: string;
    raw_url: string;
    blob_url: string;
    patch: string;
  };
  type GetCommitResponseStats = {
    additions: number;
    deletions: number;
    total: number;
  };
  type GetCommitResponseCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetCommitResponseCommitTree = {
    url: string;
    sha: string;
  };
  type GetCommitResponseCommitCommitter = {
    name: string;
    email: string;
    date: string;
  };
  type GetCommitResponseCommitAuthor = {
    name: string;
    email: string;
    date: string;
  };
  type GetCommitResponseCommit = {
    url: string;
    author: GetCommitResponseCommitAuthor;
    committer: GetCommitResponseCommitCommitter;
    message: string;
    tree: GetCommitResponseCommitTree;
    comment_count: number;
    verification: GetCommitResponseCommitVerification;
  };
  type GetCombinedStatusForRefResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCombinedStatusForRefResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetCombinedStatusForRefResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetCombinedStatusForRefResponseStatusesItem = {
    url: string;
    avatar_url: string;
    id: number;
    node_id: string;
    state: string;
    description: string;
    target_url: string;
    context: string;
    created_at: string;
    updated_at: string;
  };
  type GetCombinedStatusForRefResponse = {
    state: string;
    statuses: Array<GetCombinedStatusForRefResponseStatusesItem>;
    sha: string;
    total_count: number;
    repository: GetCombinedStatusForRefResponseRepository;
    commit_url: string;
    url: string;
  };
  type GetCollaboratorsResponseItemPermissions = {
    pull: boolean;
    push: boolean;
    admin: boolean;
  };
  type GetClonesResponseClonesItem = {
    timestamp: string;
    count: number;
    uniques: number;
  };
  type GetClonesResponse = {
    count: number;
    uniques: number;
    clones: Array<GetClonesResponseClonesItem>;
  };
  type GetBranchesResponseItemCommit = {
    sha: string;
    url: string;
  };
  type GetBranchesResponseItem = {
    name: string;
    commit: GetBranchesResponseItemCommit;
    protected: boolean;
    protection_url: string;
  };
  type GetBranchProtectionResponseRestrictionsTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type GetBranchProtectionResponseRestrictionsUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetBranchProtectionResponseRestrictions = {
    url: string;
    users_url: string;
    teams_url: string;
    users: Array<GetBranchProtectionResponseRestrictionsUsersItem>;
    teams: Array<GetBranchProtectionResponseRestrictionsTeamsItem>;
  };
  type GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions = {
    url: string;
    users_url: string;
    teams_url: string;
    users: Array<
      GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsUsersItem
    >;
    teams: Array<
      GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictionsTeamsItem
    >;
  };
  type GetBranchProtectionResponseRequiredPullRequestReviews = {
    url: string;
    dismissal_restrictions: GetBranchProtectionResponseRequiredPullRequestReviewsDismissalRestrictions;
    dismiss_stale_reviews: boolean;
    require_code_owner_reviews: boolean;
    required_approving_review_count: number;
  };
  type GetBranchProtectionResponseEnforceAdmins = {
    url: string;
    enabled: boolean;
  };
  type GetBranchProtectionResponseRequiredStatusChecks = {
    url: string;
    strict: boolean;
    contexts: Array<string>;
    contexts_url: string;
  };
  type GetBranchProtectionResponse = {
    url: string;
    required_status_checks: GetBranchProtectionResponseRequiredStatusChecks;
    enforce_admins: GetBranchProtectionResponseEnforceAdmins;
    required_pull_request_reviews: GetBranchProtectionResponseRequiredPullRequestReviews;
    restrictions: GetBranchProtectionResponseRestrictions;
  };
  type GetBranchResponseLinks = {
    html: string;
    self: string;
  };
  type GetBranchResponseCommitCommitter = {
    gravatar_id: string;
    avatar_url: string;
    url: string;
    id: number;
    login: string;
  };
  type GetBranchResponseCommitParentsItem = {
    sha: string;
    url: string;
  };
  type GetBranchResponseCommitAuthor = {
    gravatar_id: string;
    avatar_url: string;
    url: string;
    id: number;
    login: string;
  };
  type GetBranchResponseCommitCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetBranchResponseCommitCommitCommitter = {
    name: string;
    date: string;
    email: string;
  };
  type GetBranchResponseCommitCommitTree = {
    sha: string;
    url: string;
  };
  type GetBranchResponseCommitCommitAuthor = {
    name: string;
    date: string;
    email: string;
  };
  type GetBranchResponseCommitCommit = {
    author: GetBranchResponseCommitCommitAuthor;
    url: string;
    message: string;
    tree: GetBranchResponseCommitCommitTree;
    committer: GetBranchResponseCommitCommitCommitter;
    verification: GetBranchResponseCommitCommitVerification;
  };
  type GetBranchResponseCommit = {
    sha: string;
    node_id: string;
    commit: GetBranchResponseCommitCommit;
    author: GetBranchResponseCommitAuthor;
    parents: Array<GetBranchResponseCommitParentsItem>;
    url: string;
    committer: GetBranchResponseCommitCommitter;
  };
  type GetBranchResponse = {
    name: string;
    commit: GetBranchResponseCommit;
    _links: GetBranchResponseLinks;
    protected: boolean;
    protection_url: string;
  };
  type GetAssetsResponseItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAssetsResponseItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetAssetsResponseItemUploader;
  };
  type GetAssetResponseUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAssetResponse = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: GetAssetResponseUploader;
  };
  type GetArchiveLinkResponse = {};
  type GetAllCommitCommentsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllCommitCommentsResponseItem = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: GetAllCommitCommentsResponseItemUser;
    created_at: string;
    updated_at: string;
  };
  type GetResponseSourcePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetResponseSourceOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseSource = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetResponseSourceOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetResponseSourcePermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetResponseParentPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetResponseParentOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseParent = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetResponseParentOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetResponseParentPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type ForkResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type EditReleaseResponseAssetsItemUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditReleaseResponseAssetsItem = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: EditReleaseResponseAssetsItemUploader;
  };
  type EditReleaseResponseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditReleaseResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: EditReleaseResponseAuthor;
    assets: Array<EditReleaseResponseAssetsItem>;
  };
  type EditAssetResponseUploader = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditAssetResponse = {
    url: string;
    browser_download_url: string;
    id: number;
    node_id: string;
    name: string;
    label: string;
    state: string;
    content_type: string;
    size: number;
    download_count: number;
    created_at: string;
    updated_at: string;
    uploader: EditAssetResponseUploader;
  };
  type EditResponseSourcePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type EditResponseSourceOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseSource = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: EditResponseSourceOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: EditResponseSourcePermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type EditResponseParentPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type EditResponseParentOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseParent = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: EditResponseParentOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: EditResponseParentPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type EditResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type DeleteReleaseResponse = {};
  type DeleteInviteResponse = {};
  type DeleteFileResponseCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type DeleteFileResponseCommitParentsItem = {
    url: string;
    html_url: string;
    sha: string;
  };
  type DeleteFileResponseCommitTree = {
    url: string;
    sha: string;
  };
  type DeleteFileResponseCommitCommitter = {
    date: string;
    name: string;
    email: string;
  };
  type DeleteFileResponseCommitAuthor = {
    date: string;
    name: string;
    email: string;
  };
  type DeleteFileResponseCommit = {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: DeleteFileResponseCommitAuthor;
    committer: DeleteFileResponseCommitCommitter;
    message: string;
    tree: DeleteFileResponseCommitTree;
    parents: Array<DeleteFileResponseCommitParentsItem>;
    verification: DeleteFileResponseCommitVerification;
  };
  type DeleteFileResponse = {
    content: null;
    commit: DeleteFileResponseCommit;
  };
  type DeleteDownloadResponse = {};
  type DeleteDeployKeyResponse = {};
  type DeleteCommitCommentResponse = {};
  type DeleteAssetResponse = {};
  type CreateStatusResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateStatusResponse = {
    url: string;
    avatar_url: string;
    id: number;
    node_id: string;
    state: string;
    description: string;
    target_url: string;
    context: string;
    created_at: string;
    updated_at: string;
    creator: CreateStatusResponseCreator;
  };
  type CreateReleaseResponseAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReleaseResponse = {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    author: CreateReleaseResponseAuthor;
    assets: Array<any>;
  };
  type CreateForOrgResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateForOrgResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForOrgResponse = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateForOrgResponseOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateForOrgResponsePermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateFileResponseCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type CreateFileResponseCommitParentsItem = {
    url: string;
    html_url: string;
    sha: string;
  };
  type CreateFileResponseCommitTree = {
    url: string;
    sha: string;
  };
  type CreateFileResponseCommitCommitter = {
    date: string;
    name: string;
    email: string;
  };
  type CreateFileResponseCommitAuthor = {
    date: string;
    name: string;
    email: string;
  };
  type CreateFileResponseCommit = {
    sha: string;
    node_id: string;
    url: string;
    html_url: string;
    author: CreateFileResponseCommitAuthor;
    committer: CreateFileResponseCommitCommitter;
    message: string;
    tree: CreateFileResponseCommitTree;
    parents: Array<CreateFileResponseCommitParentsItem>;
    verification: CreateFileResponseCommitVerification;
  };
  type CreateFileResponseContentLinks = {
    self: string;
    git: string;
    html: string;
  };
  type CreateFileResponseContent = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: CreateFileResponseContentLinks;
  };
  type CreateFileResponse = {
    content: CreateFileResponseContent;
    commit: CreateFileResponseCommit;
  };
  type CreateDeploymentStatusResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateDeploymentStatusResponse = {
    url: string;
    id: number;
    node_id: string;
    state: string;
    creator: CreateDeploymentStatusResponseCreator;
    description: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
  };
  type CreateCommitCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateCommitCommentResponse = {
    html_url: string;
    url: string;
    id: number;
    node_id: string;
    body: string;
    path: string;
    position: number;
    line: number;
    commit_id: string;
    user: CreateCommitCommentResponseUser;
    created_at: string;
    updated_at: string;
  };
  type CreateResponsePermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type AddProtectedBranchUserRestrictionsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type AddProtectedBranchTeamRestrictionsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type AddProtectedBranchRequiredSignaturesResponse = {
    url: string;
    enabled: boolean;
  };
  type AddProtectedBranchAdminEnforcementResponse = {
    url: string;
    enabled: boolean;
  };
  type AddDeployKeyResponse = {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  type GetForTeamDiscussionCommentResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForTeamDiscussionCommentResponseItem = {
    id: number;
    node_id: string;
    user: GetForTeamDiscussionCommentResponseItemUser;
    content: string;
    created_at: string;
  };
  type GetForTeamDiscussionResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForTeamDiscussionResponseItem = {
    id: number;
    node_id: string;
    user: GetForTeamDiscussionResponseItemUser;
    content: string;
    created_at: string;
  };
  type GetForPullRequestReviewCommentResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForPullRequestReviewCommentResponseItem = {
    id: number;
    node_id: string;
    user: GetForPullRequestReviewCommentResponseItemUser;
    content: string;
    created_at: string;
  };
  type GetForIssueCommentResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForIssueCommentResponseItem = {
    id: number;
    node_id: string;
    user: GetForIssueCommentResponseItemUser;
    content: string;
    created_at: string;
  };
  type GetForIssueResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForIssueResponseItem = {
    id: number;
    node_id: string;
    user: GetForIssueResponseItemUser;
    content: string;
    created_at: string;
  };
  type GetForCommitCommentResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForCommitCommentResponseItem = {
    id: number;
    node_id: string;
    user: GetForCommitCommentResponseItemUser;
    content: string;
    created_at: string;
  };
  type CreateForTeamDiscussionCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForTeamDiscussionCommentResponse = {
    id: number;
    node_id: string;
    user: CreateForTeamDiscussionCommentResponseUser;
    content: string;
    created_at: string;
  };
  type CreateForTeamDiscussionResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForTeamDiscussionResponse = {
    id: number;
    node_id: string;
    user: CreateForTeamDiscussionResponseUser;
    content: string;
    created_at: string;
  };
  type CreateForPullRequestReviewCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForPullRequestReviewCommentResponse = {
    id: number;
    node_id: string;
    user: CreateForPullRequestReviewCommentResponseUser;
    content: string;
    created_at: string;
  };
  type CreateForIssueCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForIssueCommentResponse = {
    id: number;
    node_id: string;
    user: CreateForIssueCommentResponseUser;
    content: string;
    created_at: string;
  };
  type CreateForIssueResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForIssueResponse = {
    id: number;
    node_id: string;
    user: CreateForIssueResponseUser;
    content: string;
    created_at: string;
  };
  type CreateForCommitCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateForCommitCommentResponse = {
    id: number;
    node_id: string;
    user: CreateForCommitCommentResponseUser;
    content: string;
    created_at: string;
  };
  type UpdateResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseLinksStatuses = { href: string };
  type UpdateResponseLinksCommits = { href: string };
  type UpdateResponseLinksReviewComment = { href: string };
  type UpdateResponseLinksReviewComments = { href: string };
  type UpdateResponseLinksComments = { href: string };
  type UpdateResponseLinksIssue = { href: string };
  type UpdateResponseLinksHtml = { href: string };
  type UpdateResponseLinksSelf = { href: string };
  type UpdateResponseLinks = {
    self: UpdateResponseLinksSelf;
    html: UpdateResponseLinksHtml;
    issue: UpdateResponseLinksIssue;
    comments: UpdateResponseLinksComments;
    review_comments: UpdateResponseLinksReviewComments;
    review_comment: UpdateResponseLinksReviewComment;
    commits: UpdateResponseLinksCommits;
    statuses: UpdateResponseLinksStatuses;
  };
  type UpdateResponseBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type UpdateResponseBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: UpdateResponseBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: UpdateResponseBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type UpdateResponseBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseBase = {
    label: string;
    ref: string;
    sha: string;
    user: UpdateResponseBaseUser;
    repo: UpdateResponseBaseRepo;
  };
  type UpdateResponseHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type UpdateResponseHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: UpdateResponseHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: UpdateResponseHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type UpdateResponseHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseHead = {
    label: string;
    ref: string;
    sha: string;
    user: UpdateResponseHeadUser;
    repo: UpdateResponseHeadRepo;
  };
  type UpdateResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: UpdateResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type UpdateResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type UpdateResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type SubmitReviewResponseLinksPullRequest = { href: string };
  type SubmitReviewResponseLinksHtml = { href: string };
  type SubmitReviewResponseLinks = {
    html: SubmitReviewResponseLinksHtml;
    pull_request: SubmitReviewResponseLinksPullRequest;
  };
  type SubmitReviewResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type SubmitReviewResponse = {
    id: number;
    node_id: string;
    user: SubmitReviewResponseUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: SubmitReviewResponseLinks;
  };
  type GetReviewsResponseItemLinksPullRequest = { href: string };
  type GetReviewsResponseItemLinksHtml = { href: string };
  type GetReviewsResponseItemLinks = {
    html: GetReviewsResponseItemLinksHtml;
    pull_request: GetReviewsResponseItemLinksPullRequest;
  };
  type GetReviewsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReviewsResponseItem = {
    id: number;
    node_id: string;
    user: GetReviewsResponseItemUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: GetReviewsResponseItemLinks;
  };
  type GetReviewRequestsResponseTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type GetReviewRequestsResponseUsersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReviewRequestsResponse = {
    users: Array<GetReviewRequestsResponseUsersItem>;
    teams: Array<GetReviewRequestsResponseTeamsItem>;
  };
  type GetReviewCommentsResponseItemLinksPullRequest = { href: string };
  type GetReviewCommentsResponseItemLinksHtml = { href: string };
  type GetReviewCommentsResponseItemLinksSelf = { href: string };
  type GetReviewCommentsResponseItemLinks = {
    self: GetReviewCommentsResponseItemLinksSelf;
    html: GetReviewCommentsResponseItemLinksHtml;
    pull_request: GetReviewCommentsResponseItemLinksPullRequest;
  };
  type GetReviewCommentsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReviewCommentsResponseItem = {
    url: string;
    id: number;
    node_id: string;
    pull_request_review_id: number;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id: number;
    user: GetReviewCommentsResponseItemUser;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    _links: GetReviewCommentsResponseItemLinks;
  };
  type GetReviewResponseLinksPullRequest = { href: string };
  type GetReviewResponseLinksHtml = { href: string };
  type GetReviewResponseLinks = {
    html: GetReviewResponseLinksHtml;
    pull_request: GetReviewResponseLinksPullRequest;
  };
  type GetReviewResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetReviewResponse = {
    id: number;
    node_id: string;
    user: GetReviewResponseUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: GetReviewResponseLinks;
  };
  type GetFilesResponseItem = {
    sha: string;
    filename: string;
    status: string;
    additions: number;
    deletions: number;
    changes: number;
    blob_url: string;
    raw_url: string;
    contents_url: string;
    patch: string;
  };
  type GetCommitsResponseItemParentsItem = {
    url: string;
    sha: string;
  };
  type GetCommitsResponseItemCommitter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommitsResponseItemAuthor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommitsResponseItemCommitVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetCommitsResponseItemCommitTree = {
    url: string;
    sha: string;
  };
  type GetCommitsResponseItemCommitCommitter = {
    name: string;
    email: string;
    date: string;
  };
  type GetCommitsResponseItemCommitAuthor = {
    name: string;
    email: string;
    date: string;
  };
  type GetCommitsResponseItemCommit = {
    url: string;
    author: GetCommitsResponseItemCommitAuthor;
    committer: GetCommitsResponseItemCommitCommitter;
    message: string;
    tree: GetCommitsResponseItemCommitTree;
    comment_count: number;
    verification: GetCommitsResponseItemCommitVerification;
  };
  type GetCommentsForRepoResponseItemLinksPullRequest = { href: string };
  type GetCommentsForRepoResponseItemLinksHtml = { href: string };
  type GetCommentsForRepoResponseItemLinksSelf = { href: string };
  type GetCommentsForRepoResponseItemLinks = {
    self: GetCommentsForRepoResponseItemLinksSelf;
    html: GetCommentsForRepoResponseItemLinksHtml;
    pull_request: GetCommentsForRepoResponseItemLinksPullRequest;
  };
  type GetCommentsResponseItemLinksPullRequest = { href: string };
  type GetCommentsResponseItemLinksHtml = { href: string };
  type GetCommentsResponseItemLinksSelf = { href: string };
  type GetCommentsResponseItemLinks = {
    self: GetCommentsResponseItemLinksSelf;
    html: GetCommentsResponseItemLinksHtml;
    pull_request: GetCommentsResponseItemLinksPullRequest;
  };
  type GetCommentResponseLinksPullRequest = { href: string };
  type GetCommentResponseLinksHtml = { href: string };
  type GetCommentResponseLinksSelf = { href: string };
  type GetCommentResponseLinks = {
    self: GetCommentResponseLinksSelf;
    html: GetCommentResponseLinksHtml;
    pull_request: GetCommentResponseLinksPullRequest;
  };
  type GetAllResponseItemLinksStatuses = { href: string };
  type GetAllResponseItemLinksCommits = { href: string };
  type GetAllResponseItemLinksReviewComment = { href: string };
  type GetAllResponseItemLinksReviewComments = { href: string };
  type GetAllResponseItemLinksComments = { href: string };
  type GetAllResponseItemLinksIssue = { href: string };
  type GetAllResponseItemLinksHtml = { href: string };
  type GetAllResponseItemLinksSelf = { href: string };
  type GetAllResponseItemLinks = {
    self: GetAllResponseItemLinksSelf;
    html: GetAllResponseItemLinksHtml;
    issue: GetAllResponseItemLinksIssue;
    comments: GetAllResponseItemLinksComments;
    review_comments: GetAllResponseItemLinksReviewComments;
    review_comment: GetAllResponseItemLinksReviewComment;
    commits: GetAllResponseItemLinksCommits;
    statuses: GetAllResponseItemLinksStatuses;
  };
  type GetAllResponseItemBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetAllResponseItemBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetAllResponseItemBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetAllResponseItemBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetAllResponseItemBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemBase = {
    label: string;
    ref: string;
    sha: string;
    user: GetAllResponseItemBaseUser;
    repo: GetAllResponseItemBaseRepo;
  };
  type GetAllResponseItemHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetAllResponseItemHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetAllResponseItemHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetAllResponseItemHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetAllResponseItemHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemHead = {
    label: string;
    ref: string;
    sha: string;
    user: GetAllResponseItemHeadUser;
    repo: GetAllResponseItemHeadRepo;
  };
  type GetResponseMergedBy = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseLinksStatuses = { href: string };
  type GetResponseLinksCommits = { href: string };
  type GetResponseLinksReviewComment = { href: string };
  type GetResponseLinksReviewComments = { href: string };
  type GetResponseLinksComments = { href: string };
  type GetResponseLinksIssue = { href: string };
  type GetResponseLinksHtml = { href: string };
  type GetResponseLinksSelf = { href: string };
  type GetResponseLinks = {
    self: GetResponseLinksSelf;
    html: GetResponseLinksHtml;
    issue: GetResponseLinksIssue;
    comments: GetResponseLinksComments;
    review_comments: GetResponseLinksReviewComments;
    review_comment: GetResponseLinksReviewComment;
    commits: GetResponseLinksCommits;
    statuses: GetResponseLinksStatuses;
  };
  type GetResponseBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetResponseBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetResponseBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetResponseBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetResponseBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseBase = {
    label: string;
    ref: string;
    sha: string;
    user: GetResponseBaseUser;
    repo: GetResponseBaseRepo;
  };
  type GetResponseHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetResponseHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetResponseHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetResponseHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetResponseHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseHead = {
    label: string;
    ref: string;
    sha: string;
    user: GetResponseHeadUser;
    repo: GetResponseHeadRepo;
  };
  type EditCommentResponseLinksPullRequest = { href: string };
  type EditCommentResponseLinksHtml = { href: string };
  type EditCommentResponseLinksSelf = { href: string };
  type EditCommentResponseLinks = {
    self: EditCommentResponseLinksSelf;
    html: EditCommentResponseLinksHtml;
    pull_request: EditCommentResponseLinksPullRequest;
  };
  type DismissReviewResponseLinksPullRequest = { href: string };
  type DismissReviewResponseLinksHtml = { href: string };
  type DismissReviewResponseLinks = {
    html: DismissReviewResponseLinksHtml;
    pull_request: DismissReviewResponseLinksPullRequest;
  };
  type DismissReviewResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type DismissReviewResponse = {
    id: number;
    node_id: string;
    user: DismissReviewResponseUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: DismissReviewResponseLinks;
  };
  type DeleteReviewRequestResponse = {};
  type DeletePendingReviewResponseLinksPullRequest = { href: string };
  type DeletePendingReviewResponseLinksHtml = { href: string };
  type DeletePendingReviewResponseLinks = {
    html: DeletePendingReviewResponseLinksHtml;
    pull_request: DeletePendingReviewResponseLinksPullRequest;
  };
  type DeletePendingReviewResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type DeletePendingReviewResponse = {
    id: number;
    node_id: string;
    user: DeletePendingReviewResponseUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: DeletePendingReviewResponseLinks;
  };
  type CreateReviewRequestResponseRequestedTeamsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type CreateReviewRequestResponseRequestedReviewersItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseLinksStatuses = { href: string };
  type CreateReviewRequestResponseLinksCommits = { href: string };
  type CreateReviewRequestResponseLinksReviewComment = { href: string };
  type CreateReviewRequestResponseLinksReviewComments = { href: string };
  type CreateReviewRequestResponseLinksComments = { href: string };
  type CreateReviewRequestResponseLinksIssue = { href: string };
  type CreateReviewRequestResponseLinksHtml = { href: string };
  type CreateReviewRequestResponseLinksSelf = { href: string };
  type CreateReviewRequestResponseLinks = {
    self: CreateReviewRequestResponseLinksSelf;
    html: CreateReviewRequestResponseLinksHtml;
    issue: CreateReviewRequestResponseLinksIssue;
    comments: CreateReviewRequestResponseLinksComments;
    review_comments: CreateReviewRequestResponseLinksReviewComments;
    review_comment: CreateReviewRequestResponseLinksReviewComment;
    commits: CreateReviewRequestResponseLinksCommits;
    statuses: CreateReviewRequestResponseLinksStatuses;
  };
  type CreateReviewRequestResponseBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateReviewRequestResponseBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateReviewRequestResponseBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateReviewRequestResponseBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateReviewRequestResponseBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseBase = {
    label: string;
    ref: string;
    sha: string;
    user: CreateReviewRequestResponseBaseUser;
    repo: CreateReviewRequestResponseBaseRepo;
  };
  type CreateReviewRequestResponseHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateReviewRequestResponseHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateReviewRequestResponseHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateReviewRequestResponseHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateReviewRequestResponseHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseHead = {
    label: string;
    ref: string;
    sha: string;
    user: CreateReviewRequestResponseHeadUser;
    repo: CreateReviewRequestResponseHeadRepo;
  };
  type CreateReviewRequestResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: CreateReviewRequestResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type CreateReviewRequestResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type CreateReviewRequestResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewRequestResponse = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    assignee: CreateReviewRequestResponseAssignee;
    labels: Array<CreateReviewRequestResponseLabelsItem>;
    milestone: CreateReviewRequestResponseMilestone;
    locked: boolean;
    active_lock_reason: string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    head: CreateReviewRequestResponseHead;
    base: CreateReviewRequestResponseBase;
    _links: CreateReviewRequestResponseLinks;
    user: CreateReviewRequestResponseUser;
    requested_reviewers: Array<
      CreateReviewRequestResponseRequestedReviewersItem
    >;
    requested_teams: Array<CreateReviewRequestResponseRequestedTeamsItem>;
  };
  type CreateReviewResponseLinksPullRequest = { href: string };
  type CreateReviewResponseLinksHtml = { href: string };
  type CreateReviewResponseLinks = {
    html: CreateReviewResponseLinksHtml;
    pull_request: CreateReviewResponseLinksPullRequest;
  };
  type CreateReviewResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateReviewResponse = {
    id: number;
    node_id: string;
    user: CreateReviewResponseUser;
    body: string;
    commit_id: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    _links: CreateReviewResponseLinks;
  };
  type CreateFromIssueResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseLinksStatuses = { href: string };
  type CreateFromIssueResponseLinksCommits = { href: string };
  type CreateFromIssueResponseLinksReviewComment = { href: string };
  type CreateFromIssueResponseLinksReviewComments = { href: string };
  type CreateFromIssueResponseLinksComments = { href: string };
  type CreateFromIssueResponseLinksIssue = { href: string };
  type CreateFromIssueResponseLinksHtml = { href: string };
  type CreateFromIssueResponseLinksSelf = { href: string };
  type CreateFromIssueResponseLinks = {
    self: CreateFromIssueResponseLinksSelf;
    html: CreateFromIssueResponseLinksHtml;
    issue: CreateFromIssueResponseLinksIssue;
    comments: CreateFromIssueResponseLinksComments;
    review_comments: CreateFromIssueResponseLinksReviewComments;
    review_comment: CreateFromIssueResponseLinksReviewComment;
    commits: CreateFromIssueResponseLinksCommits;
    statuses: CreateFromIssueResponseLinksStatuses;
  };
  type CreateFromIssueResponseBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateFromIssueResponseBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateFromIssueResponseBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateFromIssueResponseBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateFromIssueResponseBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseBase = {
    label: string;
    ref: string;
    sha: string;
    user: CreateFromIssueResponseBaseUser;
    repo: CreateFromIssueResponseBaseRepo;
  };
  type CreateFromIssueResponseHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateFromIssueResponseHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateFromIssueResponseHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateFromIssueResponseHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateFromIssueResponseHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseHead = {
    label: string;
    ref: string;
    sha: string;
    user: CreateFromIssueResponseHeadUser;
    repo: CreateFromIssueResponseHeadRepo;
  };
  type CreateFromIssueResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: CreateFromIssueResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type CreateFromIssueResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type CreateFromIssueResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateFromIssueResponse = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    assignee: CreateFromIssueResponseAssignee;
    labels: Array<CreateFromIssueResponseLabelsItem>;
    milestone: CreateFromIssueResponseMilestone;
    locked: boolean;
    active_lock_reason: string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string;
    head: CreateFromIssueResponseHead;
    base: CreateFromIssueResponseBase;
    _links: CreateFromIssueResponseLinks;
    user: CreateFromIssueResponseUser;
  };
  type CreateCommentReplyResponseLinksPullRequest = { href: string };
  type CreateCommentReplyResponseLinksHtml = { href: string };
  type CreateCommentReplyResponseLinksSelf = { href: string };
  type CreateCommentReplyResponseLinks = {
    self: CreateCommentReplyResponseLinksSelf;
    html: CreateCommentReplyResponseLinksHtml;
    pull_request: CreateCommentReplyResponseLinksPullRequest;
  };
  type CreateCommentReplyResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateCommentReplyResponse = {
    url: string;
    id: number;
    node_id: string;
    pull_request_review_id: number;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    in_reply_to_id: number;
    user: CreateCommentReplyResponseUser;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    _links: CreateCommentReplyResponseLinks;
  };
  type CreateCommentResponseLinksPullRequest = { href: string };
  type CreateCommentResponseLinksHtml = { href: string };
  type CreateCommentResponseLinksSelf = { href: string };
  type CreateCommentResponseLinks = {
    self: CreateCommentResponseLinksSelf;
    html: CreateCommentResponseLinksHtml;
    pull_request: CreateCommentResponseLinksPullRequest;
  };
  type CreateResponseLinksStatuses = { href: string };
  type CreateResponseLinksCommits = { href: string };
  type CreateResponseLinksReviewComment = { href: string };
  type CreateResponseLinksReviewComments = { href: string };
  type CreateResponseLinksComments = { href: string };
  type CreateResponseLinksIssue = { href: string };
  type CreateResponseLinksHtml = { href: string };
  type CreateResponseLinksSelf = { href: string };
  type CreateResponseLinks = {
    self: CreateResponseLinksSelf;
    html: CreateResponseLinksHtml;
    issue: CreateResponseLinksIssue;
    comments: CreateResponseLinksComments;
    review_comments: CreateResponseLinksReviewComments;
    review_comment: CreateResponseLinksReviewComment;
    commits: CreateResponseLinksCommits;
    statuses: CreateResponseLinksStatuses;
  };
  type CreateResponseBaseRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateResponseBaseRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseBaseRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateResponseBaseRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateResponseBaseRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateResponseBaseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseBase = {
    label: string;
    ref: string;
    sha: string;
    user: CreateResponseBaseUser;
    repo: CreateResponseBaseRepo;
  };
  type CreateResponseHeadRepoPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateResponseHeadRepoOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseHeadRepo = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateResponseHeadRepoOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateResponseHeadRepoPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateResponseHeadUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseHead = {
    label: string;
    ref: string;
    sha: string;
    user: CreateResponseHeadUser;
    repo: CreateResponseHeadRepo;
  };
  type UpdateProjectResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateProjectResponse = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: UpdateProjectResponseCreator;
    created_at: string;
    updated_at: string;
  };
  type RemoveCollaboratorResponse = {};
  type MoveProjectColumnResponse = {};
  type MoveProjectCardResponse = {};
  type GetUserPermissionLevelResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetUserPermissionLevelResponse = {
    permission: string;
    user: GetUserPermissionLevelResponseUser;
  };
  type GetRepoProjectsResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRepoProjectsResponseItem = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: GetRepoProjectsResponseItemCreator;
    created_at: string;
    updated_at: string;
  };
  type GetProjectColumnsResponseItem = {
    id: number;
    node_id: string;
    name: string;
    url: string;
    project_url: string;
    cards_url: string;
    created_at: string;
    updated_at: string;
  };
  type GetProjectCardsResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetProjectCardsResponseItem = {
    url: string;
    column_url: string;
    content_url: string;
    id: number;
    node_id: string;
    note: string;
    creator: GetProjectCardsResponseItemCreator;
    created_at: string;
    updated_at: string;
    archived: boolean;
  };
  type GetProjectResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetProjectResponse = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: GetProjectResponseCreator;
    created_at: string;
    updated_at: string;
  };
  type GetOrgProjectsResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetOrgProjectsResponseItem = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: GetOrgProjectsResponseItemCreator;
    created_at: string;
    updated_at: string;
  };
  type GetCollaboratorsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    permissions?: GetCollaboratorsResponseItemPermissions;
  };
  type DeleteProjectColumnResponse = {};
  type DeleteProjectCardResponse = {};
  type CreateRepoProjectResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateRepoProjectResponse = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: CreateRepoProjectResponseCreator;
    created_at: string;
    updated_at: string;
  };
  type CreateProjectCardResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateProjectCardResponse = {
    url: string;
    column_url: string;
    content_url: string;
    id: number;
    node_id: string;
    note: string;
    creator: CreateProjectCardResponseCreator;
    created_at: string;
    updated_at: string;
    archived: boolean;
  };
  type CreateOrgProjectResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateOrgProjectResponse = {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: CreateOrgProjectResponseCreator;
    created_at: string;
    updated_at: string;
  };
  type AddCollaboratorResponse = {};
  type UpdateResponsePlan = {
    name: string;
    space: number;
    private_repos: number;
    collaborators?: number;
  };
  type UnblockUserResponse = {};
  type RemoveTeamMembershipResponse = {};
  type RemoveOutsideCollaboratorResponse = {};
  type RemoveOrgMembershipResponse = {};
  type RemoveMemberResponse = {};
  type PublicizeMembershipResponse = {};
  type PingHookResponse = {};
  type GetTeamsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
    members_count?: number;
    repos_count?: number;
    created_at?: string;
    updated_at?: string;
    organization?: GetTeamsResponseItemOrganization;
  };
  type GetTeamReposResponseItemLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetTeamReposResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetTeamReposResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetTeamReposResponseItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetTeamReposResponseItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetTeamReposResponseItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
    license: GetTeamReposResponseItemLicense;
  };
  type GetTeamMembersResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetTeamResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetTeamResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: GetTeamResponseOrganization;
  };
  type GetPublicMembersResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetPendingTeamInvitesResponseItemInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetPendingTeamInvitesResponseItem = {
    id: number;
    login: string;
    email: string;
    role: string;
    created_at: string;
    inviter: GetPendingTeamInvitesResponseItemInviter;
    team_count: number;
    invitation_team_url: string;
  };
  type GetPendingOrgInvitesResponseItemInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetPendingOrgInvitesResponseItem = {
    id: number;
    login: string;
    email: string;
    role: string;
    created_at: string;
    inviter: GetPendingOrgInvitesResponseItemInviter;
    team_count: number;
    invitation_team_url: string;
  };
  type GetOutsideCollaboratorsResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetMembersResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInvitationTeamsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
  };
  type GetHooksResponseItemConfig = {
    url: string;
    content_type: string;
  };
  type GetHooksResponseItem = {
    id: number;
    url: string;
    ping_url: string;
    name: string;
    events: Array<string>;
    active: boolean;
    config: GetHooksResponseItemConfig;
    updated_at: string;
    created_at: string;
    test_url?: string;
  };
  type GetHookResponseConfig = {
    url: string;
    content_type: string;
  };
  type GetHookResponse = {
    id: number;
    url: string;
    ping_url: string;
    name: string;
    events: Array<string>;
    active: boolean;
    config: GetHookResponseConfig;
    updated_at: string;
    created_at: string;
    test_url?: string;
  };
  type GetBlockedUsersResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponsePlan = {
    name: string;
    space: number;
    private_repos: number;
  };
  type EditTeamResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type EditTeamResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: EditTeamResponseOrganization;
  };
  type EditHookResponseConfig = {
    url: string;
    content_type: string;
  };
  type EditHookResponse = {
    id: number;
    url: string;
    ping_url: string;
    name: string;
    events: Array<string>;
    active: boolean;
    config: EditHookResponseConfig;
    updated_at: string;
    created_at: string;
    test_url?: string;
  };
  type DeleteTeamRepoResponse = {};
  type DeleteTeamResponse = {};
  type DeleteHookResponse = {};
  type CreateTeamResponseOrganization = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type CreateTeamResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    slug: string;
    description: string;
    privacy: string;
    permission: string;
    members_url: string;
    repositories_url: string;
    parent: null;
    members_count: number;
    repos_count: number;
    created_at: string;
    updated_at: string;
    organization: CreateTeamResponseOrganization;
  };
  type CreateInvitationResponseInviter = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateInvitationResponse = {
    id: number;
    login: string;
    email: string;
    role: string;
    created_at: string;
    inviter: CreateInvitationResponseInviter;
    team_count: number;
    invitation_team_url: string;
  };
  type CreateHookResponseConfig = {
    url: string;
    content_type: string;
  };
  type CreateHookResponse = {
    id: number;
    url: string;
    ping_url: string;
    name: string;
    events: Array<string>;
    active: boolean;
    config: CreateHookResponseConfig;
    updated_at: string;
    created_at: string;
    test_url?: string;
  };
  type ConvertMemberToOutsideCollaboratorResponse = {};
  type ConcealMembershipResponse = {};
  type CheckBlockedUserResponse = {};
  type BlockUserResponse = {};
  type AddTeamRepoResponse = {};
  type RenderMarkdownRawResponse = {};
  type RenderMarkdownResponse = {};
  type GetRepoLicenseResponseLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetRepoLicenseResponseLinks = {
    self: string;
    git: string;
    html: string;
  };
  type GetRepoLicenseResponse = {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    content: string;
    encoding: string;
    _links: GetRepoLicenseResponseLinks;
    license: GetRepoLicenseResponseLicense;
  };
  type GetRepoCodeOfConductResponse = {
    key: string;
    name: string;
    url: string;
    body: string;
  };
  type GetRateLimitResponseRate = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type GetRateLimitResponseResourcesSearch = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type GetRateLimitResponseResourcesCore = {
    limit: number;
    remaining: number;
    reset: number;
  };
  type GetRateLimitResponseResources = {
    core: GetRateLimitResponseResourcesCore;
    search: GetRateLimitResponseResourcesSearch;
  };
  type GetRateLimitResponse = {
    resources: GetRateLimitResponseResources;
    rate: GetRateLimitResponseRate;
  };
  type GetLicensesResponseItem = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id?: string;
  };
  type GetLicenseResponse = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
    html_url: string;
    description: string;
    implementation: string;
    permissions: Array<string>;
    conditions: Array<string>;
    limitations: Array<string>;
    body: string;
    featured: boolean;
  };
  type GetGitignoreTemplateResponse = {
    name?: string;
    source?: string;
  };
  type GetCodesOfConductResponseItem = {
    key: string;
    name: string;
    url: string;
  };
  type GetCodeOfConductResponse = {
    key: string;
    name: string;
    url: string;
    body: string;
  };
  type UpdateImportResponse = {
    vcs: string;
    use_lfs: string;
    vcs_url: string;
    status: string;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
  };
  type UnlockRepoLockedForMigrationResponse = {};
  type UnlockRepoForAuthenticatedUserResponse = {};
  type StartMigrationResponseRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type StartMigrationResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type StartMigrationResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: StartMigrationResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: StartMigrationResponseRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type StartMigrationResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type StartMigrationResponse = {
    id: number;
    owner: StartMigrationResponseOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<StartMigrationResponseRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type StartImportResponse = {
    vcs: string;
    use_lfs: string;
    vcs_url: string;
    status: string;
    status_text: string;
    has_large_files: boolean;
    large_files_size: number;
    large_files_count: number;
    authors_count: number;
    percent: number;
    commit_count: number;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
  };
  type StartForAuthenticatedUserResponseRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type StartForAuthenticatedUserResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type StartForAuthenticatedUserResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: StartForAuthenticatedUserResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: StartForAuthenticatedUserResponseRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type StartForAuthenticatedUserResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type StartForAuthenticatedUserResponse = {
    id: number;
    owner: StartForAuthenticatedUserResponseOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<StartForAuthenticatedUserResponseRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type SetImportLfsPreferenceResponse = {
    vcs: string;
    use_lfs: string;
    vcs_url: string;
    status: string;
    status_text: string;
    has_large_files: boolean;
    large_files_size: number;
    large_files_count: number;
    authors_count: number;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
  };
  type MapImportCommitAuthorResponse = {
    id: number;
    remote_id: string;
    remote_name: string;
    email: string;
    name: string;
    url: string;
    import_url: string;
  };
  type ListForAuthenticatedUserResponseItemRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type ListForAuthenticatedUserResponseItemRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ListForAuthenticatedUserResponseItemRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: ListForAuthenticatedUserResponseItemRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: ListForAuthenticatedUserResponseItemRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type ListForAuthenticatedUserResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ListForAuthenticatedUserResponseItem = {
    id: number;
    owner: ListForAuthenticatedUserResponseItemOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<ListForAuthenticatedUserResponseItemRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type GetStatusForAuthenticatedUserResponseRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetStatusForAuthenticatedUserResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStatusForAuthenticatedUserResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetStatusForAuthenticatedUserResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetStatusForAuthenticatedUserResponseRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetStatusForAuthenticatedUserResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStatusForAuthenticatedUserResponse = {
    id: number;
    owner: GetStatusForAuthenticatedUserResponseOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<GetStatusForAuthenticatedUserResponseRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type GetMigrationsResponseItemRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetMigrationsResponseItemRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetMigrationsResponseItemRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetMigrationsResponseItemRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetMigrationsResponseItemRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetMigrationsResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetMigrationsResponseItem = {
    id: number;
    owner: GetMigrationsResponseItemOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<GetMigrationsResponseItemRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type GetMigrationStatusResponseRepositoriesItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetMigrationStatusResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetMigrationStatusResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetMigrationStatusResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetMigrationStatusResponseRepositoriesItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetMigrationStatusResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetMigrationStatusResponse = {
    id: number;
    owner: GetMigrationStatusResponseOwner;
    guid: string;
    state: string;
    lock_repositories: boolean;
    exclude_attachments: boolean;
    repositories: Array<GetMigrationStatusResponseRepositoriesItem>;
    url: string;
    created_at: string;
    updated_at: string;
  };
  type GetMigrationArchiveLinkResponse = {};
  type GetLargeImportFilesResponseItem = {
    ref_name: string;
    path: string;
    oid: string;
    size: number;
  };
  type GetImportProgressResponse = {
    vcs: string;
    use_lfs: string;
    vcs_url: string;
    status: string;
    status_text: string;
    has_large_files: boolean;
    large_files_size: number;
    large_files_count: number;
    authors_count: number;
    url: string;
    html_url: string;
    authors_url: string;
    repository_url: string;
  };
  type GetImportCommitAuthorsResponseItem = {
    id: number;
    remote_id: string;
    remote_name: string;
    email: string;
    name: string;
    url: string;
    import_url: string;
  };
  type GetArchiveForAuthenticatedUserResponse = {};
  type DeleteMigrationArchiveResponse = {};
  type DeleteArchiveForAuthenticatedUserResponse = {};
  type CancelImportResponse = {};
  type UpdateMilestoneResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateMilestoneResponse = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: UpdateMilestoneResponseCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type UpdateLabelResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type UnlockResponse = {};
  type ReplaceAllLabelsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type RemoveAssigneesFromIssueResponsePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type RemoveAssigneesFromIssueResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type RemoveAssigneesFromIssueResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: RemoveAssigneesFromIssueResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type RemoveAssigneesFromIssueResponseAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type RemoveAssigneesFromIssueResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type RemoveAssigneesFromIssueResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type RemoveAssigneesFromIssueResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type RemoveAssigneesFromIssueResponse = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    user: RemoveAssigneesFromIssueResponseUser;
    labels: Array<RemoveAssigneesFromIssueResponseLabelsItem>;
    assignee: RemoveAssigneesFromIssueResponseAssignee;
    assignees: Array<RemoveAssigneesFromIssueResponseAssigneesItem>;
    milestone: RemoveAssigneesFromIssueResponseMilestone;
    locked: boolean;
    active_lock_reason: string;
    comments: number;
    pull_request: RemoveAssigneesFromIssueResponsePullRequest;
    closed_at: null;
    created_at: string;
    updated_at: string;
  };
  type RemoveAllLabelsResponse = {};
  type LockResponse = {};
  type GetMilestonesResponseItemCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetMilestonesResponseItem = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetMilestonesResponseItemCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetMilestoneLabelsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetMilestoneResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetMilestoneResponse = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetMilestoneResponseCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetLabelsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetLabelResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetIssueLabelsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetForUserResponseItemRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetForUserResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForUserResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetForUserResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetForUserResponseItemRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetForUserResponseItemPullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetForUserResponseItemMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForUserResponseItemMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetForUserResponseItemMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetForUserResponseItemAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForUserResponseItemAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForUserResponseItemLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetForUserResponseItemUser = null | {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForRepoResponseItemPullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetForRepoResponseItemMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForRepoResponseItemMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetForRepoResponseItemMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetForRepoResponseItemAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForRepoResponseItemAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForRepoResponseItemLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetForRepoResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForRepoResponseItem = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    user: GetForRepoResponseItemUser;
    labels: Array<GetForRepoResponseItemLabelsItem>;
    assignee: GetForRepoResponseItemAssignee;
    assignees: Array<GetForRepoResponseItemAssigneesItem>;
    milestone: GetForRepoResponseItemMilestone;
    locked: boolean;
    active_lock_reason: string;
    comments: number;
    pull_request: GetForRepoResponseItemPullRequest;
    closed_at: null;
    created_at: string;
    updated_at: string;
  };
  type GetForOrgResponseItemRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetForOrgResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetForOrgResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetForOrgResponseItemRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetForOrgResponseItemPullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetForOrgResponseItemMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItemMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetForOrgResponseItemMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetForOrgResponseItemAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItemAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItemLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetForOrgResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForOrgResponseItem = {
    id: number;
    node_id: string;
    url: string;
    repository_url?: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    user?: GetForOrgResponseItemUser;
    labels?: Array<GetForOrgResponseItemLabelsItem>;
    assignee?: GetForOrgResponseItemAssignee;
    assignees?: Array<GetForOrgResponseItemAssigneesItem>;
    milestone?: GetForOrgResponseItemMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    comments?: number;
    pull_request?: GetForOrgResponseItemPullRequest;
    closed_at?: null;
    created_at: string;
    updated_at: string;
    repository?: GetForOrgResponseItemRepository;
    name?: string;
    full_name?: string;
    owner?: GetForOrgResponseItemOwner;
    private?: boolean;
    description?: string;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: GetForOrgResponseItemPermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    license?: GetForOrgResponseItemLicense;
  };
  type GetEventsTimelineResponseItemActor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsTimelineResponseItem = {
    id: number;
    node_id: string;
    url: string;
    actor: GetEventsTimelineResponseItemActor;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
  };
  type GetEventsForRepoResponseItemIssuePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetEventsForRepoResponseItemIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsForRepoResponseItemIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetEventsForRepoResponseItemIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetEventsForRepoResponseItemIssueAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsForRepoResponseItemIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsForRepoResponseItemIssueLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetEventsForRepoResponseItemIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsForRepoResponseItemIssue = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    user: GetEventsForRepoResponseItemIssueUser;
    labels: Array<GetEventsForRepoResponseItemIssueLabelsItem>;
    assignee: GetEventsForRepoResponseItemIssueAssignee;
    assignees: Array<GetEventsForRepoResponseItemIssueAssigneesItem>;
    milestone: GetEventsForRepoResponseItemIssueMilestone;
    locked: boolean;
    active_lock_reason: string;
    comments: number;
    pull_request: GetEventsForRepoResponseItemIssuePullRequest;
    closed_at: null;
    created_at: string;
    updated_at: string;
  };
  type GetEventsForRepoResponseItemActor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsForRepoResponseItem = {
    id: number;
    node_id: string;
    url: string;
    actor: GetEventsForRepoResponseItemActor;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
    issue: GetEventsForRepoResponseItemIssue;
  };
  type GetEventsResponseItemActor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    actor: GetEventsResponseItemActor;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
  };
  type GetEventResponseIssuePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetEventResponseIssueMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventResponseIssueMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetEventResponseIssueMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetEventResponseIssueAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventResponseIssueAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventResponseIssueLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetEventResponseIssueUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventResponseIssue = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    user: GetEventResponseIssueUser;
    labels: Array<GetEventResponseIssueLabelsItem>;
    assignee: GetEventResponseIssueAssignee;
    assignees: Array<GetEventResponseIssueAssigneesItem>;
    milestone: GetEventResponseIssueMilestone;
    locked: boolean;
    active_lock_reason: string;
    comments: number;
    pull_request: GetEventResponseIssuePullRequest;
    closed_at: null;
    created_at: string;
    updated_at: string;
  };
  type GetEventResponseActor = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetEventResponse = {
    id: number;
    node_id: string;
    url: string;
    actor: GetEventResponseActor;
    event: string;
    commit_id: string;
    commit_url: string;
    created_at: string;
    issue: GetEventResponseIssue;
  };
  type GetCommentsForRepoResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommentsForRepoResponseItem = {
    id: number;
    node_id: string;
    url: string;
    html_url: string;
    body: string;
    user: GetCommentsForRepoResponseItemUser;
    created_at: string;
    updated_at: string;
    pull_request_review_id?: number;
    diff_hunk?: string;
    path?: string;
    position?: number;
    original_position?: number;
    commit_id?: string;
    original_commit_id?: string;
    in_reply_to_id?: number;
    pull_request_url?: string;
    _links?: GetCommentsForRepoResponseItemLinks;
  };
  type GetAssigneesResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetAllResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetAllResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetAllResponseItemRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetAllResponseItemPullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetAllResponseItemMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetAllResponseItemMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetAllResponseItemAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetAllResponseItemLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetAllResponseItemUser = null | {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseClosedBy = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponsePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type GetResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: GetResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type GetResponseAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type GetResponseUser = null | {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseClosedBy = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponsePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type EditResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: EditResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type EditResponseAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type EditResponseUser = null | {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type DeleteMilestoneResponse = {};
  type DeleteLabelResponse = {};
  type CreateMilestoneResponseCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateMilestoneResponse = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: CreateMilestoneResponseCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type CreateLabelResponse = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type CreateResponseClosedBy = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponsePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type CreateResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: CreateResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type CreateResponseAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type CreateResponseUser = null | {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CheckAssigneeResponse = {};
  type AddLabelsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type AddAssigneesToIssueResponsePullRequest = {
    url: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
  };
  type AddAssigneesToIssueResponseMilestoneCreator = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type AddAssigneesToIssueResponseMilestone = {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    state: string;
    title: string;
    description: string;
    creator: AddAssigneesToIssueResponseMilestoneCreator;
    open_issues: number;
    closed_issues: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    due_on: string;
  };
  type AddAssigneesToIssueResponseAssigneesItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type AddAssigneesToIssueResponseAssignee = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type AddAssigneesToIssueResponseLabelsItem = {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  };
  type AddAssigneesToIssueResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type AddAssigneesToIssueResponse = {
    id: number;
    node_id: string;
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    number: number;
    state: string;
    title: string;
    body: string;
    user: AddAssigneesToIssueResponseUser;
    labels: Array<AddAssigneesToIssueResponseLabelsItem>;
    assignee: AddAssigneesToIssueResponseAssignee;
    assignees: Array<AddAssigneesToIssueResponseAssigneesItem>;
    milestone: AddAssigneesToIssueResponseMilestone;
    locked: boolean;
    active_lock_reason: string;
    comments: number;
    pull_request: AddAssigneesToIssueResponsePullRequest;
    closed_at: null;
    created_at: string;
    updated_at: string;
  };
  type UpdateReferenceResponseObject = {
    type: string;
    sha: string;
    url: string;
  };
  type UpdateReferenceResponse = {
    ref: string;
    node_id: string;
    url: string;
    object: UpdateReferenceResponseObject;
  };
  type GetTagSignatureVerificationResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetTagSignatureVerificationResponseObject = {
    type: string;
    sha: string;
    url: string;
  };
  type GetTagSignatureVerificationResponseTagger = {
    name: string;
    email: string;
    date: string;
  };
  type GetTagSignatureVerificationResponse = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: GetTagSignatureVerificationResponseTagger;
    object: GetTagSignatureVerificationResponseObject;
    verification: GetTagSignatureVerificationResponseVerification;
  };
  type GetTagResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetTagResponseObject = {
    type: string;
    sha: string;
    url: string;
  };
  type GetTagResponseTagger = {
    name: string;
    email: string;
    date: string;
  };
  type GetTagResponse = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: GetTagResponseTagger;
    object: GetTagResponseObject;
    verification: GetTagResponseVerification;
  };
  type GetCommitSignatureVerificationResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetCommitSignatureVerificationResponseParentsItem = {
    url: string;
    sha: string;
  };
  type GetCommitSignatureVerificationResponseTree = {
    url: string;
    sha: string;
  };
  type GetCommitSignatureVerificationResponseCommitter = {
    date: string;
    name: string;
    email: string;
  };
  type GetCommitSignatureVerificationResponseAuthor = {
    date: string;
    name: string;
    email: string;
  };
  type GetCommitSignatureVerificationResponse = {
    sha: string;
    url: string;
    author: GetCommitSignatureVerificationResponseAuthor;
    committer: GetCommitSignatureVerificationResponseCommitter;
    message: string;
    tree: GetCommitSignatureVerificationResponseTree;
    parents: Array<GetCommitSignatureVerificationResponseParentsItem>;
    verification: GetCommitSignatureVerificationResponseVerification;
  };
  type GetCommitResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type GetCommitResponseParentsItem = {
    url: string;
    sha: string;
  };
  type GetCommitResponseTree = {
    url: string;
    sha: string;
  };
  type GetCommitResponseCommitter = {
    date?: string;
    name?: string;
    email?: string;
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  };
  type GetCommitResponseAuthor = {
    date?: string;
    name?: string;
    email?: string;
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  };
  type GetCommitResponse = {
    sha: string;
    url: string;
    author: GetCommitResponseAuthor;
    committer: GetCommitResponseCommitter;
    message?: string;
    tree?: GetCommitResponseTree;
    parents: Array<GetCommitResponseParentsItem>;
    verification?: GetCommitResponseVerification;
    node_id?: string;
    html_url?: string;
    comments_url?: string;
    commit?: GetCommitResponseCommit;
    stats?: GetCommitResponseStats;
    files?: Array<GetCommitResponseFilesItem>;
  };
  type GetBlobResponse = {
    content: string;
    encoding: string;
    url: string;
    sha: string;
    size: number;
  };
  type DeleteReferenceResponse = {};
  type CreateTreeResponseTreeItem = {
    path: string;
    mode: string;
    type: string;
    size: number;
    sha: string;
    url: string;
  };
  type CreateTreeResponse = {
    sha: string;
    url: string;
    tree: Array<CreateTreeResponseTreeItem>;
  };
  type CreateTagResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type CreateTagResponseObject = {
    type: string;
    sha: string;
    url: string;
  };
  type CreateTagResponseTagger = {
    name: string;
    email: string;
    date: string;
  };
  type CreateTagResponse = {
    node_id: string;
    tag: string;
    sha: string;
    url: string;
    message: string;
    tagger: CreateTagResponseTagger;
    object: CreateTagResponseObject;
    verification: CreateTagResponseVerification;
  };
  type CreateReferenceResponseObject = {
    type: string;
    sha: string;
    url: string;
  };
  type CreateReferenceResponse = {
    ref: string;
    node_id: string;
    url: string;
    object: CreateReferenceResponseObject;
  };
  type CreateCommitResponseVerification = {
    verified: boolean;
    reason: string;
    signature: null;
    payload: null;
  };
  type CreateCommitResponseParentsItem = {
    url: string;
    sha: string;
  };
  type CreateCommitResponseTree = {
    url: string;
    sha: string;
  };
  type CreateCommitResponseCommitter = {
    date: string;
    name: string;
    email: string;
  };
  type CreateCommitResponseAuthor = {
    date: string;
    name: string;
    email: string;
  };
  type CreateCommitResponse = {
    sha: string;
    node_id: string;
    url: string;
    author: CreateCommitResponseAuthor;
    committer: CreateCommitResponseCommitter;
    message: string;
    tree: CreateCommitResponseTree;
    parents: Array<CreateCommitResponseParentsItem>;
    verification: CreateCommitResponseVerification;
  };
  type CreateBlobResponse = {
    url: string;
    sha: string;
  };
  type UnstarResponse = {};
  type StarResponse = {};
  type GetStarredResponseItemFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    truncated: boolean;
    language: string;
  };
  type GetStarredResponseItemFiles = {
    "ring.erl": GetStarredResponseItemFilesRingErl;
  };
  type GetStarredResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStarredResponseItem = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    description: string;
    public: boolean;
    owner: GetStarredResponseItemOwner;
    user: null;
    files: GetStarredResponseItemFiles;
    truncated: boolean;
    comments: number;
    comments_url: string;
    html_url: string;
    git_pull_url: string;
    git_push_url: string;
    created_at: string;
    updated_at: string;
  };
  type GetRevisionResponseHistoryItemChangeStatus = {
    deletions: number;
    additions: number;
    total: number;
  };
  type GetRevisionResponseHistoryItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRevisionResponseHistoryItem = {
    url: string;
    version: string;
    user: GetRevisionResponseHistoryItemUser;
    change_status: GetRevisionResponseHistoryItemChangeStatus;
    committed_at: string;
  };
  type GetRevisionResponseForksItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRevisionResponseForksItem = {
    user: GetRevisionResponseForksItemUser;
    url: string;
    id: string;
    created_at: string;
    updated_at: string;
  };
  type GetRevisionResponseFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    language: string;
    truncated: boolean;
    content: string;
  };
  type GetRevisionResponseFiles = {
    "ring.erl": GetRevisionResponseFilesRingErl;
  };
  type GetRevisionResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetRevisionResponse = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    description: string;
    public: boolean;
    owner: GetRevisionResponseOwner;
    user: null;
    files: GetRevisionResponseFiles;
    truncated: boolean;
    comments: number;
    comments_url: string;
    html_url: string;
    git_pull_url: string;
    git_push_url: string;
    created_at: string;
    updated_at: string;
    forks: Array<GetRevisionResponseForksItem>;
    history: Array<GetRevisionResponseHistoryItem>;
  };
  type GetPublicResponseItemFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    truncated: boolean;
    language: string;
  };
  type GetPublicResponseItemFiles = {
    "ring.erl": GetPublicResponseItemFilesRingErl;
  };
  type GetPublicResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetPublicResponseItem = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string | number;
    node_id: string;
    description: string;
    public?: boolean;
    owner: GetPublicResponseItemOwner;
    user?: null;
    files?: GetPublicResponseItemFiles;
    truncated?: boolean;
    comments?: number;
    comments_url: string;
    html_url: string;
    git_pull_url?: string;
    git_push_url?: string;
    created_at?: string;
    updated_at?: string;
    name?: string;
    full_name?: string;
    private?: boolean;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
  };
  type GetForksResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForksResponseItem = {
    user?: GetForksResponseItemUser;
    url: string;
    id: string | number;
    created_at: string;
    updated_at: string;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: GetForksResponseItemOwner;
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: GetForksResponseItemPermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    license?: GetForksResponseItemLicense;
  };
  type GetForUserResponseItemFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    truncated: boolean;
    language: string;
  };
  type GetForUserResponseItemFiles = {
    "ring.erl": GetForUserResponseItemFilesRingErl;
  };
  type GetForUserResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetForUserResponseItem = {
    url: string;
    forks_url?: string;
    commits_url?: string;
    id: string | number;
    node_id: string;
    description?: string;
    public?: boolean;
    owner?: GetForUserResponseItemOwner;
    user?: GetForUserResponseItemUser;
    files?: GetForUserResponseItemFiles;
    truncated?: boolean;
    comments?: number;
    comments_url?: string;
    html_url?: string;
    git_pull_url?: string;
    git_push_url?: string;
    created_at?: string;
    updated_at?: string;
    repository_url?: string;
    labels_url?: string;
    events_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    labels?: Array<GetForUserResponseItemLabelsItem>;
    assignee?: GetForUserResponseItemAssignee;
    assignees?: Array<GetForUserResponseItemAssigneesItem>;
    milestone?: GetForUserResponseItemMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    pull_request?: GetForUserResponseItemPullRequest;
    closed_at?: null;
    repository?: GetForUserResponseItemRepository;
    login?: string;
    repos_url?: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url?: string;
  };
  type GetCommitsResponseItemChangeStatus = {
    deletions: number;
    additions: number;
    total: number;
  };
  type GetCommitsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommitsResponseItem = {
    url: string;
    version?: string;
    user?: GetCommitsResponseItemUser;
    change_status?: GetCommitsResponseItemChangeStatus;
    committed_at?: string;
    sha?: string;
    node_id?: string;
    html_url?: string;
    comments_url?: string;
    commit?: GetCommitsResponseItemCommit;
    author?: GetCommitsResponseItemAuthor;
    committer?: GetCommitsResponseItemCommitter;
    parents?: Array<GetCommitsResponseItemParentsItem>;
  };
  type GetCommentsResponseItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommentsResponseItem = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: GetCommentsResponseItemUser;
    created_at: string;
    updated_at: string;
    html_url?: string;
    pull_request_review_id?: number;
    diff_hunk?: string;
    path?: string;
    position?: number;
    original_position?: number;
    commit_id?: string;
    original_commit_id?: string;
    in_reply_to_id?: number;
    pull_request_url?: string;
    _links?: GetCommentsResponseItemLinks;
  };
  type GetCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetCommentResponse = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: GetCommentResponseUser;
    created_at: string;
    updated_at: string;
    html_url?: string;
    pull_request_review_id?: number;
    diff_hunk?: string;
    path?: string;
    position?: number;
    original_position?: number;
    commit_id?: string;
    original_commit_id?: string;
    in_reply_to_id?: number;
    pull_request_url?: string;
    _links?: GetCommentResponseLinks;
  };
  type GetAllResponseItemFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    truncated: boolean;
    language: string;
  };
  type GetAllResponseItemFiles = { "ring.erl": GetAllResponseItemFilesRingErl };
  type GetAllResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseHistoryItemChangeStatus = {
    deletions: number;
    additions: number;
    total: number;
  };
  type GetResponseHistoryItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseHistoryItem = {
    url: string;
    version: string;
    user: GetResponseHistoryItemUser;
    change_status: GetResponseHistoryItemChangeStatus;
    committed_at: string;
  };
  type GetResponseForksItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetResponseForksItem = {
    user: GetResponseForksItemUser;
    url: string;
    id: string;
    created_at: string;
    updated_at: string;
  };
  type GetResponseFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    language: string;
    truncated: boolean;
    content: string;
  };
  type GetResponseFiles = { "ring.erl": GetResponseFilesRingErl };
  type ForkResponseFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    truncated: boolean;
    language: string;
  };
  type ForkResponseFiles = { "ring.erl": ForkResponseFilesRingErl };
  type ForkResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ForkResponse = {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string | number;
    node_id: string;
    description: string;
    public?: boolean;
    owner: ForkResponseOwner;
    user?: null;
    files?: ForkResponseFiles;
    truncated?: boolean;
    comments?: number;
    comments_url: string;
    html_url: string;
    git_pull_url?: string;
    git_push_url?: string;
    created_at: string;
    updated_at: string;
    name?: string;
    full_name?: string;
    private?: boolean;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: ForkResponsePermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  };
  type EditCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditCommentResponse = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: EditCommentResponseUser;
    created_at: string;
    updated_at: string;
    html_url?: string;
    pull_request_review_id?: number;
    diff_hunk?: string;
    path?: string;
    position?: number;
    original_position?: number;
    commit_id?: string;
    original_commit_id?: string;
    in_reply_to_id?: number;
    pull_request_url?: string;
    _links?: EditCommentResponseLinks;
  };
  type EditResponseHistoryItemChangeStatus = {
    deletions: number;
    additions: number;
    total: number;
  };
  type EditResponseHistoryItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseHistoryItem = {
    url: string;
    version: string;
    user: EditResponseHistoryItemUser;
    change_status: EditResponseHistoryItemChangeStatus;
    committed_at: string;
  };
  type EditResponseForksItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponseForksItem = {
    user: EditResponseForksItemUser;
    url: string;
    id: string;
    created_at: string;
    updated_at: string;
  };
  type EditResponseFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    language: string;
    truncated: boolean;
    content: string;
  };
  type EditResponseFiles = { "ring.erl": EditResponseFilesRingErl };
  type EditResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type EditResponse = {
    url: string;
    forks_url?: string;
    commits_url?: string;
    id: string | number;
    node_id: string;
    description?: string;
    public?: boolean;
    owner?: EditResponseOwner;
    user?: EditResponseUser;
    files?: EditResponseFiles;
    truncated?: boolean;
    comments?: number;
    comments_url: string;
    html_url: string;
    git_pull_url?: string;
    git_push_url?: string;
    created_at: string;
    updated_at: string;
    forks?: Array<EditResponseForksItem>;
    history?: Array<EditResponseHistoryItem>;
    repository_url?: string;
    labels_url?: string;
    events_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    labels?: Array<EditResponseLabelsItem>;
    assignee?: EditResponseAssignee;
    assignees?: Array<EditResponseAssigneesItem>;
    milestone?: EditResponseMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    pull_request?: EditResponsePullRequest;
    closed_at?: null;
    closed_by?: EditResponseClosedBy;
    name?: string;
    full_name?: string;
    private?: boolean;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: EditResponsePermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    organization?: EditResponseOrganization;
    parent?: EditResponseParent;
    source?: EditResponseSource;
  };
  type DeleteCommentResponse = {};
  type CreateCommentResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateCommentResponse = {
    id: number;
    node_id: string;
    url: string;
    body: string;
    user: CreateCommentResponseUser;
    created_at: string;
    updated_at: string;
    html_url?: string;
    pull_request_review_id?: number;
    diff_hunk?: string;
    path?: string;
    position?: number;
    original_position?: number;
    commit_id?: string;
    original_commit_id?: string;
    in_reply_to_id?: number;
    pull_request_url?: string;
    _links?: CreateCommentResponseLinks;
  };
  type CreateResponseHistoryItemChangeStatus = {
    deletions: number;
    additions: number;
    total: number;
  };
  type CreateResponseHistoryItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseHistoryItem = {
    url: string;
    version: string;
    user: CreateResponseHistoryItemUser;
    change_status: CreateResponseHistoryItemChangeStatus;
    committed_at: string;
  };
  type CreateResponseForksItemUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateResponseForksItem = {
    user: CreateResponseForksItemUser;
    url: string;
    id: string;
    created_at: string;
    updated_at: string;
  };
  type CreateResponseFilesRingErl = {
    size: number;
    raw_url: string;
    type: string;
    language: string;
    truncated: boolean;
    content: string;
  };
  type CreateResponseFiles = { "ring.erl": CreateResponseFilesRingErl };
  type CreateResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type UpdateResponsePullRequestsItemBaseRepo = {
    id: number;
    url: string;
    name: string;
  };
  type UpdateResponsePullRequestsItemBase = {
    ref: string;
    sha: string;
    repo: UpdateResponsePullRequestsItemBaseRepo;
  };
  type UpdateResponsePullRequestsItemHeadRepo = {
    id: number;
    url: string;
    name: string;
  };
  type UpdateResponsePullRequestsItemHead = {
    ref: string;
    sha: string;
    repo: UpdateResponsePullRequestsItemHeadRepo;
  };
  type UpdateResponsePullRequestsItem = {
    url: string;
    id: number;
    number: number;
    head: UpdateResponsePullRequestsItemHead;
    base: UpdateResponsePullRequestsItemBase;
  };
  type UpdateResponseAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type UpdateResponseCheckSuite = { id: number };
  type UpdateResponseOutput = {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  type SetSuitesPreferencesResponseRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type SetSuitesPreferencesResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type SetSuitesPreferencesResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: SetSuitesPreferencesResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: SetSuitesPreferencesResponseRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type SetSuitesPreferencesResponsePreferencesAutoTriggerChecksItem = {
    app_id: number;
    setting: boolean;
  };
  type SetSuitesPreferencesResponsePreferences = {
    auto_trigger_checks: Array<
      SetSuitesPreferencesResponsePreferencesAutoTriggerChecksItem
    >;
  };
  type SetSuitesPreferencesResponse = {
    preferences: SetSuitesPreferencesResponsePreferences;
    repository: SetSuitesPreferencesResponseRepository;
  };
  type RequestSuitesResponse = {};
  type ListSuitesForRefResponseCheckSuitesItemRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type ListSuitesForRefResponseCheckSuitesItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ListSuitesForRefResponseCheckSuitesItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: ListSuitesForRefResponseCheckSuitesItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: ListSuitesForRefResponseCheckSuitesItemRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type ListSuitesForRefResponseCheckSuitesItemAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type ListSuitesForRefResponseCheckSuitesItemApp = {
    id: number;
    node_id: string;
    owner: ListSuitesForRefResponseCheckSuitesItemAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type ListSuitesForRefResponseCheckSuitesItem = {
    id: number;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<any>;
    app: ListSuitesForRefResponseCheckSuitesItemApp;
    repository: ListSuitesForRefResponseCheckSuitesItemRepository;
  };
  type ListSuitesForRefResponse = {
    total_count: number;
    check_suites: Array<ListSuitesForRefResponseCheckSuitesItem>;
  };
  type ListForSuiteResponseCheckRunsItemPullRequestsItemBaseRepo = {
    id: number;
    url: string;
    name: string;
  };
  type ListForSuiteResponseCheckRunsItemPullRequestsItemBase = {
    ref: string;
    sha: string;
    repo: ListForSuiteResponseCheckRunsItemPullRequestsItemBaseRepo;
  };
  type ListForSuiteResponseCheckRunsItemPullRequestsItemHeadRepo = {
    id: number;
    url: string;
    name: string;
  };
  type ListForSuiteResponseCheckRunsItemPullRequestsItemHead = {
    ref: string;
    sha: string;
    repo: ListForSuiteResponseCheckRunsItemPullRequestsItemHeadRepo;
  };
  type ListForSuiteResponseCheckRunsItemPullRequestsItem = {
    url: string;
    id: number;
    number: number;
    head: ListForSuiteResponseCheckRunsItemPullRequestsItemHead;
    base: ListForSuiteResponseCheckRunsItemPullRequestsItemBase;
  };
  type ListForSuiteResponseCheckRunsItemAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type ListForSuiteResponseCheckRunsItemApp = {
    id: number;
    node_id: string;
    owner: ListForSuiteResponseCheckRunsItemAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type ListForSuiteResponseCheckRunsItemCheckSuite = { id: number };
  type ListForSuiteResponseCheckRunsItemOutput = {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  type ListForSuiteResponseCheckRunsItem = {
    id: number;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    status: string;
    conclusion: string;
    started_at: string;
    completed_at: string;
    output: ListForSuiteResponseCheckRunsItemOutput;
    name: string;
    check_suite: ListForSuiteResponseCheckRunsItemCheckSuite;
    app: ListForSuiteResponseCheckRunsItemApp;
    pull_requests: Array<ListForSuiteResponseCheckRunsItemPullRequestsItem>;
  };
  type ListForSuiteResponse = {
    total_count: number;
    check_runs: Array<ListForSuiteResponseCheckRunsItem>;
  };
  type ListForRefResponseCheckRunsItemPullRequestsItemBaseRepo = {
    id: number;
    url: string;
    name: string;
  };
  type ListForRefResponseCheckRunsItemPullRequestsItemBase = {
    ref: string;
    sha: string;
    repo: ListForRefResponseCheckRunsItemPullRequestsItemBaseRepo;
  };
  type ListForRefResponseCheckRunsItemPullRequestsItemHeadRepo = {
    id: number;
    url: string;
    name: string;
  };
  type ListForRefResponseCheckRunsItemPullRequestsItemHead = {
    ref: string;
    sha: string;
    repo: ListForRefResponseCheckRunsItemPullRequestsItemHeadRepo;
  };
  type ListForRefResponseCheckRunsItemPullRequestsItem = {
    url: string;
    id: number;
    number: number;
    head: ListForRefResponseCheckRunsItemPullRequestsItemHead;
    base: ListForRefResponseCheckRunsItemPullRequestsItemBase;
  };
  type ListForRefResponseCheckRunsItemAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type ListForRefResponseCheckRunsItemApp = {
    id: number;
    node_id: string;
    owner: ListForRefResponseCheckRunsItemAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type ListForRefResponseCheckRunsItemCheckSuite = { id: number };
  type ListForRefResponseCheckRunsItemOutput = {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  type ListForRefResponseCheckRunsItem = {
    id: number;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    status: string;
    conclusion: string;
    started_at: string;
    completed_at: string;
    output: ListForRefResponseCheckRunsItemOutput;
    name: string;
    check_suite: ListForRefResponseCheckRunsItemCheckSuite;
    app: ListForRefResponseCheckRunsItemApp;
    pull_requests: Array<ListForRefResponseCheckRunsItemPullRequestsItem>;
  };
  type ListForRefResponse = {
    total_count: number;
    check_runs: Array<ListForRefResponseCheckRunsItem>;
  };
  type ListAnnotationsResponseItem = {
    filename: string;
    blob_href: string;
    start_line: number;
    end_line: number;
    warning_level: string;
    message: string;
    raw_details: string;
  };
  type GetSuiteResponseRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetSuiteResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetSuiteResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetSuiteResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetSuiteResponseRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetSuiteResponseAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetSuiteResponseApp = {
    id: number;
    node_id: string;
    owner: GetSuiteResponseAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type GetSuiteResponse = {
    id: number;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<any>;
    app: GetSuiteResponseApp;
    repository: GetSuiteResponseRepository;
  };
  type GetResponsePullRequestsItemBaseRepo = {
    id: number;
    url: string;
    name: string;
  };
  type GetResponsePullRequestsItemBase = {
    ref: string;
    sha: string;
    repo: GetResponsePullRequestsItemBaseRepo;
  };
  type GetResponsePullRequestsItemHeadRepo = {
    id: number;
    url: string;
    name: string;
  };
  type GetResponsePullRequestsItemHead = {
    ref: string;
    sha: string;
    repo: GetResponsePullRequestsItemHeadRepo;
  };
  type GetResponsePullRequestsItem = {
    url: string;
    id: number;
    number: number;
    head: GetResponsePullRequestsItemHead;
    base: GetResponsePullRequestsItemBase;
  };
  type GetResponseAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetResponseCheckSuite = { id: number };
  type GetResponseOutput = {
    title: string;
    summary: string;
    text: string;
    annotations_count: number;
    annotations_url: string;
  };
  type CreateSuiteResponseRepositoryPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type CreateSuiteResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CreateSuiteResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: CreateSuiteResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: CreateSuiteResponseRepositoryPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type CreateSuiteResponseAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type CreateSuiteResponseApp = {
    id: number;
    node_id: string;
    owner: CreateSuiteResponseAppOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type CreateSuiteResponse = {
    id: number;
    head_branch: string;
    head_sha: string;
    status: string;
    conclusion: string;
    url: string;
    before: string;
    after: string;
    pull_requests: Array<any>;
    app: CreateSuiteResponseApp;
    repository: CreateSuiteResponseRepository;
  };
  type CreateResponsePullRequestsItemBaseRepo = {
    id: number;
    url: string;
    name: string;
  };
  type CreateResponsePullRequestsItemBase = {
    ref: string;
    sha: string;
    repo: CreateResponsePullRequestsItemBaseRepo;
  };
  type CreateResponsePullRequestsItemHeadRepo = {
    id: number;
    url: string;
    name: string;
  };
  type CreateResponsePullRequestsItemHead = {
    ref: string;
    sha: string;
    repo: CreateResponsePullRequestsItemHeadRepo;
  };
  type CreateResponsePullRequestsItem = {
    url: string;
    id: number;
    number: number;
    head: CreateResponsePullRequestsItemHead;
    base: CreateResponsePullRequestsItemBase;
  };
  type CreateResponseAppOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type CreateResponseCheckSuite = { id: number };
  type CreateResponseOutput = {
    title: string;
    summary: string;
    text: string;
  };
  type UpdateResponseApp = {
    url?: string;
    name: string;
    client_id?: string;
    id?: number;
    node_id?: string;
    owner?: UpdateResponseAppOwner;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
  };
  type UpdateResponse = {
    id: number;
    url: string;
    scopes?: Array<string>;
    token?: string;
    token_last_eight?: string;
    hashed_token?: string;
    app?: UpdateResponseApp;
    note?: string;
    note_url?: string;
    updated_at?: string;
    created_at?: string;
    fingerprint?: string;
    head_sha?: string;
    external_id?: string;
    html_url?: string;
    status?: string;
    conclusion?: string;
    started_at?: string;
    completed_at?: string;
    output?: UpdateResponseOutput;
    name?: string;
    check_suite?: UpdateResponseCheckSuite;
    pull_requests?: Array<UpdateResponsePullRequestsItem>;
    login?: string;
    node_id?: string;
    repos_url?: string;
    events_url?: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url?: string;
    description?: string;
    company?: string;
    blog?: string;
    location?: string;
    email?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    public_repos?: number;
    public_gists?: number;
    followers?: number;
    following?: number;
    type?: string;
    total_private_repos?: number;
    owned_private_repos?: number;
    private_gists?: number;
    disk_usage?: number;
    collaborators?: number;
    billing_email?: string;
    plan?: UpdateResponsePlan;
    default_repository_settings?: string;
    members_can_create_repositories?: boolean;
    two_factor_requirement_enabled?: boolean;
    diff_url?: string;
    patch_url?: string;
    issue_url?: string;
    commits_url?: string;
    review_comments_url?: string;
    review_comment_url?: string;
    comments_url?: string;
    statuses_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    assignee?: UpdateResponseAssignee;
    labels?: Array<UpdateResponseLabelsItem>;
    milestone?: UpdateResponseMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    closed_at?: string;
    merged_at?: string;
    head?: UpdateResponseHead;
    base?: UpdateResponseBase;
    _links?: UpdateResponseLinks;
    user?: UpdateResponseUser;
    gravatar_id?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    received_events_url?: string;
    site_admin?: boolean;
    hireable?: boolean;
    bio?: string;
    two_factor_authentication?: boolean;
  };
  type RevokeGrantResponse = {};
  type RevokeResponse = {};
  type ResetResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type ResetResponseApp = {
    url: string;
    name: string;
    client_id: string;
  };
  type ResetResponse = {
    id: number;
    url: string;
    scopes: Array<string>;
    token: string;
    token_last_eight: string;
    hashed_token: string;
    app: ResetResponseApp;
    note: string;
    note_url: string;
    updated_at: string;
    created_at: string;
    fingerprint: string;
    user: ResetResponseUser;
  };
  type GetGrantsResponseItemApp = {
    url: string;
    name: string;
    client_id: string;
  };
  type GetGrantsResponseItem = {
    id: number;
    url: string;
    app: GetGrantsResponseItemApp;
    created_at: string;
    updated_at: string;
    scopes: Array<string>;
  };
  type GetGrantResponseApp = {
    url: string;
    name: string;
    client_id: string;
  };
  type GetGrantResponse = {
    id: number;
    url: string;
    app: GetGrantResponseApp;
    created_at: string;
    updated_at: string;
    scopes: Array<string>;
  };
  type GetAllResponseItemApp = {
    url: string;
    name: string;
    client_id: string;
  };
  type GetAllResponseItem = {
    id: number | string;
    url: string;
    scopes?: Array<string>;
    token?: string;
    token_last_eight?: string;
    hashed_token?: string;
    app?: GetAllResponseItemApp;
    note?: string;
    note_url?: string;
    updated_at?: string;
    created_at?: string;
    fingerprint?: string;
    forks_url?: string;
    commits_url?: string;
    node_id?: string;
    description?: string;
    public?: boolean;
    owner?: GetAllResponseItemOwner;
    user?: GetAllResponseItemUser;
    files?: GetAllResponseItemFiles;
    truncated?: boolean;
    comments?: number;
    comments_url?: string;
    html_url?: string;
    git_pull_url?: string;
    git_push_url?: string;
    repository_url?: string;
    labels_url?: string;
    events_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    labels?: Array<GetAllResponseItemLabelsItem>;
    assignee?: GetAllResponseItemAssignee;
    assignees?: Array<GetAllResponseItemAssigneesItem>;
    milestone?: GetAllResponseItemMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    pull_request?: GetAllResponseItemPullRequest;
    closed_at?: null | string;
    repository?: GetAllResponseItemRepository;
    login?: string;
    repos_url?: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url?: string;
    diff_url?: string;
    patch_url?: string;
    issue_url?: string;
    review_comments_url?: string;
    review_comment_url?: string;
    statuses_url?: string;
    merged_at?: string;
    head?: GetAllResponseItemHead;
    base?: GetAllResponseItemBase;
    _links?: GetAllResponseItemLinks;
    gravatar_id?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  };
  type GetResponseApp = {
    url?: string;
    name: string;
    client_id?: string;
    id?: number;
    node_id?: string;
    owner?: GetResponseAppOwner;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
  };
  type DeleteGrantResponse = {};
  type DeleteResponse = {
    message?: string;
    documentation_url?: string;
  };
  type CreateResponseApp = {
    url?: string;
    name: string;
    client_id?: string;
    id?: number;
    node_id?: string;
    owner?: CreateResponseAppOwner;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
  };
  type CreateResponse = {
    id: number | string;
    url: string;
    scopes?: Array<string>;
    token?: string;
    token_last_eight?: string;
    hashed_token?: string;
    app?: CreateResponseApp;
    note?: string;
    note_url?: string;
    updated_at?: string;
    created_at?: string;
    fingerprint?: string;
    head_sha?: string;
    external_id?: string;
    html_url?: string;
    status?: string;
    conclusion?: null;
    started_at?: string;
    completed_at?: null;
    output?: CreateResponseOutput;
    name?: string;
    check_suite?: CreateResponseCheckSuite;
    pull_requests?: Array<CreateResponsePullRequestsItem>;
    forks_url?: string;
    commits_url?: string;
    node_id?: string;
    description?: string;
    public?: boolean;
    owner?: CreateResponseOwner;
    user?: CreateResponseUser;
    files?: CreateResponseFiles;
    truncated?: boolean;
    comments?: number;
    comments_url?: string;
    git_pull_url?: string;
    git_push_url?: string;
    forks?: Array<CreateResponseForksItem>;
    history?: Array<CreateResponseHistoryItem>;
    repository_url?: string;
    labels_url?: string;
    events_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    labels?: Array<CreateResponseLabelsItem>;
    assignee?: CreateResponseAssignee;
    assignees?: Array<CreateResponseAssigneesItem>;
    milestone?: CreateResponseMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    pull_request?: CreateResponsePullRequest;
    closed_at?: null | string;
    closed_by?: CreateResponseClosedBy;
    diff_url?: string;
    patch_url?: string;
    issue_url?: string;
    review_comments_url?: string;
    review_comment_url?: string;
    statuses_url?: string;
    merged_at?: string;
    head?: CreateResponseHead;
    base?: CreateResponseBase;
    _links?: CreateResponseLinks;
    full_name?: string;
    private?: boolean;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: CreateResponsePermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  };
  type CheckResponseUser = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type CheckResponseApp = {
    url: string;
    name: string;
    client_id: string;
  };
  type CheckResponse = {
    id: number;
    url: string;
    scopes: Array<string>;
    token: string;
    token_last_eight: string;
    hashed_token: string;
    app: CheckResponseApp;
    note: string;
    note_url: string;
    updated_at: string;
    created_at: string;
    fingerprint: string;
    user: CheckResponseUser;
  };
  type RemoveRepoFromInstallationResponse = {};
  type GetMarketplaceListingStubbedPlansResponseItem = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplaceListingStubbedPlanAccountsResponseItemMarketplacePurchasePlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplaceListingStubbedPlanAccountsResponseItemMarketplacePurchase = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: GetMarketplaceListingStubbedPlanAccountsResponseItemMarketplacePurchasePlan;
  };
  type GetMarketplaceListingStubbedPlanAccountsResponseItem = {
    url: string;
    type: string;
    id: number;
    login: string;
    email: null;
    organization_billing_email: string;
    marketplace_purchase: GetMarketplaceListingStubbedPlanAccountsResponseItemMarketplacePurchase;
  };
  type GetMarketplaceListingPlansResponseItem = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplaceListingPlanAccountsResponseItemMarketplacePurchasePlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type GetMarketplaceListingPlanAccountsResponseItemMarketplacePurchase = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: GetMarketplaceListingPlanAccountsResponseItemMarketplacePurchasePlan;
  };
  type GetMarketplaceListingPlanAccountsResponseItem = {
    url: string;
    type: string;
    id: number;
    login: string;
    email: null;
    organization_billing_email: string;
    marketplace_purchase: GetMarketplaceListingPlanAccountsResponseItemMarketplacePurchase;
  };
  type GetInstallationsResponseItemPermissions = {
    metadata: string;
    contents: string;
    issues: string;
    single_file: string;
  };
  type GetInstallationsResponseItemAccount = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetInstallationsResponseItem = {
    id: number;
    account: GetInstallationsResponseItemAccount;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: GetInstallationsResponseItemPermissions;
    events: Array<string>;
    single_file_name: string;
    repository_selection: string;
  };
  type GetInstallationRepositoriesResponseRepositoriesItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetInstallationRepositoriesResponseRepositoriesItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetInstallationRepositoriesResponseRepositoriesItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetInstallationRepositoriesResponse = {
    total_count: number;
    repositories: Array<GetInstallationRepositoriesResponseRepositoriesItem>;
  };
  type GetInstallationResponsePermissions = {
    metadata: string;
    contents: string;
    issues: string;
    single_file: string;
  };
  type GetInstallationResponseAccount = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetInstallationResponse = {
    id: number;
    account: GetInstallationResponseAccount;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: GetInstallationResponsePermissions;
    events: Array<string>;
    single_file_name: string;
    repository_selection: string;
  };
  type GetForSlugResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string;
  };
  type GetForSlugResponse = {
    id: number;
    node_id: string;
    owner: GetForSlugResponseOwner;
    name: string;
    description: string;
    external_url: string;
    html_url: string;
    created_at: string;
    updated_at: string;
  };
  type GetResponseOwner = {
    login: string;
    id: number;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url: string;
    description?: string;
    gravatar_id?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  };
  type GetResponse = {
    id: number | string;
    node_id?: string;
    owner?: GetResponseOwner;
    name?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    url?: string;
    scopes?: Array<string>;
    token?: string;
    token_last_eight?: string;
    hashed_token?: string;
    app?: GetResponseApp;
    note?: string;
    note_url?: string;
    fingerprint?: string;
    head_sha?: string;
    external_id?: string;
    status?: string;
    conclusion?: string;
    started_at?: string;
    completed_at?: string;
    output?: GetResponseOutput;
    check_suite?: GetResponseCheckSuite;
    pull_requests?: Array<GetResponsePullRequestsItem>;
    forks_url?: string;
    commits_url?: string;
    public?: boolean;
    user?: GetResponseUser;
    files?: GetResponseFiles;
    truncated?: boolean;
    comments?: number;
    comments_url?: string;
    git_pull_url?: string;
    git_push_url?: string;
    forks?: Array<GetResponseForksItem>;
    history?: Array<GetResponseHistoryItem>;
    repository_url?: string;
    labels_url?: string;
    events_url?: string;
    number?: number;
    state?: string;
    title?: string;
    body?: string;
    labels?: Array<GetResponseLabelsItem>;
    assignee?: GetResponseAssignee;
    assignees?: Array<GetResponseAssigneesItem>;
    milestone?: GetResponseMilestone;
    locked?: boolean;
    active_lock_reason?: string;
    pull_request?: GetResponsePullRequest;
    closed_at?: null | string;
    closed_by?: GetResponseClosedBy;
    login?: string;
    repos_url?: string;
    hooks_url?: string;
    issues_url?: string;
    members_url?: string;
    public_members_url?: string;
    avatar_url?: string;
    company?: string;
    blog?: string;
    location?: string;
    email?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    public_repos?: number;
    public_gists?: number;
    followers?: number;
    following?: number;
    type?: string;
    total_private_repos?: number;
    owned_private_repos?: number;
    private_gists?: number;
    disk_usage?: number;
    collaborators?: number;
    billing_email?: string;
    plan?: GetResponsePlan;
    default_repository_settings?: string;
    members_can_create_repositories?: boolean;
    two_factor_requirement_enabled?: boolean;
    diff_url?: string;
    patch_url?: string;
    issue_url?: string;
    review_comments_url?: string;
    review_comment_url?: string;
    statuses_url?: string;
    merged_at?: string;
    head?: GetResponseHead;
    base?: GetResponseBase;
    _links?: GetResponseLinks;
    merge_commit_sha?: string;
    merged?: boolean;
    mergeable?: boolean;
    merged_by?: GetResponseMergedBy;
    commits?: number;
    additions?: number;
    deletions?: number;
    changed_files?: number;
    maintainer_can_modify?: boolean;
    full_name?: string;
    private?: boolean;
    fork?: boolean;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    keys_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: null;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    topics?: Array<string>;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    pushed_at?: string;
    permissions?: GetResponsePermissions;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
    license?: GetResponseLicense;
    organization?: GetResponseOrganization;
    parent?: GetResponseParent;
    source?: GetResponseSource;
  };
  type FindUserInstallationResponsePermissions = {
    checks: string;
    metadata: string;
    contents: string;
  };
  type FindUserInstallationResponseAccount = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type FindUserInstallationResponse = {
    id: number;
    account: FindUserInstallationResponseAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: FindUserInstallationResponsePermissions;
    events: Array<string>;
    created_at: string;
    updated_at: string;
    single_file_name: null;
  };
  type FindRepoInstallationResponsePermissions = {
    checks: string;
    metadata: string;
    contents: string;
  };
  type FindRepoInstallationResponseAccount = {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type FindRepoInstallationResponse = {
    id: number;
    account: FindRepoInstallationResponseAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: FindRepoInstallationResponsePermissions;
    events: Array<string>;
    created_at: string;
    updated_at: string;
    single_file_name: null;
  };
  type FindOrgInstallationResponsePermissions = {
    checks: string;
    metadata: string;
    contents: string;
  };
  type FindOrgInstallationResponseAccount = {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type FindOrgInstallationResponse = {
    id: number;
    account: FindOrgInstallationResponseAccount;
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: FindOrgInstallationResponsePermissions;
    events: Array<string>;
    created_at: string;
    updated_at: string;
    single_file_name: null;
  };
  type CreateInstallationTokenResponse = {
    token: string;
    expires_at: string;
  };
  type CheckMarketplaceListingStubbedAccountResponseMarketplacePurchasePlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type CheckMarketplaceListingStubbedAccountResponseMarketplacePurchase = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: CheckMarketplaceListingStubbedAccountResponseMarketplacePurchasePlan;
  };
  type CheckMarketplaceListingStubbedAccountResponse = {
    url: string;
    type: string;
    id: number;
    login: string;
    email: null;
    organization_billing_email: string;
    marketplace_purchase: CheckMarketplaceListingStubbedAccountResponseMarketplacePurchase;
  };
  type CheckMarketplaceListingAccountResponseMarketplacePurchasePlan = {
    url: string;
    accounts_url: string;
    id: number;
    name: string;
    description: string;
    monthly_price_in_cents: number;
    yearly_price_in_cents: number;
    price_model: string;
    has_free_trial: boolean;
    unit_name: null;
    bullets: Array<string>;
  };
  type CheckMarketplaceListingAccountResponseMarketplacePurchase = {
    billing_cycle: string;
    next_billing_date: string;
    unit_count: null;
    on_free_trial: boolean;
    free_trial_ends_on: string;
    updated_at: string;
    plan: CheckMarketplaceListingAccountResponseMarketplacePurchasePlan;
  };
  type CheckMarketplaceListingAccountResponse = {
    url: string;
    type: string;
    id: number;
    login: string;
    email: null;
    organization_billing_email: string;
    marketplace_purchase: CheckMarketplaceListingAccountResponseMarketplacePurchase;
  };
  type AddRepoToInstallationResponse = {};
  type UnwatchRepoResponse = {};
  type UnstarRepoResponse = {};
  type StarRepoResponse = {};
  type SetRepoSubscriptionResponse = {
    subscribed: boolean;
    ignored: boolean;
    reason: null;
    created_at: string;
    url: string;
    repository_url: string;
  };
  type SetNotificationThreadSubscriptionResponse = {
    subscribed: boolean;
    ignored: boolean;
    reason: null;
    created_at: string;
    url: string;
    thread_url: string;
  };
  type MarkNotificationsAsReadForRepoResponse = {};
  type MarkNotificationsAsReadResponse = {};
  type MarkNotificationThreadAsReadResponse = {};
  type GetWatchersForRepoResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetWatchedReposForUserResponseItemLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetWatchedReposForUserResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetWatchedReposForUserResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetWatchedReposForUserResponseItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetWatchedReposForUserResponseItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetWatchedReposForUserResponseItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
    license: GetWatchedReposForUserResponseItemLicense;
  };
  type GetWatchedReposResponseItemLicense = {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  };
  type GetWatchedReposResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetWatchedReposResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetWatchedReposResponseItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetWatchedReposResponseItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetWatchedReposResponseItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
    license: GetWatchedReposResponseItemLicense;
  };
  type GetStarredReposForUserResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetStarredReposForUserResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStarredReposForUserResponseItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetStarredReposForUserResponseItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetStarredReposForUserResponseItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetStarredReposResponseItemPermissions = {
    admin: boolean;
    push: boolean;
    pull: boolean;
  };
  type GetStarredReposResponseItemOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetStarredReposResponseItem = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetStarredReposResponseItemOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
    clone_url: string;
    mirror_url: string;
    hooks_url: string;
    svn_url: string;
    homepage: string;
    language: null;
    forks_count: number;
    stargazers_count: number;
    watchers_count: number;
    size: number;
    default_branch: string;
    open_issues_count: number;
    topics: Array<string>;
    has_issues: boolean;
    has_projects: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    has_downloads: boolean;
    archived: boolean;
    pushed_at: string;
    created_at: string;
    updated_at: string;
    permissions: GetStarredReposResponseItemPermissions;
    allow_rebase_merge: boolean;
    allow_squash_merge: boolean;
    allow_merge_commit: boolean;
    subscribers_count: number;
    network_count: number;
  };
  type GetStargazersForRepoResponseItem = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetNotificationsForUserResponseItemSubject = {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  type GetNotificationsForUserResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetNotificationsForUserResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetNotificationsForUserResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetNotificationsForUserResponseItem = {
    id: string;
    repository: GetNotificationsForUserResponseItemRepository;
    subject: GetNotificationsForUserResponseItemSubject;
    reason: string;
    unread: boolean;
    updated_at: string;
    last_read_at: string;
    url: string;
  };
  type GetNotificationsResponseItemSubject = {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  type GetNotificationsResponseItemRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetNotificationsResponseItemRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetNotificationsResponseItemRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetNotificationsResponseItem = {
    id: string;
    repository: GetNotificationsResponseItemRepository;
    subject: GetNotificationsResponseItemSubject;
    reason: string;
    unread: boolean;
    updated_at: string;
    last_read_at: string;
    url: string;
  };
  type GetNotificationThreadResponseSubject = {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  type GetNotificationThreadResponseRepositoryOwner = {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  type GetNotificationThreadResponseRepository = {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    owner: GetNotificationThreadResponseRepositoryOwner;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    archive_url: string;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    deployments_url: string;
    downloads_url: string;
    events_url: string;
    forks_url: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    languages_url: string;
    merges_url: string;
    milestones_url: string;
    notifications_url: string;
    pulls_url: string;
    releases_url: string;
    ssh_url: string;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    tags_url: string;
    teams_url: string;
    trees_url: string;
  };
  type GetNotificationThreadResponse = {
    id: string;
    repository: GetNotificationThreadResponseRepository;
    subject: GetNotificationThreadResponseSubject;
    reason: string;
    unread: boolean;
    updated_at: string;
    last_read_at: string;
    url: string;
  };
  type GetFeedsResponseLinksCurrentUserOrganizationsItem = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksCurrentUserOrganization = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksCurrentUserActor = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksCurrentUser = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksCurrentUserPublic = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksUser = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinksTimeline = {
    href: string;
    type: string;
  };
  type GetFeedsResponseLinks = {
    timeline: GetFeedsResponseLinksTimeline;
    user: GetFeedsResponseLinksUser;
    current_user_public: GetFeedsResponseLinksCurrentUserPublic;
    current_user: GetFeedsResponseLinksCurrentUser;
    current_user_actor: GetFeedsResponseLinksCurrentUserActor;
    current_user_organization: GetFeedsResponseLinksCurrentUserOrganization;
    current_user_organizations: Array<
      GetFeedsResponseLinksCurrentUserOrganizationsItem
    >;
  };
  type GetFeedsResponse = {
    timeline_url: string;
    user_url: string;
    current_user_public_url: string;
    current_user_url: string;
    current_user_actor_url: string;
    current_user_organization_url: string;
    current_user_organization_urls: Array<string>;
    _links: GetFeedsResponseLinks;
  };
  type DeleteNotificationThreadSubscriptionResponse = {};
  type CheckNotificationThreadSubscriptionResponse = {
    subscribed: boolean;
    ignored: boolean;
    reason: null;
    created_at: string;
    url: string;
    thread_url: string;
  };
  type GetNotificationsResponse = Array<GetNotificationsResponseItem>;
  type GetNotificationsForUserResponse = Array<
    GetNotificationsForUserResponseItem
  >;
  type GetStargazersForRepoResponse = Array<GetStargazersForRepoResponseItem>;
  type GetStarredReposResponse = Array<GetStarredReposResponseItem>;
  type GetStarredReposForUserResponse = Array<
    GetStarredReposForUserResponseItem
  >;
  type GetWatchedReposResponse = Array<GetWatchedReposResponseItem>;
  type GetWatchedReposForUserResponse = Array<
    GetWatchedReposForUserResponseItem
  >;
  type GetWatchersForRepoResponse = Array<GetWatchersForRepoResponseItem>;
  type GetInstallationsResponse =
    | Array<GetInstallationsResponseItem>
    | {
        total_count: number;
        installations: Array<GetInstallationsResponseInstallationsItem>;
      };
  type GetMarketplaceListingPlanAccountsResponse = Array<
    GetMarketplaceListingPlanAccountsResponseItem
  >;
  type GetMarketplaceListingPlansResponse = Array<
    GetMarketplaceListingPlansResponseItem
  >;
  type GetMarketplaceListingStubbedPlanAccountsResponse = Array<
    GetMarketplaceListingStubbedPlanAccountsResponseItem
  >;
  type GetMarketplaceListingStubbedPlansResponse = Array<
    GetMarketplaceListingStubbedPlansResponseItem
  >;
  type GetAllResponse = Array<GetAllResponseItem>;
  type GetGrantsResponse = Array<GetGrantsResponseItem>;
  type ListAnnotationsResponse = Array<ListAnnotationsResponseItem>;
  type GetCommentsResponse = Array<GetCommentsResponseItem>;
  type GetCommitsResponse = Array<GetCommitsResponseItem>;
  type GetForUserResponse =
    | Array<GetForUserResponseItem>
    | {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        name: string;
        company: string;
        blog: string;
        location: string;
        email: string;
        hireable: boolean;
        bio: string;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        created_at: string;
        updated_at: string;
      };
  type GetForksResponse = Array<GetForksResponseItem>;
  type GetPublicResponse = Array<GetPublicResponseItem>;
  type GetStarredResponse = Array<GetStarredResponseItem>;
  type AddLabelsResponse = Array<AddLabelsResponseItem>;
  type GetAssigneesResponse = Array<GetAssigneesResponseItem>;
  type GetCommentsForRepoResponse = Array<GetCommentsForRepoResponseItem>;
  type GetEventsResponse = Array<GetEventsResponseItem>;
  type GetEventsForRepoResponse = Array<GetEventsForRepoResponseItem>;
  type GetEventsTimelineResponse = Array<GetEventsTimelineResponseItem>;
  type GetForOrgResponse = Array<GetForOrgResponseItem>;
  type GetForRepoResponse = Array<GetForRepoResponseItem>;
  type GetIssueLabelsResponse = Array<GetIssueLabelsResponseItem>;
  type GetLabelsResponse = Array<GetLabelsResponseItem>;
  type GetMilestoneLabelsResponse = Array<GetMilestoneLabelsResponseItem>;
  type GetMilestonesResponse = Array<GetMilestonesResponseItem>;
  type ReplaceAllLabelsResponse = Array<ReplaceAllLabelsResponseItem>;
  type GetImportCommitAuthorsResponse = Array<
    GetImportCommitAuthorsResponseItem
  >;
  type GetLargeImportFilesResponse = Array<GetLargeImportFilesResponseItem>;
  type GetMigrationsResponse = Array<GetMigrationsResponseItem>;
  type ListForAuthenticatedUserResponse = Array<
    ListForAuthenticatedUserResponseItem
  >;
  type GetCodesOfConductResponse = Array<GetCodesOfConductResponseItem>;
  type GetGitignoreTemplatesResponse = Array<string>;
  type GetLicensesResponse = Array<GetLicensesResponseItem>;
  type GetBlockedUsersResponse = Array<GetBlockedUsersResponseItem>;
  type GetHooksResponse = Array<GetHooksResponseItem>;
  type GetInvitationTeamsResponse = Array<GetInvitationTeamsResponseItem>;
  type GetMembersResponse = Array<GetMembersResponseItem>;
  type GetOutsideCollaboratorsResponse = Array<
    GetOutsideCollaboratorsResponseItem
  >;
  type GetPendingOrgInvitesResponse = Array<GetPendingOrgInvitesResponseItem>;
  type GetPendingTeamInvitesResponse = Array<GetPendingTeamInvitesResponseItem>;
  type GetPublicMembersResponse = Array<GetPublicMembersResponseItem>;
  type GetTeamMembersResponse = Array<GetTeamMembersResponseItem>;
  type GetTeamReposResponse = Array<GetTeamReposResponseItem>;
  type GetTeamsResponse = Array<GetTeamsResponseItem>;
  type GetCollaboratorsResponse = Array<GetCollaboratorsResponseItem>;
  type GetOrgProjectsResponse = Array<GetOrgProjectsResponseItem>;
  type GetProjectCardsResponse = Array<GetProjectCardsResponseItem>;
  type GetProjectColumnsResponse = Array<GetProjectColumnsResponseItem>;
  type GetRepoProjectsResponse = Array<GetRepoProjectsResponseItem>;
  type GetFilesResponse = Array<GetFilesResponseItem>;
  type GetReviewCommentsResponse = Array<GetReviewCommentsResponseItem>;
  type GetReviewsResponse = Array<GetReviewsResponseItem>;
  type GetForCommitCommentResponse = Array<GetForCommitCommentResponseItem>;
  type GetForIssueResponse = Array<GetForIssueResponseItem>;
  type GetForIssueCommentResponse = Array<GetForIssueCommentResponseItem>;
  type GetForPullRequestReviewCommentResponse = Array<
    GetForPullRequestReviewCommentResponseItem
  >;
  type GetForTeamDiscussionResponse = Array<GetForTeamDiscussionResponseItem>;
  type GetForTeamDiscussionCommentResponse = Array<
    GetForTeamDiscussionCommentResponseItem
  >;
  type AddProtectedBranchRequiredStatusChecksContextsResponse = Array<string>;
  type AddProtectedBranchTeamRestrictionsResponse = Array<
    AddProtectedBranchTeamRestrictionsResponseItem
  >;
  type AddProtectedBranchUserRestrictionsResponse = Array<
    AddProtectedBranchUserRestrictionsResponseItem
  >;
  type CompareCommitsResponse = any;
  type GetAllCommitCommentsResponse = Array<GetAllCommitCommentsResponseItem>;
  type GetAssetsResponse = Array<GetAssetsResponseItem>;
  type GetBranchesResponse = Array<GetBranchesResponseItem>;
  type GetCommitCommentsResponse = Array<GetCommitCommentsResponseItem>;
  type GetDeployKeysResponse = Array<GetDeployKeysResponseItem>;
  type GetDeploymentStatusesResponse = Array<GetDeploymentStatusesResponseItem>;
  type GetDeploymentsResponse = Array<GetDeploymentsResponseItem>;
  type GetDownloadsResponse = Array<GetDownloadsResponseItem>;
  type GetInvitesResponse = Array<GetInvitesResponseItem>;
  type GetPathsResponse = Array<GetPathsResponseItem>;
  type GetProtectedBranchTeamRestrictionsResponse = any;
  type GetReferrersResponse = Array<GetReferrersResponseItem>;
  type GetReleasesResponse = Array<GetReleasesResponseItem>;
  type GetStatsCodeFrequencyResponse = Array<Array<number>>;
  type GetStatsCommitActivityResponse = Array<
    GetStatsCommitActivityResponseItem
  >;
  type GetStatsContributorsResponse = Array<GetStatsContributorsResponseItem>;
  type GetStatsPunchCardResponse = Array<Array<number>>;
  type GetStatusesResponse = Array<GetStatusesResponseItem>;
  type GetTagsResponse = Array<GetTagsResponseItem>;
  type RemoveProtectedBranchRequiredStatusChecksContextsResponse = Array<
    string
  >;
  type RemoveProtectedBranchTeamRestrictionsResponse = Array<
    RemoveProtectedBranchTeamRestrictionsResponseItem
  >;
  type RemoveProtectedBranchUserRestrictionsResponse = Array<
    RemoveProtectedBranchUserRestrictionsResponseItem
  >;
  type ReplaceProtectedBranchRequiredStatusChecksContextsResponse = Array<
    string
  >;
  type ReplaceProtectedBranchTeamRestrictionsResponse = Array<
    ReplaceProtectedBranchTeamRestrictionsResponseItem
  >;
  type ReplaceProtectedBranchUserRestrictionsResponse = Array<
    ReplaceProtectedBranchUserRestrictionsResponseItem
  >;
  type AddEmailsResponse = Array<AddEmailsResponseItem>;
  type GetContextForUserResponse = any;
  type GetEmailsResponse = Array<GetEmailsResponseItem>;
  type GetFollowersResponse = Array<GetFollowersResponseItem>;
  type GetFollowersForUserResponse = Array<GetFollowersForUserResponseItem>;
  type GetFollowingResponse = Array<GetFollowingResponseItem>;
  type GetFollowingForUserResponse = Array<GetFollowingForUserResponseItem>;
  type GetGpgKeysResponse = Array<GetGpgKeysResponseItem>;
  type GetGpgKeysForUserResponse = Array<GetGpgKeysForUserResponseItem>;
  type GetKeysResponse = Array<GetKeysResponseItem>;
  type GetKeysForUserResponse = Array<GetKeysForUserResponseItem>;
  type GetMarketplacePurchasesResponse = Array<
    GetMarketplacePurchasesResponseItem
  >;
  type GetMarketplaceStubbedPurchasesResponse = Array<
    GetMarketplaceStubbedPurchasesResponseItem
  >;
  type GetOrgMembershipsResponse = Array<GetOrgMembershipsResponseItem>;
  type GetOrgsResponse = Array<GetOrgsResponseItem>;
  type GetPublicEmailsResponse = Array<GetPublicEmailsResponseItem>;
  type GetRepoInvitesResponse = Array<GetRepoInvitesResponseItem>;
  type TogglePrimaryEmailVisibilityResponse = Array<
    TogglePrimaryEmailVisibilityResponseItem
  >;

  export type ActivityCheckNotificationThreadSubscriptionParams = {
    thread_id: string;
  };
  export type ActivityCheckStarringRepoParams = {
    owner: string;
    repo: string;
  };
  export type ActivityDeleteNotificationThreadSubscriptionParams = {
    thread_id: string;
  };
  export type ActivityGetEventsParams = {
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForOrgParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForRepoParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForRepoNetworkParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForUserOrgParams = {
    username: string;
    org: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsForUserPublicParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsReceivedParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetEventsReceivedPublicParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetNotificationThreadParams = {
    thread_id: string;
  };
  export type ActivityGetNotificationsParams = {
    all?: boolean;
    participating?: boolean;
    since?: string;
    before?: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetNotificationsForUserParams = {
    owner: string;
    repo: string;
    all?: boolean;
    participating?: boolean;
    since?: string;
    before?: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetRepoSubscriptionParams = {
    owner: string;
    repo: string;
  };
  export type ActivityGetStargazersForRepoParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetStarredReposParams = {
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type ActivityGetStarredReposForUserParams = {
    username: string;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type ActivityGetWatchedReposParams = {
    per_page?: number;
    page?: number;
  };
  export type ActivityGetWatchedReposForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityGetWatchersForRepoParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ActivityMarkNotificationThreadAsReadParams = {
    thread_id: string;
  };
  export type ActivityMarkNotificationsAsReadParams = {
    last_read_at?: string;
  };
  export type ActivityMarkNotificationsAsReadForRepoParams = {
    owner: string;
    repo: string;
    last_read_at?: string;
  };
  export type ActivitySetNotificationThreadSubscriptionParams = {
    thread_id: string;
    ignored?: boolean;
  };
  export type ActivitySetRepoSubscriptionParams = {
    owner: string;
    repo: string;
    subscribed?: boolean;
    ignored?: boolean;
  };
  export type ActivityStarRepoParams = {
    owner: string;
    repo: string;
  };
  export type ActivityUnstarRepoParams = {
    owner: string;
    repo: string;
  };
  export type ActivityUnwatchRepoParams = {
    owner: string;
    repo: string;
  };
  export type AppsAddRepoToInstallationParams = {
    installation_id: string;
    repository_id: string;
  };
  export type AppsCheckMarketplaceListingAccountParams = {
    account_id: string;
    per_page?: number;
    page?: number;
  };
  export type AppsCheckMarketplaceListingStubbedAccountParams = {
    account_id: string;
    per_page?: number;
    page?: number;
  };
  export type AppsCreateInstallationTokenParams = {
    installation_id: string;
  };
  export type AppsFindOrgInstallationParams = {
    org: string;
  };
  export type AppsFindRepoInstallationParams = {
    owner: string;
    repo: string;
  };
  export type AppsFindUserInstallationParams = {
    username: string;
  };
  export type AppsGetForSlugParams = {
    app_slug: string;
  };
  export type AppsGetInstallationParams = {
    installation_id: string;
  };
  export type AppsGetInstallationRepositoriesParams = {
    per_page?: number;
    page?: number;
  };
  export type AppsGetInstallationsParams = {
    per_page?: number;
    page?: number;
  };
  export type AppsGetMarketplaceListingPlanAccountsParams = {
    plan_id: string;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type AppsGetMarketplaceListingPlansParams = {
    per_page?: number;
    page?: number;
  };
  export type AppsGetMarketplaceListingStubbedPlanAccountsParams = {
    plan_id: string;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type AppsGetMarketplaceListingStubbedPlansParams = {
    per_page?: number;
    page?: number;
  };
  export type AppsRemoveRepoFromInstallationParams = {
    installation_id: string;
    repository_id: string;
  };
  export type AuthorizationCheckParams = {
    client_id: string;
    access_token: string;
  };
  export type AuthorizationCreateParams = {
    scopes?: string[];
    note: string;
    note_url?: string;
    client_id?: string;
    client_secret?: string;
    fingerprint?: string;
  };
  export type AuthorizationDeleteParams = {
    authorization_id: string;
  };
  export type AuthorizationDeleteGrantParams = {
    grant_id: string;
  };
  export type AuthorizationGetParams = {
    authorization_id: string;
  };
  export type AuthorizationGetAllParams = {
    per_page?: number;
    page?: number;
  };
  export type AuthorizationGetGrantParams = {
    grant_id: string;
  };
  export type AuthorizationGetGrantsParams = {
    per_page?: number;
    page?: number;
  };
  export type AuthorizationGetOrCreateAuthorizationForAppParams = {
    client_id: string;
    client_secret: string;
    scopes?: string[];
    note?: string;
    note_url?: string;
    fingerprint?: string;
  };
  export type AuthorizationGetOrCreateAuthorizationForAppAndFingerprintParams = {
    client_id: string;
    fingerprint: string;
    client_secret: string;
    scopes?: string[];
    note?: string;
    note_url?: string;
  };
  export type AuthorizationResetParams = {
    client_id: string;
    access_token: string;
  };
  export type AuthorizationRevokeParams = {
    client_id: string;
    access_token: string;
  };
  export type AuthorizationRevokeGrantParams = {
    client_id: string;
    access_token: string;
  };
  export type AuthorizationUpdateParams = {
    authorization_id: string;
    scopes?: string[];
    add_scopes?: string[];
    remove_scopes?: string[];
    note?: string;
    note_url?: string;
    fingerprint?: string;
  };
  export type ChecksCreateParams = {
    owner: string;
    repo: string;
    name: string;
    head_sha: string;
    details_url?: string;
    external_id?: string;
    status?: "queued" | "in_progress" | "completed";
    started_at?: string;
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "details_url"
      | "conclusion"
      | "status"
      | "completed";
    completed_at?: string;
    output?: ChecksCreateParamsOutput;
    actions?: ChecksCreateParamsActions[];
  };
  export type ChecksCreateSuiteParams = {
    owner: string;
    repo: string;
    head_sha: string;
  };
  export type ChecksGetParams = {
    owner: string;
    repo: string;
    check_run_id: string;
  };
  export type ChecksGetSuiteParams = {
    owner: string;
    repo: string;
    check_suite_id: string;
  };
  export type ChecksListAnnotationsParams = {
    owner: string;
    repo: string;
    check_run_id: string;
    per_page?: number;
    page?: number;
  };
  export type ChecksListForRefParams = {
    owner: string;
    repo: string;
    ref: string;
    check_name?: string;
    status?: "queued" | "in_progress" | "completed";
    filter?: "latest" | "all";
    per_page?: number;
    page?: number;
  };
  export type ChecksListForSuiteParams = {
    owner: string;
    repo: string;
    check_suite_id: string;
    check_name?: string;
    status?: "queued" | "in_progress" | "completed";
    filter?: "latest" | "all";
    per_page?: number;
    page?: number;
  };
  export type ChecksListSuitesForRefParams = {
    owner: string;
    repo: string;
    ref: string;
    app_id?: number;
    check_name?: string;
    per_page?: number;
    page?: number;
  };
  export type ChecksRequestSuitesParams = {
    owner: string;
    repo: string;
    head_sha?: string;
  };
  export type ChecksSetSuitesPreferencesParams = {
    owner: string;
    repo: string;
    auto_trigger_checks?: ChecksSetSuitesPreferencesParamsAutoTriggerChecks[];
  };
  export type ChecksUpdateParams = {
    owner: string;
    repo: string;
    check_run_id: string;
    name: string;
    details_url?: string;
    external_id?: string;
    started_at?: string;
    status?: "queued" | "in_progress" | "completed";
    conclusion?:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "conclusion"
      | "status"
      | "completed";
    completed_at?: string;
    output?: ChecksUpdateParamsOutput;
    actions?: ChecksUpdateParamsActions[];
  };
  export type GistsCheckStarParams = {
    gist_id: string;
  };
  export type GistsCreateParams = {
    files: GistsCreateParamsFiles;
    description?: string;
    public?: boolean;
  };
  export type GistsCreateCommentParams = {
    gist_id: string;
    body: string;
  };
  export type GistsDeleteParams = {
    gist_id: string;
  };
  export type GistsDeleteCommentParams = {
    gist_id: string;
    comment_id: string;
  };
  export type GistsEditParams = {
    gist_id: string;
    description?: string;
    files?: GistsEditParamsFiles;
    content?: string;
    filename?: string;
  };
  export type GistsEditCommentParams = {
    gist_id: string;
    comment_id: string;
    body: string;
  };
  export type GistsForkParams = {
    gist_id: string;
  };
  export type GistsGetParams = {
    gist_id: string;
  };
  export type GistsGetAllParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetCommentParams = {
    gist_id: string;
    comment_id: string;
  };
  export type GistsGetCommentsParams = {
    gist_id: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetCommitsParams = {
    gist_id: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetForUserParams = {
    username: string;
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetForksParams = {
    gist_id: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetPublicParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type GistsGetRevisionParams = {
    gist_id: string;
    sha: string;
  };
  export type GistsGetStarredParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type GistsStarParams = {
    gist_id: string;
  };
  export type GistsUnstarParams = {
    gist_id: string;
  };
  export type GitdataCreateBlobParams = {
    owner: string;
    repo: string;
    content: string;
    encoding?: string;
  };
  export type GitdataCreateCommitParams = {
    owner: string;
    repo: string;
    message: string;
    tree: string;
    parents: string[];
    committer?: GitdataCreateCommitParamsCommitter;
    author?: GitdataCreateCommitParamsAuthor;
  };
  export type GitdataCreateReferenceParams = {
    owner: string;
    repo: string;
    ref: string;
    sha: string;
  };
  export type GitdataCreateTagParams = {
    owner: string;
    repo: string;
    tag: string;
    message: string;
    object: string;
    type: "commit" | "tree" | "blob";
    tagger?: GitdataCreateTagParamsTagger;
  };
  export type GitdataCreateTreeParams = {
    owner: string;
    repo: string;
    tree: GitdataCreateTreeParamsTree[];
    base_tree?: string;
  };
  export type GitdataDeleteReferenceParams = {
    owner: string;
    repo: string;
    ref: string;
  };
  export type GitdataGetBlobParams = {
    owner: string;
    repo: string;
    file_sha: string;
  };
  export type GitdataGetCommitParams = {
    owner: string;
    repo: string;
    commit_sha: string;
  };
  export type GitdataGetCommitSignatureVerificationParams = {
    owner: string;
    repo: string;
    commit_sha: string;
  };
  export type GitdataGetReferenceParams = {
    owner: string;
    repo: string;
    ref: string;
  };
  export type GitdataGetTagParams = {
    owner: string;
    repo: string;
    tag_sha: string;
  };
  export type GitdataGetTagSignatureVerificationParams = {
    owner: string;
    repo: string;
    tag_sha: string;
  };
  export type GitdataGetTreeParams = {
    owner: string;
    repo: string;
    tree_sha: string;
    recursive?: 1;
  };
  export type GitdataUpdateReferenceParams = {
    owner: string;
    repo: string;
    ref: string;
    sha: string;
    force?: boolean;
  };
  export type IssuesAddAssigneesToIssueParams = {
    owner: string;
    repo: string;
    number: number;
    assignees?: string[];
  };
  export type IssuesAddLabelsParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesCheckAssigneeParams = {
    owner: string;
    repo: string;
    assignee: string;
  };
  export type IssuesCreateParams = {
    owner: string;
    repo: string;
    title: string;
    body?: string;
    assignee?: string;
    milestone?: number;
    labels?: string[];
    assignees?: string[];
  };
  export type IssuesCreateCommentParams = {
    owner: string;
    repo: string;
    number: number;
    body: string;
  };
  export type IssuesCreateLabelParams = {
    owner: string;
    repo: string;
    name: string;
    color: string;
    description?: string;
  };
  export type IssuesCreateMilestoneParams = {
    owner: string;
    repo: string;
    title: string;
    state?: "open" | "closed";
    description?: string;
    due_on?: string;
  };
  export type IssuesDeleteCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
  };
  export type IssuesDeleteLabelParams = {
    owner: string;
    repo: string;
    name: string;
  };
  export type IssuesDeleteMilestoneParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesEditParams = {
    owner: string;
    repo: string;
    number: number;
    title?: string;
    body?: string;
    assignee?: string;
    state?: "open" | "closed";
    milestone?: number;
    labels?: string[];
    assignees?: string[];
  };
  export type IssuesEditCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    body: string;
  };
  export type IssuesGetParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesGetAllParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
    state?: "open" | "closed" | "all";
    labels?: string;
    sort?: "created" | "updated" | "comments";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetAssigneesParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetCommentsParams = {
    owner: string;
    repo: string;
    number: number;
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetCommentsForRepoParams = {
    owner: string;
    repo: string;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    since?: string;
  };
  export type IssuesGetEventParams = {
    owner: string;
    repo: string;
    event_id: string;
  };
  export type IssuesGetEventsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetEventsForRepoParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetEventsTimelineParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetForOrgParams = {
    org: string;
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
    state?: "open" | "closed" | "all";
    labels?: string;
    sort?: "created" | "updated" | "comments";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetForRepoParams = {
    owner: string;
    repo: string;
    milestone?: string;
    state?: "open" | "closed" | "all";
    assignee?: string;
    creator?: string;
    mentioned?: string;
    labels?: string;
    sort?: "created" | "updated" | "comments";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetForUserParams = {
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all";
    state?: "open" | "closed" | "all";
    labels?: string;
    sort?: "created" | "updated" | "comments";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetIssueLabelsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetLabelParams = {
    owner: string;
    repo: string;
    name: string;
  };
  export type IssuesGetLabelsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetMilestoneParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesGetMilestoneLabelsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type IssuesGetMilestonesParams = {
    owner: string;
    repo: string;
    state?: "open" | "closed" | "all";
    sort?: "due_on" | "completeness";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type IssuesLockParams = {
    owner: string;
    repo: string;
    number: number;
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  };
  export type IssuesRemoveAllLabelsParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesRemoveAssigneesFromIssueParams = {
    owner: string;
    repo: string;
    number: number;
    assignees?: string[];
  };
  export type IssuesRemoveLabelParams = {
    owner: string;
    repo: string;
    number: number;
    name: string;
  };
  export type IssuesReplaceAllLabelsParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesUnlockParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type IssuesUpdateLabelParams = {
    owner: string;
    repo: string;
    current_name: string;
    name?: string;
    color?: string;
    description?: string;
  };
  export type IssuesUpdateMilestoneParams = {
    owner: string;
    repo: string;
    number: number;
    title?: string;
    state?: "open" | "closed";
    description?: string;
    due_on?: string;
  };
  export type MigrationsCancelImportParams = {
    owner: string;
    repo: string;
  };
  export type MigrationsDeleteArchiveForAuthenticatedUserParams = {
    migration_id: string;
  };
  export type MigrationsDeleteMigrationArchiveParams = {
    org: string;
    migration_id: string;
  };
  export type MigrationsGetArchiveForAuthenticatedUserParams = {
    migration_id: string;
  };
  export type MigrationsGetImportCommitAuthorsParams = {
    owner: string;
    repo: string;
    since?: string;
  };
  export type MigrationsGetImportProgressParams = {
    owner: string;
    repo: string;
  };
  export type MigrationsGetLargeImportFilesParams = {
    owner: string;
    repo: string;
  };
  export type MigrationsGetMigrationArchiveLinkParams = {
    org: string;
    migration_id: string;
  };
  export type MigrationsGetMigrationStatusParams = {
    org: string;
    migration_id: string;
  };
  export type MigrationsGetMigrationsParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type MigrationsGetStatusForAuthenticatedUserParams = {
    migration_id: string;
  };
  export type MigrationsListForAuthenticatedUserParams = {
    per_page?: number;
    page?: number;
  };
  export type MigrationsMapImportCommitAuthorParams = {
    owner: string;
    repo: string;
    author_id: string;
    email?: string;
    name?: string;
  };
  export type MigrationsSetImportLfsPreferenceParams = {
    owner: string;
    repo: string;
    use_lfs: "opt_in" | "opt_out";
  };
  export type MigrationsStartForAuthenticatedUserParams = {
    repositories: string[];
    lock_repositories?: boolean;
    exclude_attachments?: boolean;
  };
  export type MigrationsStartImportParams = {
    owner: string;
    repo: string;
    vcs_url: string;
    vcs?: "subversion" | "git" | "mercurial" | "tfvc";
    vcs_username?: string;
    vcs_password?: string;
    tfvc_project?: string;
  };
  export type MigrationsStartMigrationParams = {
    org: string;
    repositories: string[];
    lock_repositories?: boolean;
    exclude_attachments?: boolean;
  };
  export type MigrationsUnlockRepoForAuthenticatedUserParams = {
    migration_id: string;
    repo_name: string;
  };
  export type MigrationsUnlockRepoLockedForMigrationParams = {
    org: string;
    migration_id: string;
    repo_name: string;
  };
  export type MigrationsUpdateImportParams = {
    owner: string;
    repo: string;
    vcs_username?: string;
    vcs_password?: string;
  };
  export type MiscGetCodeOfConductParams = {
    key: string;
  };
  export type MiscGetGitignoreTemplateParams = {
    name: string;
  };
  export type MiscGetLicenseParams = {
    license: string;
  };
  export type MiscGetRepoCodeOfConductParams = {
    owner: string;
    repo: string;
  };
  export type MiscGetRepoLicenseParams = {
    owner: string;
    repo: string;
  };
  export type MiscRenderMarkdownParams = {
    text: string;
    mode?: "markdown" | "gfm";
    context?: string;
  };
  export type OrgsAddOrgMembershipParams = {
    org: string;
    username: string;
    role?: "admin" | "member";
  };
  export type OrgsAddTeamMembershipParams = {
    team_id: string;
    username: string;
    role?: "member" | "maintainer";
  };
  export type OrgsAddTeamRepoParams = {
    team_id: string;
    owner: string;
    repo: string;
    permission?: "pull" | "push" | "admin";
  };
  export type OrgsBlockUserParams = {
    org: string;
    username: string;
  };
  export type OrgsCheckBlockedUserParams = {
    org: string;
    username: string;
  };
  export type OrgsCheckMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsCheckPublicMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsCheckTeamRepoParams = {
    team_id: string;
    owner: string;
    repo: string;
  };
  export type OrgsConcealMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsConvertMemberToOutsideCollaboratorParams = {
    org: string;
    username: string;
  };
  export type OrgsCreateHookParams = {
    org: string;
    name: string;
    config: OrgsCreateHookParamsConfig;
    events?: string[];
    active?: boolean;
  };
  export type OrgsCreateInvitationParams = {
    org: string;
    invitee_id?: number;
    email?: string;
    role?: "admin" | "direct_member" | "billing_manager";
    team_ids?: number[];
  };
  export type OrgsCreateTeamParams = {
    org: string;
    name: string;
    description?: string;
    maintainers?: string[];
    repo_names?: string[];
    privacy?: "secret" | "closed";
    permission?: "pull" | "push" | "admin";
    parent_team_id?: number;
  };
  export type OrgsDeleteHookParams = {
    org: string;
    hook_id: string;
  };
  export type OrgsDeleteTeamParams = {
    team_id: string;
  };
  export type OrgsDeleteTeamRepoParams = {
    team_id: string;
    owner: string;
    repo: string;
  };
  export type OrgsEditHookParams = {
    org: string;
    hook_id: string;
    config?: OrgsEditHookParamsConfig;
    events?: string[];
    active?: boolean;
  };
  export type OrgsEditTeamParams = {
    team_id: string;
    name: string;
    description?: string;
    privacy?: string;
    permission?: "pull" | "push" | "admin";
    parent_team_id?: number;
  };
  export type OrgsGetParams = {
    org: string;
  };
  export type OrgsGetAllParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetBlockedUsersParams = {
    org: string;
  };
  export type OrgsGetChildTeamsParams = {
    team_id: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetHookParams = {
    org: string;
    hook_id: string;
  };
  export type OrgsGetHooksParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetInvitationTeamsParams = {
    org: string;
    invitation_id: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetMembersParams = {
    org: string;
    filter?: "2fa_disabled" | "all";
    role?: "all" | "admin" | "member";
    per_page?: number;
    page?: number;
  };
  export type OrgsGetOrgMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsGetOutsideCollaboratorsParams = {
    org: string;
    filter?: "2fa_disabled" | "all";
    per_page?: number;
    page?: number;
  };
  export type OrgsGetPendingOrgInvitesParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetPendingTeamInvitesParams = {
    team_id: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetPublicMembersParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetTeamParams = {
    team_id: string;
  };
  export type OrgsGetTeamMembersParams = {
    team_id: string;
    role?: "member" | "maintainer" | "all";
    per_page?: number;
    page?: number;
  };
  export type OrgsGetTeamMembershipParams = {
    team_id: string;
    username: string;
  };
  export type OrgsGetTeamReposParams = {
    team_id: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsGetTeamsParams = {
    org: string;
    per_page?: number;
    page?: number;
  };
  export type OrgsPingHookParams = {
    org: string;
    hook_id: string;
  };
  export type OrgsPublicizeMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsRemoveMemberParams = {
    org: string;
    username: string;
  };
  export type OrgsRemoveOrgMembershipParams = {
    org: string;
    username: string;
  };
  export type OrgsRemoveOutsideCollaboratorParams = {
    org: string;
    username: string;
  };
  export type OrgsRemoveTeamMembershipParams = {
    team_id: string;
    username: string;
  };
  export type OrgsUnblockUserParams = {
    org: string;
    username: string;
  };
  export type OrgsUpdateParams = {
    org: string;
    billing_email?: string;
    company?: string;
    email?: string;
    location?: string;
    name?: string;
    description?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    default_repository_permission?: "read" | "write" | "admin" | "none";
    members_can_create_repositories?: boolean;
  };
  export type ProjectsAddCollaboratorParams = {
    project_id: string;
    username: string;
    permission?: "read" | "write" | "admin";
  };
  export type ProjectsCreateOrgProjectParams = {
    org: string;
    name: string;
    body?: string;
    per_page?: number;
    page?: number;
  };
  export type ProjectsCreateProjectCardParams = {
    column_id: string;
    note?: string;
    content_id?: number;
    content_type?: string;
  };
  export type ProjectsCreateProjectColumnParams = {
    project_id: string;
    name: string;
  };
  export type ProjectsCreateRepoProjectParams = {
    owner: string;
    repo: string;
    name: string;
    body?: string;
    per_page?: number;
    page?: number;
  };
  export type ProjectsDeleteProjectParams = {
    project_id: string;
  };
  export type ProjectsDeleteProjectCardParams = {
    card_id: string;
  };
  export type ProjectsDeleteProjectColumnParams = {
    column_id: string;
  };
  export type ProjectsGetCollaboratorsParams = {
    project_id: string;
    affiliation?: "outside" | "direct" | "all";
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetOrgProjectsParams = {
    org: string;
    state?: "open" | "closed" | "all";
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetProjectParams = {
    project_id: string;
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetProjectCardParams = {
    card_id: string;
  };
  export type ProjectsGetProjectCardsParams = {
    column_id: string;
    archived_state?: string;
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetProjectColumnParams = {
    column_id: string;
  };
  export type ProjectsGetProjectColumnsParams = {
    project_id: string;
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetRepoProjectsParams = {
    owner: string;
    repo: string;
    state?: "open" | "closed" | "all";
    per_page?: number;
    page?: number;
  };
  export type ProjectsGetUserPermissionLevelParams = {
    project_id: string;
    username: string;
  };
  export type ProjectsMoveProjectCardParams = {
    card_id: string;
    position: "top" | "bottom" | "after:<card_id>";
    column_id?: number;
  };
  export type ProjectsMoveProjectColumnParams = {
    column_id: string;
    position: "first" | "last" | "after:<column_id>";
  };
  export type ProjectsRemoveCollaboratorParams = {
    project_id: string;
    username: string;
  };
  export type ProjectsUpdateProjectParams = {
    project_id: string;
    name?: string;
    body?: string;
    state?: "open" | "closed";
    organization_permission?: string;
    public?: boolean;
    per_page?: number;
    page?: number;
  };
  export type ProjectsUpdateProjectCardParams = {
    card_id: string;
    note?: string;
    archived?: boolean;
  };
  export type ProjectsUpdateProjectColumnParams = {
    column_id: string;
    name: string;
  };
  export type PullRequestsCheckMergedParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type PullRequestsCreateParams = {
    owner: string;
    repo: string;
    title: string;
    head: string;
    base: string;
    body?: string;
    maintainer_can_modify?: boolean;
  };
  export type PullRequestsCreateCommentParams = {
    owner: string;
    repo: string;
    number: number;
    body: string;
    commit_id: string;
    path: string;
    position: number;
  };
  export type PullRequestsCreateCommentReplyParams = {
    owner: string;
    repo: string;
    number: number;
    body: string;
    in_reply_to: number;
  };
  export type PullRequestsCreateFromIssueParams = {
    owner: string;
    repo: string;
    title: string;
    head: string;
    base: string;
    body?: string;
    maintainer_can_modify?: boolean;
  };
  export type PullRequestsCreateReviewParams = {
    owner: string;
    repo: string;
    number: number;
    commit_id?: string;
    body?: string;
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
    comments?: PullRequestsCreateReviewParamsComments[];
  };
  export type PullRequestsCreateReviewRequestParams = {
    owner: string;
    repo: string;
    number: number;
    reviewers?: string[];
    team_reviewers?: string[];
  };
  export type PullRequestsDeleteCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
  };
  export type PullRequestsDeletePendingReviewParams = {
    owner: string;
    repo: string;
    number: number;
    review_id: string;
  };
  export type PullRequestsDeleteReviewRequestParams = {
    owner: string;
    repo: string;
    number: number;
    reviewers?: string[];
    team_reviewers?: string[];
  };
  export type PullRequestsDismissReviewParams = {
    owner: string;
    repo: string;
    number: number;
    review_id: string;
    message?: string;
  };
  export type PullRequestsEditCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    body: string;
  };
  export type PullRequestsGetParams = {
    owner: string;
    repo: string;
    number: number;
  };
  export type PullRequestsGetAllParams = {
    owner: string;
    repo: string;
    state?: "open" | "closed" | "all";
    head?: string;
    base?: string;
    sort?: "created" | "updated" | "popularity" | "long-running";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
  };
  export type PullRequestsGetCommentsParams = {
    owner: string;
    repo: string;
    number: number;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetCommentsForRepoParams = {
    owner: string;
    repo: string;
    sort?: "created" | "updated";
    direction?: "asc" | "desc";
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetCommitsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetFilesParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetReviewParams = {
    owner: string;
    repo: string;
    number: number;
    review_id: string;
  };
  export type PullRequestsGetReviewCommentsParams = {
    owner: string;
    repo: string;
    number: number;
    review_id: string;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetReviewRequestsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsGetReviewsParams = {
    owner: string;
    repo: string;
    number: number;
    per_page?: number;
    page?: number;
  };
  export type PullRequestsMergeParams = {
    owner: string;
    repo: string;
    number: number;
    commit_title?: string;
    commit_message?: string;
    sha?: string;
    merge_method?: "merge" | "squash" | "rebase";
  };
  export type PullRequestsSubmitReviewParams = {
    owner: string;
    repo: string;
    number: number;
    review_id: string;
    body?: string;
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
  };
  export type PullRequestsUpdateParams = {
    owner: string;
    repo: string;
    number: number;
    title?: string;
    body?: string;
    state?: "open" | "closed";
    base?: string;
    maintainer_can_modify?: boolean;
  };
  export type ReactionsCreateForCommitCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsCreateForIssueParams = {
    owner: string;
    repo: string;
    number: number;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsCreateForIssueCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsCreateForPullRequestReviewCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsCreateForTeamDiscussionParams = {
    team_id: string;
    discussion_number: number;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsCreateForTeamDiscussionCommentParams = {
    team_id: string;
    discussion_number: number;
    comment_number: number;
    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
  };
  export type ReactionsDeleteParams = {
    reaction_id: string;
  };
  export type ReactionsGetForCommitCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReactionsGetForIssueParams = {
    owner: string;
    repo: string;
    number: number;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReactionsGetForIssueCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReactionsGetForPullRequestReviewCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReactionsGetForTeamDiscussionParams = {
    team_id: string;
    discussion_number: number;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReactionsGetForTeamDiscussionCommentParams = {
    team_id: string;
    discussion_number: number;
    comment_number: number;
    content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray";
    per_page?: number;
    page?: number;
  };
  export type ReposAddCollaboratorParams = {
    owner: string;
    repo: string;
    username: string;
    permission?: "pull" | "push" | "admin";
  };
  export type ReposAddDeployKeyParams = {
    owner: string;
    repo: string;
    title?: string;
    key: string;
    read_only?: boolean;
  };
  export type ReposAddProtectedBranchAdminEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposAddProtectedBranchRequiredSignaturesParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposAddProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposAddProtectedBranchTeamRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposAddProtectedBranchUserRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposCheckCollaboratorParams = {
    owner: string;
    repo: string;
    username: string;
  };
  export type ReposCompareCommitsParams = {
    owner: string;
    repo: string;
    base: string;
    head: string;
  };
  export type ReposCreateParams = {
    name: string;
    description?: string;
    homepage?: string;
    private?: boolean;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    team_id?: number;
    auto_init?: boolean;
    gitignore_template?: string;
    license_template?: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
  };
  export type ReposCreateCommitCommentParams = {
    owner: string;
    repo: string;
    sha: string;
    body: string;
    path?: string;
    position?: number;
    line?: number;
  };
  export type ReposCreateDeploymentParams = {
    owner: string;
    repo: string;
    ref: string;
    task?: string;
    auto_merge?: boolean;
    required_contexts?: string[];
    payload?: string;
    environment?: string;
    description?: string;
    transient_environment?: boolean;
    production_environment?: boolean;
  };
  export type ReposCreateDeploymentStatusParams = {
    owner: string;
    repo: string;
    deployment_id: string;
    state: "error" | "failure" | "inactive" | "pending" | "success";
    target_url?: string;
    log_url?: string;
    description?: string;
    environment_url?: string;
    auto_inactive?: boolean;
  };
  export type ReposCreateFileParams = {
    owner: string;
    repo: string;
    path: string;
    message: string;
    content: string;
    branch?: string;
    committer?: ReposCreateFileParamsCommitter;
    author?: ReposCreateFileParamsAuthor;
  };
  export type ReposCreateForOrgParams = {
    org: string;
    name: string;
    description?: string;
    homepage?: string;
    private?: boolean;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    team_id?: number;
    auto_init?: boolean;
    gitignore_template?: string;
    license_template?: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
  };
  export type ReposCreateHookParams = {
    owner: string;
    repo: string;
    name: string;
    config: ReposCreateHookParamsConfig;
    events?: string[];
    active?: boolean;
  };
  export type ReposCreateReleaseParams = {
    owner: string;
    repo: string;
    tag_name: string;
    target_commitish?: string;
    name?: string;
    body?: string;
    draft?: boolean;
    prerelease?: boolean;
  };
  export type ReposCreateStatusParams = {
    owner: string;
    repo: string;
    sha: string;
    state: "error" | "failure" | "pending" | "success";
    target_url?: string;
    description?: string;
    context?: string;
  };
  export type ReposDeleteParams = {
    owner: string;
    repo: string;
  };
  export type ReposDeleteAssetParams = {
    owner: string;
    repo: string;
    asset_id: string;
  };
  export type ReposDeleteCommitCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
  };
  export type ReposDeleteDeployKeyParams = {
    owner: string;
    repo: string;
    key_id: string;
  };
  export type ReposDeleteDownloadParams = {
    owner: string;
    repo: string;
    download_id: string;
  };
  export type ReposDeleteFileParams = {
    owner: string;
    repo: string;
    path: string;
    message: string;
    sha: string;
    branch?: string;
    committer?: ReposDeleteFileParamsCommitter;
    author?: ReposDeleteFileParamsAuthor;
  };
  export type ReposDeleteHookParams = {
    owner: string;
    repo: string;
    hook_id: string;
  };
  export type ReposDeleteInviteParams = {
    owner: string;
    repo: string;
    invitation_id: string;
  };
  export type ReposDeleteReleaseParams = {
    owner: string;
    repo: string;
    release_id: string;
  };
  export type ReposEditParams = {
    owner: string;
    repo: string;
    name: string;
    description?: string;
    homepage?: string;
    private?: boolean;
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    default_branch?: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    archived?: boolean;
  };
  export type ReposEditAssetParams = {
    owner: string;
    repo: string;
    asset_id: string;
    name?: string;
    label?: string;
  };
  export type ReposEditHookParams = {
    owner: string;
    repo: string;
    hook_id: string;
    config?: ReposEditHookParamsConfig;
    events?: string[];
    add_events?: string[];
    remove_events?: string[];
    active?: boolean;
  };
  export type ReposEditReleaseParams = {
    owner: string;
    repo: string;
    release_id: string;
    tag_name?: string;
    target_commitish?: string;
    name?: string;
    body?: string;
    draft?: boolean;
    prerelease?: boolean;
  };
  export type ReposForkParams = {
    owner: string;
    repo: string;
    organization?: string;
  };
  export type ReposGetParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetAllParams = {
    visibility?: "all" | "public" | "private";
    affiliation?: "owner" | "collaborator" | "organization_member";
    type?: "all" | "owner" | "public" | "private" | "member";
    sort?: "created" | "updated" | "pushed" | "full_name";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type ReposGetAllCommitCommentsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetArchiveLinkParams = {
    owner: string;
    repo: string;
    archive_format: "tarball" | "zipball";
    ref: string;
  };
  export type ReposGetAssetParams = {
    owner: string;
    repo: string;
    asset_id: string;
  };
  export type ReposGetAssetsParams = {
    owner: string;
    repo: string;
    release_id: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetBranchParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetBranchProtectionParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetBranchesParams = {
    owner: string;
    repo: string;
    protected?: boolean;
    per_page?: number;
    page?: number;
  };
  export type ReposGetClonesParams = {
    owner: string;
    repo: string;
    per?: "day" | "week";
  };
  export type ReposGetCollaboratorsParams = {
    owner: string;
    repo: string;
    affiliation?: "outside" | "direct" | "all";
    per_page?: number;
    page?: number;
  };
  export type ReposGetCombinedStatusForRefParams = {
    owner: string;
    repo: string;
    ref: string;
  };
  export type ReposGetCommitParams = {
    owner: string;
    repo: string;
    sha: string;
  };
  export type ReposGetCommitCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
  };
  export type ReposGetCommitCommentsParams = {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetCommitsParams = {
    owner: string;
    repo: string;
    sha?: string;
    path?: string;
    author?: string;
    since?: string;
    until?: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetCommunityProfileMetricsParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetContentParams = {
    owner: string;
    repo: string;
    path: string;
    ref?: string;
  };
  export type ReposGetContributorsParams = {
    owner: string;
    repo: string;
    anon?: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetDeployKeyParams = {
    owner: string;
    repo: string;
    key_id: string;
  };
  export type ReposGetDeployKeysParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetDeploymentParams = {
    owner: string;
    repo: string;
    deployment_id: string;
  };
  export type ReposGetDeploymentStatusParams = {
    owner: string;
    repo: string;
    deployment_id: string;
    id: number;
    status_id: number;
  };
  export type ReposGetDeploymentStatusesParams = {
    owner: string;
    repo: string;
    deployment_id: string;
    id: number;
    per_page?: number;
    page?: number;
  };
  export type ReposGetDeploymentsParams = {
    owner: string;
    repo: string;
    sha?: string;
    ref?: string;
    task?: string;
    environment?: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetDownloadParams = {
    owner: string;
    repo: string;
    download_id: string;
  };
  export type ReposGetDownloadsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetForOrgParams = {
    org: string;
    type?: "all" | "public" | "private" | "forks" | "sources" | "member";
    per_page?: number;
    page?: number;
  };
  export type ReposGetForUserParams = {
    username: string;
    type?: "all" | "owner" | "member";
    sort?: "created" | "updated" | "pushed" | "full_name";
    direction?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type ReposGetForksParams = {
    owner: string;
    repo: string;
    sort?: "newest" | "oldest" | "stargazers";
    per_page?: number;
    page?: number;
  };
  export type ReposGetHookParams = {
    owner: string;
    repo: string;
    hook_id: string;
  };
  export type ReposGetHooksParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetInvitesParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetLanguagesParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetLatestPagesBuildParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetLatestReleaseParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetPagesParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetPagesBuildParams = {
    owner: string;
    repo: string;
    build_id: string;
  };
  export type ReposGetPagesBuildsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetPathsParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetProtectedBranchAdminEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchRequiredSignaturesParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchRequiredStatusChecksParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetProtectedBranchTeamRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetProtectedBranchUserRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposGetPublicParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetReadmeParams = {
    owner: string;
    repo: string;
    ref?: string;
  };
  export type ReposGetReferrersParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetReleaseParams = {
    owner: string;
    repo: string;
    release_id: string;
  };
  export type ReposGetReleaseByTagParams = {
    owner: string;
    repo: string;
    tag: string;
  };
  export type ReposGetReleasesParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetShaOfCommitRefParams = {
    owner: string;
    repo: string;
    ref: string;
  };
  export type ReposGetStatsCodeFrequencyParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetStatsCommitActivityParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetStatsContributorsParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetStatsParticipationParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetStatsPunchCardParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetStatusesParams = {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetTagsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetTeamsParams = {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  };
  export type ReposGetTopicsParams = {
    owner: string;
    repo: string;
  };
  export type ReposGetViewsParams = {
    owner: string;
    repo: string;
    per?: "day" | "week";
  };
  export type ReposMergeParams = {
    owner: string;
    repo: string;
    base: string;
    head: string;
    commit_message?: string;
  };
  export type ReposPingHookParams = {
    owner: string;
    repo: string;
    hook_id: string;
  };
  export type ReposRemoveBranchProtectionParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveCollaboratorParams = {
    owner: string;
    repo: string;
    username: string;
  };
  export type ReposRemoveProtectedBranchAdminEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchRequiredSignaturesParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchRequiredStatusChecksParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchTeamRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposRemoveProtectedBranchUserRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposReplaceProtectedBranchRequiredStatusChecksContextsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposReplaceProtectedBranchTeamRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposReplaceProtectedBranchUserRestrictionsParams = {
    owner: string;
    repo: string;
    branch: string;
  };
  export type ReposReplaceTopicsParams = {
    owner: string;
    repo: string;
    names: string[];
  };
  export type ReposRequestPageBuildParams = {
    owner: string;
    repo: string;
  };
  export type ReposReviewUserPermissionLevelParams = {
    owner: string;
    repo: string;
    username: string;
  };
  export type ReposTestHookParams = {
    owner: string;
    repo: string;
    hook_id: string;
  };
  export type ReposTransferParams = {
    owner: string;
    repo: string;
    new_owner?: string;
    team_ids?: number[];
  };
  export type ReposUpdateBranchProtectionParams = {
    owner: string;
    repo: string;
    branch: string;
    required_status_checks: ReposUpdateBranchProtectionParamsRequiredStatusChecks;
    enforce_admins: boolean;
    required_pull_request_reviews: ReposUpdateBranchProtectionParamsRequiredPullRequestReviews;
    restrictions: ReposUpdateBranchProtectionParamsRestrictions;
  };
  export type ReposUpdateCommitCommentParams = {
    owner: string;
    repo: string;
    comment_id: string;
    body: string;
  };
  export type ReposUpdateFileParams = {
    owner: string;
    repo: string;
    path: string;
    message: string;
    content: string;
    sha: string;
    branch?: string;
    committer?: ReposUpdateFileParamsCommitter;
    author?: ReposUpdateFileParamsAuthor;
  };
  export type ReposUpdateInviteParams = {
    owner: string;
    repo: string;
    invitation_id: string;
    permissions?: "read" | "write" | "admin";
  };
  export type ReposUpdateProtectedBranchPullRequestReviewEnforcementParams = {
    owner: string;
    repo: string;
    branch: string;
    dismissal_restrictions?: ReposUpdateProtectedBranchPullRequestReviewEnforcementParamsDismissalRestrictions;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
  };
  export type ReposUpdateProtectedBranchRequiredStatusChecksParams = {
    owner: string;
    repo: string;
    branch: string;
    strict?: boolean;
    contexts?: string[];
  };
  export type ReposUploadAssetParams = {
    url: string;
    "Content-Length": number;
    "Content-Type": string;
    name: string;
    label?: string;
  };
  export type SearchCodeParams = {
    q: string;
    sort?: "indexed";
    order?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type SearchCommitsParams = {
    q: string;
    sort?: "author-date" | "committer-date";
    order?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type SearchIssuesParams = {
    q: string;
    sort?: "comments" | "created" | "updated";
    order?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type SearchLabelsParams = {
    repository_id: number;
    q: string;
    sort?: "created" | "updated";
    order?: "asc" | "desc";
  };
  export type SearchReposParams = {
    q: string;
    sort?: "stars" | "forks" | "updated";
    order?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type SearchTopicsParams = {
    q: string;
  };
  export type SearchUsersParams = {
    q: string;
    sort?: "followers" | "repositories" | "joined";
    order?: "asc" | "desc";
    per_page?: number;
    page?: number;
  };
  export type UsersAcceptRepoInviteParams = {
    invitation_id: string;
  };
  export type UsersAddRepoToInstallationParams = {
    installation_id: string;
    repository_id: string;
  };
  export type UsersBlockUserParams = {
    username: string;
  };
  export type UsersCheckBlockedUserParams = {
    username: string;
  };
  export type UsersCheckFollowingParams = {
    username: string;
  };
  export type UsersCheckIfOneFollowersOtherParams = {
    username: string;
    target_user: string;
  };
  export type UsersDeclineRepoInviteParams = {
    invitation_id: string;
  };
  export type UsersDeleteGpgKeyParams = {
    gpg_key_id: string;
  };
  export type UsersDeleteKeyParams = {
    key_id: string;
  };
  export type UsersEditOrgMembershipParams = {
    org: string;
    state: "active";
  };
  export type UsersFollowUserParams = {
    username: string;
  };
  export type UsersGetAllParams = {
    since?: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetContextForUserParams = {
    username: string;
    subject_type?: "organization" | "repository" | "issue" | "pull_request";
    subject_id?: string;
  };
  export type UsersGetEmailsParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetFollowersParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetFollowersForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetFollowingParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetFollowingForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetForUserParams = {
    username: string;
  };
  export type UsersGetGpgKeyParams = {
    gpg_key_id: string;
  };
  export type UsersGetGpgKeysParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetGpgKeysForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetInstallationReposParams = {
    installation_id: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetInstallationsParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetKeyParams = {
    key_id: string;
  };
  export type UsersGetKeysParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetKeysForUserParams = {
    username: string;
    per_page?: number;
    page?: number;
  };
  export type UsersGetMarketplacePurchasesParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetMarketplaceStubbedPurchasesParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetOrgMembershipParams = {
    org: string;
  };
  export type UsersGetOrgMembershipsParams = {
    state?: "active" | "pending";
    per_page?: number;
    page?: number;
  };
  export type UsersGetOrgsParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetPublicEmailsParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetRepoInvitesParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersGetTeamsParams = {
    per_page?: number;
    page?: number;
  };
  export type UsersRemoveRepoFromInstallationParams = {
    installation_id: string;
    repository_id: string;
  };
  export type UsersTogglePrimaryEmailVisibilityParams = {
    email: string;
    visibility: string;
  };
  export type UsersUnblockUserParams = {
    username: string;
  };
  export type UsersUnfollowUserParams = {
    username: string;
  };
  export type UsersUpdateParams = {
    name?: string;
    email?: string;
    blog?: string;
    company?: string;
    location?: string;
    hireable?: boolean;
    bio?: string;
  };
  export type ChecksCreateParamsOutput = {
    title: string;
    summary: string;
    text?: string;
    annotations?: ChecksCreateParamsOutputAnnotations[];
    images?: ChecksCreateParamsOutputImages[];
  };
  export type ChecksCreateParamsOutputAnnotations = {
    filename: string;
    blob_href: string;
    start_line: number;
    end_line: number;
    warning_level: "notice" | "warning" | "failure";
    message: string;
    title?: string;
    raw_details?: string;
  };
  export type ChecksCreateParamsOutputImages = {
    alt: string;
    image_url: string;
    caption?: string;
  };
  export type ChecksCreateParamsActions = {
    label: string;
    description: string;
    identifier: string;
  };
  export type ChecksSetSuitesPreferencesParamsAutoTriggerChecks = {
    app_id: number;
    setting: boolean;
  };
  export type ChecksUpdateParamsOutput = {
    title?: string;
    summary: string;
    text?: string;
    annotations?: ChecksUpdateParamsOutputAnnotations[];
    images?: ChecksUpdateParamsOutputImages[];
  };
  export type ChecksUpdateParamsOutputAnnotations = {
    filename: string;
    blob_href: string;
    start_line: number;
    end_line: number;
    warning_level: "notice" | "warning" | "failure";
    message: string;
    title?: string;
    raw_details?: string;
  };
  export type ChecksUpdateParamsOutputImages = {
    alt: string;
    image_url: string;
    caption?: string;
  };
  export type ChecksUpdateParamsActions = {
    label: string;
    description: string;
    identifier: string;
  };
  export type GistsCreateParamsFiles = {};
  export type GistsEditParamsFiles = {};
  export type GitdataCreateCommitParamsCommitter = {};
  export type GitdataCreateCommitParamsAuthor = {};
  export type GitdataCreateTagParamsTagger = {
    name?: string;
    email?: string;
    date?: string;
  };
  export type GitdataCreateTreeParamsTree = {
    path?: string;
    mode?: "100644" | "100755" | "040000" | "160000" | "120000";
    type?: "blob" | "tree" | "commit";
    sha?: string;
    content?: string;
  };
  export type OrgsCreateHookParamsConfig = {
    url: string;
    content_type?: string;
    secret?: string;
    insecure_ssl?: string;
  };
  export type OrgsEditHookParamsConfig = {
    url: string;
    content_type?: string;
    secret?: string;
    insecure_ssl?: string;
  };
  export type PullRequestsCreateReviewParamsComments = {
    path?: string;
    position?: number;
    body?: string;
  };
  export type ReposCreateFileParamsCommitter = {};
  export type ReposCreateFileParamsAuthor = {};
  export type ReposCreateHookParamsConfig = {
    url: string;
    content_type?: string;
    secret?: string;
    insecure_ssl?: string;
  };
  export type ReposDeleteFileParamsCommitter = {};
  export type ReposDeleteFileParamsAuthor = {};
  export type ReposEditHookParamsConfig = {
    url: string;
    content_type?: string;
    secret?: string;
    insecure_ssl?: string;
  };
  export type ReposUpdateBranchProtectionParamsRequiredStatusChecks = {
    strict: boolean;
    contexts: string[];
  };
  export type ReposUpdateBranchProtectionParamsRequiredPullRequestReviews = {
    dismissal_restrictions?: ReposUpdateBranchProtectionParamsRequiredPullRequestReviewsDismissalRestrictions;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
  };
  export type ReposUpdateBranchProtectionParamsRequiredPullRequestReviewsDismissalRestrictions = {
    users?: string[];
    teams?: string[];
  };
  export type ReposUpdateBranchProtectionParamsRestrictions = {
    users?: string[];
    teams?: string[];
  };
  export type ReposUpdateFileParamsCommitter = {};
  export type ReposUpdateFileParamsAuthor = {};
  export type ReposUpdateProtectedBranchPullRequestReviewEnforcementParamsDismissalRestrictions = {
    users?: string[];
    teams?: string[];
  };
}

declare class Github {
  constructor(options?: Github.Options);
  authenticate(auth: Github.Auth): void;
  hasNextPage(link: Github.Link): string | undefined;
  hasPreviousPage(link: Github.Link): string | undefined;
  hasLastPage(link: Github.Link): string | undefined;
  hasFirstPage(link: Github.Link): string | undefined;

  getNextPage(
    link: Github.Link,
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;
  getNextPage(
    link: Github.Link,
    headers?: { [header: string]: any },
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;

  getPreviousPage(
    link: Github.Link,
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;
  getPreviousPage(
    link: Github.Link,
    headers?: { [header: string]: any },
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;

  getLastPage(
    link: Github.Link,
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;
  getLastPage(
    link: Github.Link,
    headers?: { [header: string]: any },
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;

  getFirstPage(
    link: Github.Link,
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;
  getFirstPage(
    link: Github.Link,
    headers?: { [header: string]: any },
    callback?: Github.Callback<Github.AnyResponse>
  ): Promise<Github.AnyResponse>;

  activity: {
    checkNotificationThreadSubscription(
      params: Github.ActivityCheckNotificationThreadSubscriptionParams,
      callback?: Github.Callback<
        Github.Response<Github.CheckNotificationThreadSubscriptionResponse>
      >
    ): Promise<
      Github.Response<Github.CheckNotificationThreadSubscriptionResponse>
    >;
    checkStarringRepo(
      params: Github.ActivityCheckStarringRepoParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    deleteNotificationThreadSubscription(
      params: Github.ActivityDeleteNotificationThreadSubscriptionParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteNotificationThreadSubscriptionResponse>
      >
    ): Promise<
      Github.Response<Github.DeleteNotificationThreadSubscriptionResponse>
    >;
    getEvents(
      params: Github.ActivityGetEventsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForOrg(
      params: Github.ActivityGetEventsForOrgParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForRepo(
      params: Github.ActivityGetEventsForRepoParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForRepoNetwork(
      params: Github.ActivityGetEventsForRepoNetworkParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForUser(
      params: Github.ActivityGetEventsForUserParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForUserOrg(
      params: Github.ActivityGetEventsForUserOrgParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsForUserPublic(
      params: Github.ActivityGetEventsForUserPublicParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsReceived(
      params: Github.ActivityGetEventsReceivedParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getEventsReceivedPublic(
      params: Github.ActivityGetEventsReceivedPublicParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getFeeds(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.GetFeedsResponse>>
    ): Promise<Github.Response<Github.GetFeedsResponse>>;
    getNotificationThread(
      params: Github.ActivityGetNotificationThreadParams,
      callback?: Github.Callback<
        Github.Response<Github.GetNotificationThreadResponse>
      >
    ): Promise<Github.Response<Github.GetNotificationThreadResponse>>;
    getNotifications(
      params: Github.ActivityGetNotificationsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetNotificationsResponse>
      >
    ): Promise<Github.Response<Github.GetNotificationsResponse>>;
    getNotificationsForUser(
      params: Github.ActivityGetNotificationsForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetNotificationsForUserResponse>
      >
    ): Promise<Github.Response<Github.GetNotificationsForUserResponse>>;
    getRepoSubscription(
      params: Github.ActivityGetRepoSubscriptionParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getStargazersForRepo(
      params: Github.ActivityGetStargazersForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStargazersForRepoResponse>
      >
    ): Promise<Github.Response<Github.GetStargazersForRepoResponse>>;
    getStarredRepos(
      params: Github.ActivityGetStarredReposParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStarredReposResponse>
      >
    ): Promise<Github.Response<Github.GetStarredReposResponse>>;
    getStarredReposForUser(
      params: Github.ActivityGetStarredReposForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStarredReposForUserResponse>
      >
    ): Promise<Github.Response<Github.GetStarredReposForUserResponse>>;
    getWatchedRepos(
      params: Github.ActivityGetWatchedReposParams,
      callback?: Github.Callback<
        Github.Response<Github.GetWatchedReposResponse>
      >
    ): Promise<Github.Response<Github.GetWatchedReposResponse>>;
    getWatchedReposForUser(
      params: Github.ActivityGetWatchedReposForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetWatchedReposForUserResponse>
      >
    ): Promise<Github.Response<Github.GetWatchedReposForUserResponse>>;
    getWatchersForRepo(
      params: Github.ActivityGetWatchersForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.GetWatchersForRepoResponse>
      >
    ): Promise<Github.Response<Github.GetWatchersForRepoResponse>>;
    markNotificationThreadAsRead(
      params: Github.ActivityMarkNotificationThreadAsReadParams,
      callback?: Github.Callback<
        Github.Response<Github.MarkNotificationThreadAsReadResponse>
      >
    ): Promise<Github.Response<Github.MarkNotificationThreadAsReadResponse>>;
    markNotificationsAsRead(
      params: Github.ActivityMarkNotificationsAsReadParams,
      callback?: Github.Callback<
        Github.Response<Github.MarkNotificationsAsReadResponse>
      >
    ): Promise<Github.Response<Github.MarkNotificationsAsReadResponse>>;
    markNotificationsAsReadForRepo(
      params: Github.ActivityMarkNotificationsAsReadForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.MarkNotificationsAsReadForRepoResponse>
      >
    ): Promise<Github.Response<Github.MarkNotificationsAsReadForRepoResponse>>;
    setNotificationThreadSubscription(
      params: Github.ActivitySetNotificationThreadSubscriptionParams,
      callback?: Github.Callback<
        Github.Response<Github.SetNotificationThreadSubscriptionResponse>
      >
    ): Promise<
      Github.Response<Github.SetNotificationThreadSubscriptionResponse>
    >;
    setRepoSubscription(
      params: Github.ActivitySetRepoSubscriptionParams,
      callback?: Github.Callback<
        Github.Response<Github.SetRepoSubscriptionResponse>
      >
    ): Promise<Github.Response<Github.SetRepoSubscriptionResponse>>;
    starRepo(
      params: Github.ActivityStarRepoParams,
      callback?: Github.Callback<Github.Response<Github.StarRepoResponse>>
    ): Promise<Github.Response<Github.StarRepoResponse>>;
    unstarRepo(
      params: Github.ActivityUnstarRepoParams,
      callback?: Github.Callback<Github.Response<Github.UnstarRepoResponse>>
    ): Promise<Github.Response<Github.UnstarRepoResponse>>;
    unwatchRepo(
      params: Github.ActivityUnwatchRepoParams,
      callback?: Github.Callback<Github.Response<Github.UnwatchRepoResponse>>
    ): Promise<Github.Response<Github.UnwatchRepoResponse>>;
  };
  apps: {
    addRepoToInstallation(
      params: Github.AppsAddRepoToInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.AddRepoToInstallationResponse>
      >
    ): Promise<Github.Response<Github.AddRepoToInstallationResponse>>;
    checkMarketplaceListingAccount(
      params: Github.AppsCheckMarketplaceListingAccountParams,
      callback?: Github.Callback<
        Github.Response<Github.CheckMarketplaceListingAccountResponse>
      >
    ): Promise<Github.Response<Github.CheckMarketplaceListingAccountResponse>>;
    checkMarketplaceListingStubbedAccount(
      params: Github.AppsCheckMarketplaceListingStubbedAccountParams,
      callback?: Github.Callback<
        Github.Response<Github.CheckMarketplaceListingStubbedAccountResponse>
      >
    ): Promise<
      Github.Response<Github.CheckMarketplaceListingStubbedAccountResponse>
    >;
    createInstallationToken(
      params: Github.AppsCreateInstallationTokenParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateInstallationTokenResponse>
      >
    ): Promise<Github.Response<Github.CreateInstallationTokenResponse>>;
    findOrgInstallation(
      params: Github.AppsFindOrgInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.FindOrgInstallationResponse>
      >
    ): Promise<Github.Response<Github.FindOrgInstallationResponse>>;
    findRepoInstallation(
      params: Github.AppsFindRepoInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.FindRepoInstallationResponse>
      >
    ): Promise<Github.Response<Github.FindRepoInstallationResponse>>;
    findUserInstallation(
      params: Github.AppsFindUserInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.FindUserInstallationResponse>
      >
    ): Promise<Github.Response<Github.FindUserInstallationResponse>>;
    get(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getForSlug(
      params: Github.AppsGetForSlugParams,
      callback?: Github.Callback<Github.Response<Github.GetForSlugResponse>>
    ): Promise<Github.Response<Github.GetForSlugResponse>>;
    getInstallation(
      params: Github.AppsGetInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInstallationResponse>
      >
    ): Promise<Github.Response<Github.GetInstallationResponse>>;
    getInstallationRepositories(
      params: Github.AppsGetInstallationRepositoriesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInstallationRepositoriesResponse>
      >
    ): Promise<Github.Response<Github.GetInstallationRepositoriesResponse>>;
    getInstallations(
      params: Github.AppsGetInstallationsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInstallationsResponse>
      >
    ): Promise<Github.Response<Github.GetInstallationsResponse>>;
    getMarketplaceListingPlanAccounts(
      params: Github.AppsGetMarketplaceListingPlanAccountsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplaceListingPlanAccountsResponse>
      >
    ): Promise<
      Github.Response<Github.GetMarketplaceListingPlanAccountsResponse>
    >;
    getMarketplaceListingPlans(
      params: Github.AppsGetMarketplaceListingPlansParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplaceListingPlansResponse>
      >
    ): Promise<Github.Response<Github.GetMarketplaceListingPlansResponse>>;
    getMarketplaceListingStubbedPlanAccounts(
      params: Github.AppsGetMarketplaceListingStubbedPlanAccountsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplaceListingStubbedPlanAccountsResponse>
      >
    ): Promise<
      Github.Response<Github.GetMarketplaceListingStubbedPlanAccountsResponse>
    >;
    getMarketplaceListingStubbedPlans(
      params: Github.AppsGetMarketplaceListingStubbedPlansParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplaceListingStubbedPlansResponse>
      >
    ): Promise<
      Github.Response<Github.GetMarketplaceListingStubbedPlansResponse>
    >;
    removeRepoFromInstallation(
      params: Github.AppsRemoveRepoFromInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveRepoFromInstallationResponse>
      >
    ): Promise<Github.Response<Github.RemoveRepoFromInstallationResponse>>;
  };
  authorization: {
    check(
      params: Github.AuthorizationCheckParams,
      callback?: Github.Callback<Github.Response<Github.CheckResponse>>
    ): Promise<Github.Response<Github.CheckResponse>>;
    create(
      params: Github.AuthorizationCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    delete(
      params: Github.AuthorizationDeleteParams,
      callback?: Github.Callback<Github.Response<Github.DeleteResponse>>
    ): Promise<Github.Response<Github.DeleteResponse>>;
    deleteGrant(
      params: Github.AuthorizationDeleteGrantParams,
      callback?: Github.Callback<Github.Response<Github.DeleteGrantResponse>>
    ): Promise<Github.Response<Github.DeleteGrantResponse>>;
    get(
      params: Github.AuthorizationGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.AuthorizationGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getGrant(
      params: Github.AuthorizationGetGrantParams,
      callback?: Github.Callback<Github.Response<Github.GetGrantResponse>>
    ): Promise<Github.Response<Github.GetGrantResponse>>;
    getGrants(
      params: Github.AuthorizationGetGrantsParams,
      callback?: Github.Callback<Github.Response<Github.GetGrantsResponse>>
    ): Promise<Github.Response<Github.GetGrantsResponse>>;
    getOrCreateAuthorizationForApp(
      params: Github.AuthorizationGetOrCreateAuthorizationForAppParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getOrCreateAuthorizationForAppAndFingerprint(
      params: Github.AuthorizationGetOrCreateAuthorizationForAppAndFingerprintParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    reset(
      params: Github.AuthorizationResetParams,
      callback?: Github.Callback<Github.Response<Github.ResetResponse>>
    ): Promise<Github.Response<Github.ResetResponse>>;
    revoke(
      params: Github.AuthorizationRevokeParams,
      callback?: Github.Callback<Github.Response<Github.RevokeResponse>>
    ): Promise<Github.Response<Github.RevokeResponse>>;
    revokeGrant(
      params: Github.AuthorizationRevokeGrantParams,
      callback?: Github.Callback<Github.Response<Github.RevokeGrantResponse>>
    ): Promise<Github.Response<Github.RevokeGrantResponse>>;
    update(
      params: Github.AuthorizationUpdateParams,
      callback?: Github.Callback<Github.Response<Github.UpdateResponse>>
    ): Promise<Github.Response<Github.UpdateResponse>>;
  };
  checks: {
    create(
      params: Github.ChecksCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    createSuite(
      params: Github.ChecksCreateSuiteParams,
      callback?: Github.Callback<Github.Response<Github.CreateSuiteResponse>>
    ): Promise<Github.Response<Github.CreateSuiteResponse>>;
    get(
      params: Github.ChecksGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getSuite(
      params: Github.ChecksGetSuiteParams,
      callback?: Github.Callback<Github.Response<Github.GetSuiteResponse>>
    ): Promise<Github.Response<Github.GetSuiteResponse>>;
    listAnnotations(
      params: Github.ChecksListAnnotationsParams,
      callback?: Github.Callback<
        Github.Response<Github.ListAnnotationsResponse>
      >
    ): Promise<Github.Response<Github.ListAnnotationsResponse>>;
    listForRef(
      params: Github.ChecksListForRefParams,
      callback?: Github.Callback<Github.Response<Github.ListForRefResponse>>
    ): Promise<Github.Response<Github.ListForRefResponse>>;
    listForSuite(
      params: Github.ChecksListForSuiteParams,
      callback?: Github.Callback<Github.Response<Github.ListForSuiteResponse>>
    ): Promise<Github.Response<Github.ListForSuiteResponse>>;
    listSuitesForRef(
      params: Github.ChecksListSuitesForRefParams,
      callback?: Github.Callback<
        Github.Response<Github.ListSuitesForRefResponse>
      >
    ): Promise<Github.Response<Github.ListSuitesForRefResponse>>;
    requestSuites(
      params: Github.ChecksRequestSuitesParams,
      callback?: Github.Callback<Github.Response<Github.RequestSuitesResponse>>
    ): Promise<Github.Response<Github.RequestSuitesResponse>>;
    setSuitesPreferences(
      params: Github.ChecksSetSuitesPreferencesParams,
      callback?: Github.Callback<
        Github.Response<Github.SetSuitesPreferencesResponse>
      >
    ): Promise<Github.Response<Github.SetSuitesPreferencesResponse>>;
    update(
      params: Github.ChecksUpdateParams,
      callback?: Github.Callback<Github.Response<Github.UpdateResponse>>
    ): Promise<Github.Response<Github.UpdateResponse>>;
  };
  gists: {
    checkStar(
      params: Github.GistsCheckStarParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    create(
      params: Github.GistsCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    createComment(
      params: Github.GistsCreateCommentParams,
      callback?: Github.Callback<Github.Response<Github.CreateCommentResponse>>
    ): Promise<Github.Response<Github.CreateCommentResponse>>;
    delete(
      params: Github.GistsDeleteParams,
      callback?: Github.Callback<Github.Response<Github.DeleteResponse>>
    ): Promise<Github.Response<Github.DeleteResponse>>;
    deleteComment(
      params: Github.GistsDeleteCommentParams,
      callback?: Github.Callback<Github.Response<Github.DeleteCommentResponse>>
    ): Promise<Github.Response<Github.DeleteCommentResponse>>;
    edit(
      params: Github.GistsEditParams,
      callback?: Github.Callback<Github.Response<Github.EditResponse>>
    ): Promise<Github.Response<Github.EditResponse>>;
    editComment(
      params: Github.GistsEditCommentParams,
      callback?: Github.Callback<Github.Response<Github.EditCommentResponse>>
    ): Promise<Github.Response<Github.EditCommentResponse>>;
    fork(
      params: Github.GistsForkParams,
      callback?: Github.Callback<Github.Response<Github.ForkResponse>>
    ): Promise<Github.Response<Github.ForkResponse>>;
    get(
      params: Github.GistsGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.GistsGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getComment(
      params: Github.GistsGetCommentParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentResponse>>
    ): Promise<Github.Response<Github.GetCommentResponse>>;
    getComments(
      params: Github.GistsGetCommentsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentsResponse>>
    ): Promise<Github.Response<Github.GetCommentsResponse>>;
    getCommits(
      params: Github.GistsGetCommitsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommitsResponse>>
    ): Promise<Github.Response<Github.GetCommitsResponse>>;
    getForUser(
      params: Github.GistsGetForUserParams,
      callback?: Github.Callback<Github.Response<Github.GetForUserResponse>>
    ): Promise<Github.Response<Github.GetForUserResponse>>;
    getForks(
      params: Github.GistsGetForksParams,
      callback?: Github.Callback<Github.Response<Github.GetForksResponse>>
    ): Promise<Github.Response<Github.GetForksResponse>>;
    getPublic(
      params: Github.GistsGetPublicParams,
      callback?: Github.Callback<Github.Response<Github.GetPublicResponse>>
    ): Promise<Github.Response<Github.GetPublicResponse>>;
    getRevision(
      params: Github.GistsGetRevisionParams,
      callback?: Github.Callback<Github.Response<Github.GetRevisionResponse>>
    ): Promise<Github.Response<Github.GetRevisionResponse>>;
    getStarred(
      params: Github.GistsGetStarredParams,
      callback?: Github.Callback<Github.Response<Github.GetStarredResponse>>
    ): Promise<Github.Response<Github.GetStarredResponse>>;
    star(
      params: Github.GistsStarParams,
      callback?: Github.Callback<Github.Response<Github.StarResponse>>
    ): Promise<Github.Response<Github.StarResponse>>;
    unstar(
      params: Github.GistsUnstarParams,
      callback?: Github.Callback<Github.Response<Github.UnstarResponse>>
    ): Promise<Github.Response<Github.UnstarResponse>>;
  };
  gitdata: {
    createBlob(
      params: Github.GitdataCreateBlobParams,
      callback?: Github.Callback<Github.Response<Github.CreateBlobResponse>>
    ): Promise<Github.Response<Github.CreateBlobResponse>>;
    createCommit(
      params: Github.GitdataCreateCommitParams,
      callback?: Github.Callback<Github.Response<Github.CreateCommitResponse>>
    ): Promise<Github.Response<Github.CreateCommitResponse>>;
    createReference(
      params: Github.GitdataCreateReferenceParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateReferenceResponse>
      >
    ): Promise<Github.Response<Github.CreateReferenceResponse>>;
    createTag(
      params: Github.GitdataCreateTagParams,
      callback?: Github.Callback<Github.Response<Github.CreateTagResponse>>
    ): Promise<Github.Response<Github.CreateTagResponse>>;
    createTree(
      params: Github.GitdataCreateTreeParams,
      callback?: Github.Callback<Github.Response<Github.CreateTreeResponse>>
    ): Promise<Github.Response<Github.CreateTreeResponse>>;
    deleteReference(
      params: Github.GitdataDeleteReferenceParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteReferenceResponse>
      >
    ): Promise<Github.Response<Github.DeleteReferenceResponse>>;
    getBlob(
      params: Github.GitdataGetBlobParams,
      callback?: Github.Callback<Github.Response<Github.GetBlobResponse>>
    ): Promise<Github.Response<Github.GetBlobResponse>>;
    getCommit(
      params: Github.GitdataGetCommitParams,
      callback?: Github.Callback<Github.Response<Github.GetCommitResponse>>
    ): Promise<Github.Response<Github.GetCommitResponse>>;
    getCommitSignatureVerification(
      params: Github.GitdataGetCommitSignatureVerificationParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommitSignatureVerificationResponse>
      >
    ): Promise<Github.Response<Github.GetCommitSignatureVerificationResponse>>;
    getReference(
      params: Github.GitdataGetReferenceParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getTag(
      params: Github.GitdataGetTagParams,
      callback?: Github.Callback<Github.Response<Github.GetTagResponse>>
    ): Promise<Github.Response<Github.GetTagResponse>>;
    getTagSignatureVerification(
      params: Github.GitdataGetTagSignatureVerificationParams,
      callback?: Github.Callback<
        Github.Response<Github.GetTagSignatureVerificationResponse>
      >
    ): Promise<Github.Response<Github.GetTagSignatureVerificationResponse>>;
    getTree(
      params: Github.GitdataGetTreeParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    updateReference(
      params: Github.GitdataUpdateReferenceParams,
      callback?: Github.Callback<
        Github.Response<Github.UpdateReferenceResponse>
      >
    ): Promise<Github.Response<Github.UpdateReferenceResponse>>;
  };
  issues: {
    addAssigneesToIssue(
      params: Github.IssuesAddAssigneesToIssueParams,
      callback?: Github.Callback<
        Github.Response<Github.AddAssigneesToIssueResponse>
      >
    ): Promise<Github.Response<Github.AddAssigneesToIssueResponse>>;
    addLabels(
      params: Github.IssuesAddLabelsParams,
      callback?: Github.Callback<Github.Response<Github.AddLabelsResponse>>
    ): Promise<Github.Response<Github.AddLabelsResponse>>;
    checkAssignee(
      params: Github.IssuesCheckAssigneeParams,
      callback?: Github.Callback<Github.Response<Github.CheckAssigneeResponse>>
    ): Promise<Github.Response<Github.CheckAssigneeResponse>>;
    create(
      params: Github.IssuesCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    createComment(
      params: Github.IssuesCreateCommentParams,
      callback?: Github.Callback<Github.Response<Github.CreateCommentResponse>>
    ): Promise<Github.Response<Github.CreateCommentResponse>>;
    createLabel(
      params: Github.IssuesCreateLabelParams,
      callback?: Github.Callback<Github.Response<Github.CreateLabelResponse>>
    ): Promise<Github.Response<Github.CreateLabelResponse>>;
    createMilestone(
      params: Github.IssuesCreateMilestoneParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateMilestoneResponse>
      >
    ): Promise<Github.Response<Github.CreateMilestoneResponse>>;
    deleteComment(
      params: Github.IssuesDeleteCommentParams,
      callback?: Github.Callback<Github.Response<Github.DeleteCommentResponse>>
    ): Promise<Github.Response<Github.DeleteCommentResponse>>;
    deleteLabel(
      params: Github.IssuesDeleteLabelParams,
      callback?: Github.Callback<Github.Response<Github.DeleteLabelResponse>>
    ): Promise<Github.Response<Github.DeleteLabelResponse>>;
    deleteMilestone(
      params: Github.IssuesDeleteMilestoneParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteMilestoneResponse>
      >
    ): Promise<Github.Response<Github.DeleteMilestoneResponse>>;
    edit(
      params: Github.IssuesEditParams,
      callback?: Github.Callback<Github.Response<Github.EditResponse>>
    ): Promise<Github.Response<Github.EditResponse>>;
    editComment(
      params: Github.IssuesEditCommentParams,
      callback?: Github.Callback<Github.Response<Github.EditCommentResponse>>
    ): Promise<Github.Response<Github.EditCommentResponse>>;
    get(
      params: Github.IssuesGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.IssuesGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getAssignees(
      params: Github.IssuesGetAssigneesParams,
      callback?: Github.Callback<Github.Response<Github.GetAssigneesResponse>>
    ): Promise<Github.Response<Github.GetAssigneesResponse>>;
    getComment(
      params: Github.IssuesGetCommentParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentResponse>>
    ): Promise<Github.Response<Github.GetCommentResponse>>;
    getComments(
      params: Github.IssuesGetCommentsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentsResponse>>
    ): Promise<Github.Response<Github.GetCommentsResponse>>;
    getCommentsForRepo(
      params: Github.IssuesGetCommentsForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommentsForRepoResponse>
      >
    ): Promise<Github.Response<Github.GetCommentsForRepoResponse>>;
    getEvent(
      params: Github.IssuesGetEventParams,
      callback?: Github.Callback<Github.Response<Github.GetEventResponse>>
    ): Promise<Github.Response<Github.GetEventResponse>>;
    getEvents(
      params: Github.IssuesGetEventsParams,
      callback?: Github.Callback<Github.Response<Github.GetEventsResponse>>
    ): Promise<Github.Response<Github.GetEventsResponse>>;
    getEventsForRepo(
      params: Github.IssuesGetEventsForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.GetEventsForRepoResponse>
      >
    ): Promise<Github.Response<Github.GetEventsForRepoResponse>>;
    getEventsTimeline(
      params: Github.IssuesGetEventsTimelineParams,
      callback?: Github.Callback<
        Github.Response<Github.GetEventsTimelineResponse>
      >
    ): Promise<Github.Response<Github.GetEventsTimelineResponse>>;
    getForOrg(
      params: Github.IssuesGetForOrgParams,
      callback?: Github.Callback<Github.Response<Github.GetForOrgResponse>>
    ): Promise<Github.Response<Github.GetForOrgResponse>>;
    getForRepo(
      params: Github.IssuesGetForRepoParams,
      callback?: Github.Callback<Github.Response<Github.GetForRepoResponse>>
    ): Promise<Github.Response<Github.GetForRepoResponse>>;
    getForUser(
      params: Github.IssuesGetForUserParams,
      callback?: Github.Callback<Github.Response<Github.GetForUserResponse>>
    ): Promise<Github.Response<Github.GetForUserResponse>>;
    getIssueLabels(
      params: Github.IssuesGetIssueLabelsParams,
      callback?: Github.Callback<Github.Response<Github.GetIssueLabelsResponse>>
    ): Promise<Github.Response<Github.GetIssueLabelsResponse>>;
    getLabel(
      params: Github.IssuesGetLabelParams,
      callback?: Github.Callback<Github.Response<Github.GetLabelResponse>>
    ): Promise<Github.Response<Github.GetLabelResponse>>;
    getLabels(
      params: Github.IssuesGetLabelsParams,
      callback?: Github.Callback<Github.Response<Github.GetLabelsResponse>>
    ): Promise<Github.Response<Github.GetLabelsResponse>>;
    getMilestone(
      params: Github.IssuesGetMilestoneParams,
      callback?: Github.Callback<Github.Response<Github.GetMilestoneResponse>>
    ): Promise<Github.Response<Github.GetMilestoneResponse>>;
    getMilestoneLabels(
      params: Github.IssuesGetMilestoneLabelsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMilestoneLabelsResponse>
      >
    ): Promise<Github.Response<Github.GetMilestoneLabelsResponse>>;
    getMilestones(
      params: Github.IssuesGetMilestonesParams,
      callback?: Github.Callback<Github.Response<Github.GetMilestonesResponse>>
    ): Promise<Github.Response<Github.GetMilestonesResponse>>;
    lock(
      params: Github.IssuesLockParams,
      callback?: Github.Callback<Github.Response<Github.LockResponse>>
    ): Promise<Github.Response<Github.LockResponse>>;
    removeAllLabels(
      params: Github.IssuesRemoveAllLabelsParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveAllLabelsResponse>
      >
    ): Promise<Github.Response<Github.RemoveAllLabelsResponse>>;
    removeAssigneesFromIssue(
      params: Github.IssuesRemoveAssigneesFromIssueParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveAssigneesFromIssueResponse>
      >
    ): Promise<Github.Response<Github.RemoveAssigneesFromIssueResponse>>;
    removeLabel(
      params: Github.IssuesRemoveLabelParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    replaceAllLabels(
      params: Github.IssuesReplaceAllLabelsParams,
      callback?: Github.Callback<
        Github.Response<Github.ReplaceAllLabelsResponse>
      >
    ): Promise<Github.Response<Github.ReplaceAllLabelsResponse>>;
    unlock(
      params: Github.IssuesUnlockParams,
      callback?: Github.Callback<Github.Response<Github.UnlockResponse>>
    ): Promise<Github.Response<Github.UnlockResponse>>;
    updateLabel(
      params: Github.IssuesUpdateLabelParams,
      callback?: Github.Callback<Github.Response<Github.UpdateLabelResponse>>
    ): Promise<Github.Response<Github.UpdateLabelResponse>>;
    updateMilestone(
      params: Github.IssuesUpdateMilestoneParams,
      callback?: Github.Callback<
        Github.Response<Github.UpdateMilestoneResponse>
      >
    ): Promise<Github.Response<Github.UpdateMilestoneResponse>>;
  };
  migrations: {
    cancelImport(
      params: Github.MigrationsCancelImportParams,
      callback?: Github.Callback<Github.Response<Github.CancelImportResponse>>
    ): Promise<Github.Response<Github.CancelImportResponse>>;
    deleteArchiveForAuthenticatedUser(
      params: Github.MigrationsDeleteArchiveForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteArchiveForAuthenticatedUserResponse>
      >
    ): Promise<
      Github.Response<Github.DeleteArchiveForAuthenticatedUserResponse>
    >;
    deleteMigrationArchive(
      params: Github.MigrationsDeleteMigrationArchiveParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteMigrationArchiveResponse>
      >
    ): Promise<Github.Response<Github.DeleteMigrationArchiveResponse>>;
    getArchiveForAuthenticatedUser(
      params: Github.MigrationsGetArchiveForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetArchiveForAuthenticatedUserResponse>
      >
    ): Promise<Github.Response<Github.GetArchiveForAuthenticatedUserResponse>>;
    getImportCommitAuthors(
      params: Github.MigrationsGetImportCommitAuthorsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetImportCommitAuthorsResponse>
      >
    ): Promise<Github.Response<Github.GetImportCommitAuthorsResponse>>;
    getImportProgress(
      params: Github.MigrationsGetImportProgressParams,
      callback?: Github.Callback<
        Github.Response<Github.GetImportProgressResponse>
      >
    ): Promise<Github.Response<Github.GetImportProgressResponse>>;
    getLargeImportFiles(
      params: Github.MigrationsGetLargeImportFilesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetLargeImportFilesResponse>
      >
    ): Promise<Github.Response<Github.GetLargeImportFilesResponse>>;
    getMigrationArchiveLink(
      params: Github.MigrationsGetMigrationArchiveLinkParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMigrationArchiveLinkResponse>
      >
    ): Promise<Github.Response<Github.GetMigrationArchiveLinkResponse>>;
    getMigrationStatus(
      params: Github.MigrationsGetMigrationStatusParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMigrationStatusResponse>
      >
    ): Promise<Github.Response<Github.GetMigrationStatusResponse>>;
    getMigrations(
      params: Github.MigrationsGetMigrationsParams,
      callback?: Github.Callback<Github.Response<Github.GetMigrationsResponse>>
    ): Promise<Github.Response<Github.GetMigrationsResponse>>;
    getStatusForAuthenticatedUser(
      params: Github.MigrationsGetStatusForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatusForAuthenticatedUserResponse>
      >
    ): Promise<Github.Response<Github.GetStatusForAuthenticatedUserResponse>>;
    listForAuthenticatedUser(
      params: Github.MigrationsListForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.ListForAuthenticatedUserResponse>
      >
    ): Promise<Github.Response<Github.ListForAuthenticatedUserResponse>>;
    mapImportCommitAuthor(
      params: Github.MigrationsMapImportCommitAuthorParams,
      callback?: Github.Callback<
        Github.Response<Github.MapImportCommitAuthorResponse>
      >
    ): Promise<Github.Response<Github.MapImportCommitAuthorResponse>>;
    setImportLfsPreference(
      params: Github.MigrationsSetImportLfsPreferenceParams,
      callback?: Github.Callback<
        Github.Response<Github.SetImportLfsPreferenceResponse>
      >
    ): Promise<Github.Response<Github.SetImportLfsPreferenceResponse>>;
    startForAuthenticatedUser(
      params: Github.MigrationsStartForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.StartForAuthenticatedUserResponse>
      >
    ): Promise<Github.Response<Github.StartForAuthenticatedUserResponse>>;
    startImport(
      params: Github.MigrationsStartImportParams,
      callback?: Github.Callback<Github.Response<Github.StartImportResponse>>
    ): Promise<Github.Response<Github.StartImportResponse>>;
    startMigration(
      params: Github.MigrationsStartMigrationParams,
      callback?: Github.Callback<Github.Response<Github.StartMigrationResponse>>
    ): Promise<Github.Response<Github.StartMigrationResponse>>;
    unlockRepoForAuthenticatedUser(
      params: Github.MigrationsUnlockRepoForAuthenticatedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.UnlockRepoForAuthenticatedUserResponse>
      >
    ): Promise<Github.Response<Github.UnlockRepoForAuthenticatedUserResponse>>;
    unlockRepoLockedForMigration(
      params: Github.MigrationsUnlockRepoLockedForMigrationParams,
      callback?: Github.Callback<
        Github.Response<Github.UnlockRepoLockedForMigrationResponse>
      >
    ): Promise<Github.Response<Github.UnlockRepoLockedForMigrationResponse>>;
    updateImport(
      params: Github.MigrationsUpdateImportParams,
      callback?: Github.Callback<Github.Response<Github.UpdateImportResponse>>
    ): Promise<Github.Response<Github.UpdateImportResponse>>;
  };
  misc: {
    getCodeOfConduct(
      params: Github.MiscGetCodeOfConductParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCodeOfConductResponse>
      >
    ): Promise<Github.Response<Github.GetCodeOfConductResponse>>;
    getCodesOfConduct(
      params: Github.EmptyParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCodesOfConductResponse>
      >
    ): Promise<Github.Response<Github.GetCodesOfConductResponse>>;
    getGitignoreTemplate(
      params: Github.MiscGetGitignoreTemplateParams,
      callback?: Github.Callback<
        Github.Response<Github.GetGitignoreTemplateResponse>
      >
    ): Promise<Github.Response<Github.GetGitignoreTemplateResponse>>;
    getGitignoreTemplates(
      params: Github.EmptyParams,
      callback?: Github.Callback<
        Github.Response<Github.GetGitignoreTemplatesResponse>
      >
    ): Promise<Github.Response<Github.GetGitignoreTemplatesResponse>>;
    getLicense(
      params: Github.MiscGetLicenseParams,
      callback?: Github.Callback<Github.Response<Github.GetLicenseResponse>>
    ): Promise<Github.Response<Github.GetLicenseResponse>>;
    getLicenses(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.GetLicensesResponse>>
    ): Promise<Github.Response<Github.GetLicensesResponse>>;
    getRateLimit(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.GetRateLimitResponse>>
    ): Promise<Github.Response<Github.GetRateLimitResponse>>;
    getRepoCodeOfConduct(
      params: Github.MiscGetRepoCodeOfConductParams,
      callback?: Github.Callback<
        Github.Response<Github.GetRepoCodeOfConductResponse>
      >
    ): Promise<Github.Response<Github.GetRepoCodeOfConductResponse>>;
    getRepoLicense(
      params: Github.MiscGetRepoLicenseParams,
      callback?: Github.Callback<Github.Response<Github.GetRepoLicenseResponse>>
    ): Promise<Github.Response<Github.GetRepoLicenseResponse>>;
    renderMarkdown(
      params: Github.MiscRenderMarkdownParams,
      callback?: Github.Callback<Github.Response<Github.RenderMarkdownResponse>>
    ): Promise<Github.Response<Github.RenderMarkdownResponse>>;
    renderMarkdownRaw(
      params: Github.EmptyParams,
      callback?: Github.Callback<
        Github.Response<Github.RenderMarkdownRawResponse>
      >
    ): Promise<Github.Response<Github.RenderMarkdownRawResponse>>;
  };
  orgs: {
    addOrgMembership(
      params: Github.OrgsAddOrgMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    addTeamMembership(
      params: Github.OrgsAddTeamMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    addTeamRepo(
      params: Github.OrgsAddTeamRepoParams,
      callback?: Github.Callback<Github.Response<Github.AddTeamRepoResponse>>
    ): Promise<Github.Response<Github.AddTeamRepoResponse>>;
    blockUser(
      params: Github.OrgsBlockUserParams,
      callback?: Github.Callback<Github.Response<Github.BlockUserResponse>>
    ): Promise<Github.Response<Github.BlockUserResponse>>;
    checkBlockedUser(
      params: Github.OrgsCheckBlockedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.CheckBlockedUserResponse>
      >
    ): Promise<Github.Response<Github.CheckBlockedUserResponse>>;
    checkMembership(
      params: Github.OrgsCheckMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    checkPublicMembership(
      params: Github.OrgsCheckPublicMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    checkTeamRepo(
      params: Github.OrgsCheckTeamRepoParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    concealMembership(
      params: Github.OrgsConcealMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.ConcealMembershipResponse>
      >
    ): Promise<Github.Response<Github.ConcealMembershipResponse>>;
    convertMemberToOutsideCollaborator(
      params: Github.OrgsConvertMemberToOutsideCollaboratorParams,
      callback?: Github.Callback<
        Github.Response<Github.ConvertMemberToOutsideCollaboratorResponse>
      >
    ): Promise<
      Github.Response<Github.ConvertMemberToOutsideCollaboratorResponse>
    >;
    createHook(
      params: Github.OrgsCreateHookParams,
      callback?: Github.Callback<Github.Response<Github.CreateHookResponse>>
    ): Promise<Github.Response<Github.CreateHookResponse>>;
    createInvitation(
      params: Github.OrgsCreateInvitationParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateInvitationResponse>
      >
    ): Promise<Github.Response<Github.CreateInvitationResponse>>;
    createTeam(
      params: Github.OrgsCreateTeamParams,
      callback?: Github.Callback<Github.Response<Github.CreateTeamResponse>>
    ): Promise<Github.Response<Github.CreateTeamResponse>>;
    deleteHook(
      params: Github.OrgsDeleteHookParams,
      callback?: Github.Callback<Github.Response<Github.DeleteHookResponse>>
    ): Promise<Github.Response<Github.DeleteHookResponse>>;
    deleteTeam(
      params: Github.OrgsDeleteTeamParams,
      callback?: Github.Callback<Github.Response<Github.DeleteTeamResponse>>
    ): Promise<Github.Response<Github.DeleteTeamResponse>>;
    deleteTeamRepo(
      params: Github.OrgsDeleteTeamRepoParams,
      callback?: Github.Callback<Github.Response<Github.DeleteTeamRepoResponse>>
    ): Promise<Github.Response<Github.DeleteTeamRepoResponse>>;
    editHook(
      params: Github.OrgsEditHookParams,
      callback?: Github.Callback<Github.Response<Github.EditHookResponse>>
    ): Promise<Github.Response<Github.EditHookResponse>>;
    editTeam(
      params: Github.OrgsEditTeamParams,
      callback?: Github.Callback<Github.Response<Github.EditTeamResponse>>
    ): Promise<Github.Response<Github.EditTeamResponse>>;
    get(
      params: Github.OrgsGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.OrgsGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getBlockedUsers(
      params: Github.OrgsGetBlockedUsersParams,
      callback?: Github.Callback<
        Github.Response<Github.GetBlockedUsersResponse>
      >
    ): Promise<Github.Response<Github.GetBlockedUsersResponse>>;
    getChildTeams(
      params: Github.OrgsGetChildTeamsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getForUser(
      params: Github.OrgsGetForUserParams,
      callback?: Github.Callback<Github.Response<Github.GetForUserResponse>>
    ): Promise<Github.Response<Github.GetForUserResponse>>;
    getHook(
      params: Github.OrgsGetHookParams,
      callback?: Github.Callback<Github.Response<Github.GetHookResponse>>
    ): Promise<Github.Response<Github.GetHookResponse>>;
    getHooks(
      params: Github.OrgsGetHooksParams,
      callback?: Github.Callback<Github.Response<Github.GetHooksResponse>>
    ): Promise<Github.Response<Github.GetHooksResponse>>;
    getInvitationTeams(
      params: Github.OrgsGetInvitationTeamsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInvitationTeamsResponse>
      >
    ): Promise<Github.Response<Github.GetInvitationTeamsResponse>>;
    getMembers(
      params: Github.OrgsGetMembersParams,
      callback?: Github.Callback<Github.Response<Github.GetMembersResponse>>
    ): Promise<Github.Response<Github.GetMembersResponse>>;
    getOrgMembership(
      params: Github.OrgsGetOrgMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getOutsideCollaborators(
      params: Github.OrgsGetOutsideCollaboratorsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetOutsideCollaboratorsResponse>
      >
    ): Promise<Github.Response<Github.GetOutsideCollaboratorsResponse>>;
    getPendingOrgInvites(
      params: Github.OrgsGetPendingOrgInvitesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetPendingOrgInvitesResponse>
      >
    ): Promise<Github.Response<Github.GetPendingOrgInvitesResponse>>;
    getPendingTeamInvites(
      params: Github.OrgsGetPendingTeamInvitesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetPendingTeamInvitesResponse>
      >
    ): Promise<Github.Response<Github.GetPendingTeamInvitesResponse>>;
    getPublicMembers(
      params: Github.OrgsGetPublicMembersParams,
      callback?: Github.Callback<
        Github.Response<Github.GetPublicMembersResponse>
      >
    ): Promise<Github.Response<Github.GetPublicMembersResponse>>;
    getTeam(
      params: Github.OrgsGetTeamParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamResponse>>
    ): Promise<Github.Response<Github.GetTeamResponse>>;
    getTeamMembers(
      params: Github.OrgsGetTeamMembersParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamMembersResponse>>
    ): Promise<Github.Response<Github.GetTeamMembersResponse>>;
    getTeamMembership(
      params: Github.OrgsGetTeamMembershipParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getTeamRepos(
      params: Github.OrgsGetTeamReposParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamReposResponse>>
    ): Promise<Github.Response<Github.GetTeamReposResponse>>;
    getTeams(
      params: Github.OrgsGetTeamsParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamsResponse>>
    ): Promise<Github.Response<Github.GetTeamsResponse>>;
    pingHook(
      params: Github.OrgsPingHookParams,
      callback?: Github.Callback<Github.Response<Github.PingHookResponse>>
    ): Promise<Github.Response<Github.PingHookResponse>>;
    publicizeMembership(
      params: Github.OrgsPublicizeMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.PublicizeMembershipResponse>
      >
    ): Promise<Github.Response<Github.PublicizeMembershipResponse>>;
    removeMember(
      params: Github.OrgsRemoveMemberParams,
      callback?: Github.Callback<Github.Response<Github.RemoveMemberResponse>>
    ): Promise<Github.Response<Github.RemoveMemberResponse>>;
    removeOrgMembership(
      params: Github.OrgsRemoveOrgMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveOrgMembershipResponse>
      >
    ): Promise<Github.Response<Github.RemoveOrgMembershipResponse>>;
    removeOutsideCollaborator(
      params: Github.OrgsRemoveOutsideCollaboratorParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveOutsideCollaboratorResponse>
      >
    ): Promise<Github.Response<Github.RemoveOutsideCollaboratorResponse>>;
    removeTeamMembership(
      params: Github.OrgsRemoveTeamMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveTeamMembershipResponse>
      >
    ): Promise<Github.Response<Github.RemoveTeamMembershipResponse>>;
    unblockUser(
      params: Github.OrgsUnblockUserParams,
      callback?: Github.Callback<Github.Response<Github.UnblockUserResponse>>
    ): Promise<Github.Response<Github.UnblockUserResponse>>;
    update(
      params: Github.OrgsUpdateParams,
      callback?: Github.Callback<Github.Response<Github.UpdateResponse>>
    ): Promise<Github.Response<Github.UpdateResponse>>;
  };
  projects: {
    addCollaborator(
      params: Github.ProjectsAddCollaboratorParams,
      callback?: Github.Callback<
        Github.Response<Github.AddCollaboratorResponse>
      >
    ): Promise<Github.Response<Github.AddCollaboratorResponse>>;
    createOrgProject(
      params: Github.ProjectsCreateOrgProjectParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateOrgProjectResponse>
      >
    ): Promise<Github.Response<Github.CreateOrgProjectResponse>>;
    createProjectCard(
      params: Github.ProjectsCreateProjectCardParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateProjectCardResponse>
      >
    ): Promise<Github.Response<Github.CreateProjectCardResponse>>;
    createProjectColumn(
      params: Github.ProjectsCreateProjectColumnParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    createRepoProject(
      params: Github.ProjectsCreateRepoProjectParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateRepoProjectResponse>
      >
    ): Promise<Github.Response<Github.CreateRepoProjectResponse>>;
    deleteProject(
      params: Github.ProjectsDeleteProjectParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    deleteProjectCard(
      params: Github.ProjectsDeleteProjectCardParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteProjectCardResponse>
      >
    ): Promise<Github.Response<Github.DeleteProjectCardResponse>>;
    deleteProjectColumn(
      params: Github.ProjectsDeleteProjectColumnParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteProjectColumnResponse>
      >
    ): Promise<Github.Response<Github.DeleteProjectColumnResponse>>;
    getCollaborators(
      params: Github.ProjectsGetCollaboratorsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCollaboratorsResponse>
      >
    ): Promise<Github.Response<Github.GetCollaboratorsResponse>>;
    getOrgProjects(
      params: Github.ProjectsGetOrgProjectsParams,
      callback?: Github.Callback<Github.Response<Github.GetOrgProjectsResponse>>
    ): Promise<Github.Response<Github.GetOrgProjectsResponse>>;
    getProject(
      params: Github.ProjectsGetProjectParams,
      callback?: Github.Callback<Github.Response<Github.GetProjectResponse>>
    ): Promise<Github.Response<Github.GetProjectResponse>>;
    getProjectCard(
      params: Github.ProjectsGetProjectCardParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProjectCards(
      params: Github.ProjectsGetProjectCardsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetProjectCardsResponse>
      >
    ): Promise<Github.Response<Github.GetProjectCardsResponse>>;
    getProjectColumn(
      params: Github.ProjectsGetProjectColumnParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProjectColumns(
      params: Github.ProjectsGetProjectColumnsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetProjectColumnsResponse>
      >
    ): Promise<Github.Response<Github.GetProjectColumnsResponse>>;
    getRepoProjects(
      params: Github.ProjectsGetRepoProjectsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetRepoProjectsResponse>
      >
    ): Promise<Github.Response<Github.GetRepoProjectsResponse>>;
    getUserPermissionLevel(
      params: Github.ProjectsGetUserPermissionLevelParams,
      callback?: Github.Callback<
        Github.Response<Github.GetUserPermissionLevelResponse>
      >
    ): Promise<Github.Response<Github.GetUserPermissionLevelResponse>>;
    moveProjectCard(
      params: Github.ProjectsMoveProjectCardParams,
      callback?: Github.Callback<
        Github.Response<Github.MoveProjectCardResponse>
      >
    ): Promise<Github.Response<Github.MoveProjectCardResponse>>;
    moveProjectColumn(
      params: Github.ProjectsMoveProjectColumnParams,
      callback?: Github.Callback<
        Github.Response<Github.MoveProjectColumnResponse>
      >
    ): Promise<Github.Response<Github.MoveProjectColumnResponse>>;
    removeCollaborator(
      params: Github.ProjectsRemoveCollaboratorParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveCollaboratorResponse>
      >
    ): Promise<Github.Response<Github.RemoveCollaboratorResponse>>;
    updateProject(
      params: Github.ProjectsUpdateProjectParams,
      callback?: Github.Callback<Github.Response<Github.UpdateProjectResponse>>
    ): Promise<Github.Response<Github.UpdateProjectResponse>>;
    updateProjectCard(
      params: Github.ProjectsUpdateProjectCardParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    updateProjectColumn(
      params: Github.ProjectsUpdateProjectColumnParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
  };
  pullRequests: {
    checkMerged(
      params: Github.PullRequestsCheckMergedParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    create(
      params: Github.PullRequestsCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    createComment(
      params: Github.PullRequestsCreateCommentParams,
      callback?: Github.Callback<Github.Response<Github.CreateCommentResponse>>
    ): Promise<Github.Response<Github.CreateCommentResponse>>;
    createCommentReply(
      params: Github.PullRequestsCreateCommentReplyParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateCommentReplyResponse>
      >
    ): Promise<Github.Response<Github.CreateCommentReplyResponse>>;
    createFromIssue(
      params: Github.PullRequestsCreateFromIssueParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateFromIssueResponse>
      >
    ): Promise<Github.Response<Github.CreateFromIssueResponse>>;
    createReview(
      params: Github.PullRequestsCreateReviewParams,
      callback?: Github.Callback<Github.Response<Github.CreateReviewResponse>>
    ): Promise<Github.Response<Github.CreateReviewResponse>>;
    createReviewRequest(
      params: Github.PullRequestsCreateReviewRequestParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateReviewRequestResponse>
      >
    ): Promise<Github.Response<Github.CreateReviewRequestResponse>>;
    deleteComment(
      params: Github.PullRequestsDeleteCommentParams,
      callback?: Github.Callback<Github.Response<Github.DeleteCommentResponse>>
    ): Promise<Github.Response<Github.DeleteCommentResponse>>;
    deletePendingReview(
      params: Github.PullRequestsDeletePendingReviewParams,
      callback?: Github.Callback<
        Github.Response<Github.DeletePendingReviewResponse>
      >
    ): Promise<Github.Response<Github.DeletePendingReviewResponse>>;
    deleteReviewRequest(
      params: Github.PullRequestsDeleteReviewRequestParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteReviewRequestResponse>
      >
    ): Promise<Github.Response<Github.DeleteReviewRequestResponse>>;
    dismissReview(
      params: Github.PullRequestsDismissReviewParams,
      callback?: Github.Callback<Github.Response<Github.DismissReviewResponse>>
    ): Promise<Github.Response<Github.DismissReviewResponse>>;
    editComment(
      params: Github.PullRequestsEditCommentParams,
      callback?: Github.Callback<Github.Response<Github.EditCommentResponse>>
    ): Promise<Github.Response<Github.EditCommentResponse>>;
    get(
      params: Github.PullRequestsGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.PullRequestsGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getComment(
      params: Github.PullRequestsGetCommentParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentResponse>>
    ): Promise<Github.Response<Github.GetCommentResponse>>;
    getComments(
      params: Github.PullRequestsGetCommentsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommentsResponse>>
    ): Promise<Github.Response<Github.GetCommentsResponse>>;
    getCommentsForRepo(
      params: Github.PullRequestsGetCommentsForRepoParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommentsForRepoResponse>
      >
    ): Promise<Github.Response<Github.GetCommentsForRepoResponse>>;
    getCommits(
      params: Github.PullRequestsGetCommitsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommitsResponse>>
    ): Promise<Github.Response<Github.GetCommitsResponse>>;
    getFiles(
      params: Github.PullRequestsGetFilesParams,
      callback?: Github.Callback<Github.Response<Github.GetFilesResponse>>
    ): Promise<Github.Response<Github.GetFilesResponse>>;
    getReview(
      params: Github.PullRequestsGetReviewParams,
      callback?: Github.Callback<Github.Response<Github.GetReviewResponse>>
    ): Promise<Github.Response<Github.GetReviewResponse>>;
    getReviewComments(
      params: Github.PullRequestsGetReviewCommentsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetReviewCommentsResponse>
      >
    ): Promise<Github.Response<Github.GetReviewCommentsResponse>>;
    getReviewRequests(
      params: Github.PullRequestsGetReviewRequestsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetReviewRequestsResponse>
      >
    ): Promise<Github.Response<Github.GetReviewRequestsResponse>>;
    getReviews(
      params: Github.PullRequestsGetReviewsParams,
      callback?: Github.Callback<Github.Response<Github.GetReviewsResponse>>
    ): Promise<Github.Response<Github.GetReviewsResponse>>;
    merge(
      params: Github.PullRequestsMergeParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    submitReview(
      params: Github.PullRequestsSubmitReviewParams,
      callback?: Github.Callback<Github.Response<Github.SubmitReviewResponse>>
    ): Promise<Github.Response<Github.SubmitReviewResponse>>;
    update(
      params: Github.PullRequestsUpdateParams,
      callback?: Github.Callback<Github.Response<Github.UpdateResponse>>
    ): Promise<Github.Response<Github.UpdateResponse>>;
  };
  reactions: {
    createForCommitComment(
      params: Github.ReactionsCreateForCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateForCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.CreateForCommitCommentResponse>>;
    createForIssue(
      params: Github.ReactionsCreateForIssueParams,
      callback?: Github.Callback<Github.Response<Github.CreateForIssueResponse>>
    ): Promise<Github.Response<Github.CreateForIssueResponse>>;
    createForIssueComment(
      params: Github.ReactionsCreateForIssueCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateForIssueCommentResponse>
      >
    ): Promise<Github.Response<Github.CreateForIssueCommentResponse>>;
    createForPullRequestReviewComment(
      params: Github.ReactionsCreateForPullRequestReviewCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateForPullRequestReviewCommentResponse>
      >
    ): Promise<
      Github.Response<Github.CreateForPullRequestReviewCommentResponse>
    >;
    createForTeamDiscussion(
      params: Github.ReactionsCreateForTeamDiscussionParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateForTeamDiscussionResponse>
      >
    ): Promise<Github.Response<Github.CreateForTeamDiscussionResponse>>;
    createForTeamDiscussionComment(
      params: Github.ReactionsCreateForTeamDiscussionCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateForTeamDiscussionCommentResponse>
      >
    ): Promise<Github.Response<Github.CreateForTeamDiscussionCommentResponse>>;
    delete(
      params: Github.ReactionsDeleteParams,
      callback?: Github.Callback<Github.Response<Github.DeleteResponse>>
    ): Promise<Github.Response<Github.DeleteResponse>>;
    getForCommitComment(
      params: Github.ReactionsGetForCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.GetForCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.GetForCommitCommentResponse>>;
    getForIssue(
      params: Github.ReactionsGetForIssueParams,
      callback?: Github.Callback<Github.Response<Github.GetForIssueResponse>>
    ): Promise<Github.Response<Github.GetForIssueResponse>>;
    getForIssueComment(
      params: Github.ReactionsGetForIssueCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.GetForIssueCommentResponse>
      >
    ): Promise<Github.Response<Github.GetForIssueCommentResponse>>;
    getForPullRequestReviewComment(
      params: Github.ReactionsGetForPullRequestReviewCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.GetForPullRequestReviewCommentResponse>
      >
    ): Promise<Github.Response<Github.GetForPullRequestReviewCommentResponse>>;
    getForTeamDiscussion(
      params: Github.ReactionsGetForTeamDiscussionParams,
      callback?: Github.Callback<
        Github.Response<Github.GetForTeamDiscussionResponse>
      >
    ): Promise<Github.Response<Github.GetForTeamDiscussionResponse>>;
    getForTeamDiscussionComment(
      params: Github.ReactionsGetForTeamDiscussionCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.GetForTeamDiscussionCommentResponse>
      >
    ): Promise<Github.Response<Github.GetForTeamDiscussionCommentResponse>>;
  };
  repos: {
    addCollaborator(
      params: Github.ReposAddCollaboratorParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    addDeployKey(
      params: Github.ReposAddDeployKeyParams,
      callback?: Github.Callback<Github.Response<Github.AddDeployKeyResponse>>
    ): Promise<Github.Response<Github.AddDeployKeyResponse>>;
    addProtectedBranchAdminEnforcement(
      params: Github.ReposAddProtectedBranchAdminEnforcementParams,
      callback?: Github.Callback<
        Github.Response<Github.AddProtectedBranchAdminEnforcementResponse>
      >
    ): Promise<
      Github.Response<Github.AddProtectedBranchAdminEnforcementResponse>
    >;
    addProtectedBranchRequiredSignatures(
      params: Github.ReposAddProtectedBranchRequiredSignaturesParams,
      callback?: Github.Callback<
        Github.Response<Github.AddProtectedBranchRequiredSignaturesResponse>
      >
    ): Promise<
      Github.Response<Github.AddProtectedBranchRequiredSignaturesResponse>
    >;
    addProtectedBranchRequiredStatusChecksContexts(
      params: Github.ReposAddProtectedBranchRequiredStatusChecksContextsParams,
      callback?: Github.Callback<
        Github.Response<
          Github.AddProtectedBranchRequiredStatusChecksContextsResponse
        >
      >
    ): Promise<
      Github.Response<
        Github.AddProtectedBranchRequiredStatusChecksContextsResponse
      >
    >;
    addProtectedBranchTeamRestrictions(
      params: Github.ReposAddProtectedBranchTeamRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.AddProtectedBranchTeamRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.AddProtectedBranchTeamRestrictionsResponse>
    >;
    addProtectedBranchUserRestrictions(
      params: Github.ReposAddProtectedBranchUserRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.AddProtectedBranchUserRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.AddProtectedBranchUserRestrictionsResponse>
    >;
    checkCollaborator(
      params: Github.ReposCheckCollaboratorParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    compareCommits(
      params: Github.ReposCompareCommitsParams,
      callback?: Github.Callback<Github.Response<Github.CompareCommitsResponse>>
    ): Promise<Github.Response<Github.CompareCommitsResponse>>;
    create(
      params: Github.ReposCreateParams,
      callback?: Github.Callback<Github.Response<Github.CreateResponse>>
    ): Promise<Github.Response<Github.CreateResponse>>;
    createCommitComment(
      params: Github.ReposCreateCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.CreateCommitCommentResponse>>;
    createDeployment(
      params: Github.ReposCreateDeploymentParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    createDeploymentStatus(
      params: Github.ReposCreateDeploymentStatusParams,
      callback?: Github.Callback<
        Github.Response<Github.CreateDeploymentStatusResponse>
      >
    ): Promise<Github.Response<Github.CreateDeploymentStatusResponse>>;
    createFile(
      params: Github.ReposCreateFileParams,
      callback?: Github.Callback<Github.Response<Github.CreateFileResponse>>
    ): Promise<Github.Response<Github.CreateFileResponse>>;
    createForOrg(
      params: Github.ReposCreateForOrgParams,
      callback?: Github.Callback<Github.Response<Github.CreateForOrgResponse>>
    ): Promise<Github.Response<Github.CreateForOrgResponse>>;
    createHook(
      params: Github.ReposCreateHookParams,
      callback?: Github.Callback<Github.Response<Github.CreateHookResponse>>
    ): Promise<Github.Response<Github.CreateHookResponse>>;
    createRelease(
      params: Github.ReposCreateReleaseParams,
      callback?: Github.Callback<Github.Response<Github.CreateReleaseResponse>>
    ): Promise<Github.Response<Github.CreateReleaseResponse>>;
    createStatus(
      params: Github.ReposCreateStatusParams,
      callback?: Github.Callback<Github.Response<Github.CreateStatusResponse>>
    ): Promise<Github.Response<Github.CreateStatusResponse>>;
    delete(
      params: Github.ReposDeleteParams,
      callback?: Github.Callback<Github.Response<Github.DeleteResponse>>
    ): Promise<Github.Response<Github.DeleteResponse>>;
    deleteAsset(
      params: Github.ReposDeleteAssetParams,
      callback?: Github.Callback<Github.Response<Github.DeleteAssetResponse>>
    ): Promise<Github.Response<Github.DeleteAssetResponse>>;
    deleteCommitComment(
      params: Github.ReposDeleteCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.DeleteCommitCommentResponse>>;
    deleteDeployKey(
      params: Github.ReposDeleteDeployKeyParams,
      callback?: Github.Callback<
        Github.Response<Github.DeleteDeployKeyResponse>
      >
    ): Promise<Github.Response<Github.DeleteDeployKeyResponse>>;
    deleteDownload(
      params: Github.ReposDeleteDownloadParams,
      callback?: Github.Callback<Github.Response<Github.DeleteDownloadResponse>>
    ): Promise<Github.Response<Github.DeleteDownloadResponse>>;
    deleteFile(
      params: Github.ReposDeleteFileParams,
      callback?: Github.Callback<Github.Response<Github.DeleteFileResponse>>
    ): Promise<Github.Response<Github.DeleteFileResponse>>;
    deleteHook(
      params: Github.ReposDeleteHookParams,
      callback?: Github.Callback<Github.Response<Github.DeleteHookResponse>>
    ): Promise<Github.Response<Github.DeleteHookResponse>>;
    deleteInvite(
      params: Github.ReposDeleteInviteParams,
      callback?: Github.Callback<Github.Response<Github.DeleteInviteResponse>>
    ): Promise<Github.Response<Github.DeleteInviteResponse>>;
    deleteRelease(
      params: Github.ReposDeleteReleaseParams,
      callback?: Github.Callback<Github.Response<Github.DeleteReleaseResponse>>
    ): Promise<Github.Response<Github.DeleteReleaseResponse>>;
    edit(
      params: Github.ReposEditParams,
      callback?: Github.Callback<Github.Response<Github.EditResponse>>
    ): Promise<Github.Response<Github.EditResponse>>;
    editAsset(
      params: Github.ReposEditAssetParams,
      callback?: Github.Callback<Github.Response<Github.EditAssetResponse>>
    ): Promise<Github.Response<Github.EditAssetResponse>>;
    editHook(
      params: Github.ReposEditHookParams,
      callback?: Github.Callback<Github.Response<Github.EditHookResponse>>
    ): Promise<Github.Response<Github.EditHookResponse>>;
    editRelease(
      params: Github.ReposEditReleaseParams,
      callback?: Github.Callback<Github.Response<Github.EditReleaseResponse>>
    ): Promise<Github.Response<Github.EditReleaseResponse>>;
    fork(
      params: Github.ReposForkParams,
      callback?: Github.Callback<Github.Response<Github.ForkResponse>>
    ): Promise<Github.Response<Github.ForkResponse>>;
    get(
      params: Github.ReposGetParams,
      callback?: Github.Callback<Github.Response<Github.GetResponse>>
    ): Promise<Github.Response<Github.GetResponse>>;
    getAll(
      params: Github.ReposGetAllParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getAllCommitComments(
      params: Github.ReposGetAllCommitCommentsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetAllCommitCommentsResponse>
      >
    ): Promise<Github.Response<Github.GetAllCommitCommentsResponse>>;
    getArchiveLink(
      params: Github.ReposGetArchiveLinkParams,
      callback?: Github.Callback<Github.Response<Github.GetArchiveLinkResponse>>
    ): Promise<Github.Response<Github.GetArchiveLinkResponse>>;
    getAsset(
      params: Github.ReposGetAssetParams,
      callback?: Github.Callback<Github.Response<Github.GetAssetResponse>>
    ): Promise<Github.Response<Github.GetAssetResponse>>;
    getAssets(
      params: Github.ReposGetAssetsParams,
      callback?: Github.Callback<Github.Response<Github.GetAssetsResponse>>
    ): Promise<Github.Response<Github.GetAssetsResponse>>;
    getBranch(
      params: Github.ReposGetBranchParams,
      callback?: Github.Callback<Github.Response<Github.GetBranchResponse>>
    ): Promise<Github.Response<Github.GetBranchResponse>>;
    getBranchProtection(
      params: Github.ReposGetBranchProtectionParams,
      callback?: Github.Callback<
        Github.Response<Github.GetBranchProtectionResponse>
      >
    ): Promise<Github.Response<Github.GetBranchProtectionResponse>>;
    getBranches(
      params: Github.ReposGetBranchesParams,
      callback?: Github.Callback<Github.Response<Github.GetBranchesResponse>>
    ): Promise<Github.Response<Github.GetBranchesResponse>>;
    getClones(
      params: Github.ReposGetClonesParams,
      callback?: Github.Callback<Github.Response<Github.GetClonesResponse>>
    ): Promise<Github.Response<Github.GetClonesResponse>>;
    getCollaborators(
      params: Github.ReposGetCollaboratorsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCollaboratorsResponse>
      >
    ): Promise<Github.Response<Github.GetCollaboratorsResponse>>;
    getCombinedStatusForRef(
      params: Github.ReposGetCombinedStatusForRefParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCombinedStatusForRefResponse>
      >
    ): Promise<Github.Response<Github.GetCombinedStatusForRefResponse>>;
    getCommit(
      params: Github.ReposGetCommitParams,
      callback?: Github.Callback<Github.Response<Github.GetCommitResponse>>
    ): Promise<Github.Response<Github.GetCommitResponse>>;
    getCommitComment(
      params: Github.ReposGetCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.GetCommitCommentResponse>>;
    getCommitComments(
      params: Github.ReposGetCommitCommentsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommitCommentsResponse>
      >
    ): Promise<Github.Response<Github.GetCommitCommentsResponse>>;
    getCommits(
      params: Github.ReposGetCommitsParams,
      callback?: Github.Callback<Github.Response<Github.GetCommitsResponse>>
    ): Promise<Github.Response<Github.GetCommitsResponse>>;
    getCommunityProfileMetrics(
      params: Github.ReposGetCommunityProfileMetricsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetCommunityProfileMetricsResponse>
      >
    ): Promise<Github.Response<Github.GetCommunityProfileMetricsResponse>>;
    getContent(
      params: Github.ReposGetContentParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getContributors(
      params: Github.ReposGetContributorsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getDeployKey(
      params: Github.ReposGetDeployKeyParams,
      callback?: Github.Callback<Github.Response<Github.GetDeployKeyResponse>>
    ): Promise<Github.Response<Github.GetDeployKeyResponse>>;
    getDeployKeys(
      params: Github.ReposGetDeployKeysParams,
      callback?: Github.Callback<Github.Response<Github.GetDeployKeysResponse>>
    ): Promise<Github.Response<Github.GetDeployKeysResponse>>;
    getDeployment(
      params: Github.ReposGetDeploymentParams,
      callback?: Github.Callback<Github.Response<Github.GetDeploymentResponse>>
    ): Promise<Github.Response<Github.GetDeploymentResponse>>;
    getDeploymentStatus(
      params: Github.ReposGetDeploymentStatusParams,
      callback?: Github.Callback<
        Github.Response<Github.GetDeploymentStatusResponse>
      >
    ): Promise<Github.Response<Github.GetDeploymentStatusResponse>>;
    getDeploymentStatuses(
      params: Github.ReposGetDeploymentStatusesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetDeploymentStatusesResponse>
      >
    ): Promise<Github.Response<Github.GetDeploymentStatusesResponse>>;
    getDeployments(
      params: Github.ReposGetDeploymentsParams,
      callback?: Github.Callback<Github.Response<Github.GetDeploymentsResponse>>
    ): Promise<Github.Response<Github.GetDeploymentsResponse>>;
    getDownload(
      params: Github.ReposGetDownloadParams,
      callback?: Github.Callback<Github.Response<Github.GetDownloadResponse>>
    ): Promise<Github.Response<Github.GetDownloadResponse>>;
    getDownloads(
      params: Github.ReposGetDownloadsParams,
      callback?: Github.Callback<Github.Response<Github.GetDownloadsResponse>>
    ): Promise<Github.Response<Github.GetDownloadsResponse>>;
    getForOrg(
      params: Github.ReposGetForOrgParams,
      callback?: Github.Callback<Github.Response<Github.GetForOrgResponse>>
    ): Promise<Github.Response<Github.GetForOrgResponse>>;
    getForUser(
      params: Github.ReposGetForUserParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getForks(
      params: Github.ReposGetForksParams,
      callback?: Github.Callback<Github.Response<Github.GetForksResponse>>
    ): Promise<Github.Response<Github.GetForksResponse>>;
    getHook(
      params: Github.ReposGetHookParams,
      callback?: Github.Callback<Github.Response<Github.GetHookResponse>>
    ): Promise<Github.Response<Github.GetHookResponse>>;
    getHooks(
      params: Github.ReposGetHooksParams,
      callback?: Github.Callback<Github.Response<Github.GetHooksResponse>>
    ): Promise<Github.Response<Github.GetHooksResponse>>;
    getInvites(
      params: Github.ReposGetInvitesParams,
      callback?: Github.Callback<Github.Response<Github.GetInvitesResponse>>
    ): Promise<Github.Response<Github.GetInvitesResponse>>;
    getLanguages(
      params: Github.ReposGetLanguagesParams,
      callback?: Github.Callback<Github.Response<Github.GetLanguagesResponse>>
    ): Promise<Github.Response<Github.GetLanguagesResponse>>;
    getLatestPagesBuild(
      params: Github.ReposGetLatestPagesBuildParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getLatestRelease(
      params: Github.ReposGetLatestReleaseParams,
      callback?: Github.Callback<
        Github.Response<Github.GetLatestReleaseResponse>
      >
    ): Promise<Github.Response<Github.GetLatestReleaseResponse>>;
    getPages(
      params: Github.ReposGetPagesParams,
      callback?: Github.Callback<Github.Response<Github.GetPagesResponse>>
    ): Promise<Github.Response<Github.GetPagesResponse>>;
    getPagesBuild(
      params: Github.ReposGetPagesBuildParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getPagesBuilds(
      params: Github.ReposGetPagesBuildsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getPaths(
      params: Github.ReposGetPathsParams,
      callback?: Github.Callback<Github.Response<Github.GetPathsResponse>>
    ): Promise<Github.Response<Github.GetPathsResponse>>;
    getProtectedBranchAdminEnforcement(
      params: Github.ReposGetProtectedBranchAdminEnforcementParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProtectedBranchPullRequestReviewEnforcement(
      params: Github.ReposGetProtectedBranchPullRequestReviewEnforcementParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProtectedBranchRequiredSignatures(
      params: Github.ReposGetProtectedBranchRequiredSignaturesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetProtectedBranchRequiredSignaturesResponse>
      >
    ): Promise<
      Github.Response<Github.GetProtectedBranchRequiredSignaturesResponse>
    >;
    getProtectedBranchRequiredStatusChecks(
      params: Github.ReposGetProtectedBranchRequiredStatusChecksParams,
      callback?: Github.Callback<
        Github.Response<Github.GetProtectedBranchRequiredStatusChecksResponse>
      >
    ): Promise<
      Github.Response<Github.GetProtectedBranchRequiredStatusChecksResponse>
    >;
    getProtectedBranchRequiredStatusChecksContexts(
      params: Github.ReposGetProtectedBranchRequiredStatusChecksContextsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProtectedBranchRestrictions(
      params: Github.ReposGetProtectedBranchRestrictionsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getProtectedBranchTeamRestrictions(
      params: Github.ReposGetProtectedBranchTeamRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetProtectedBranchTeamRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.GetProtectedBranchTeamRestrictionsResponse>
    >;
    getProtectedBranchUserRestrictions(
      params: Github.ReposGetProtectedBranchUserRestrictionsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getPublic(
      params: Github.ReposGetPublicParams,
      callback?: Github.Callback<Github.Response<Github.GetPublicResponse>>
    ): Promise<Github.Response<Github.GetPublicResponse>>;
    getReadme(
      params: Github.ReposGetReadmeParams,
      callback?: Github.Callback<Github.Response<Github.GetReadmeResponse>>
    ): Promise<Github.Response<Github.GetReadmeResponse>>;
    getReferrers(
      params: Github.ReposGetReferrersParams,
      callback?: Github.Callback<Github.Response<Github.GetReferrersResponse>>
    ): Promise<Github.Response<Github.GetReferrersResponse>>;
    getRelease(
      params: Github.ReposGetReleaseParams,
      callback?: Github.Callback<Github.Response<Github.GetReleaseResponse>>
    ): Promise<Github.Response<Github.GetReleaseResponse>>;
    getReleaseByTag(
      params: Github.ReposGetReleaseByTagParams,
      callback?: Github.Callback<
        Github.Response<Github.GetReleaseByTagResponse>
      >
    ): Promise<Github.Response<Github.GetReleaseByTagResponse>>;
    getReleases(
      params: Github.ReposGetReleasesParams,
      callback?: Github.Callback<Github.Response<Github.GetReleasesResponse>>
    ): Promise<Github.Response<Github.GetReleasesResponse>>;
    getShaOfCommitRef(
      params: Github.ReposGetShaOfCommitRefParams,
      callback?: Github.Callback<
        Github.Response<Github.GetShaOfCommitRefResponse>
      >
    ): Promise<Github.Response<Github.GetShaOfCommitRefResponse>>;
    getStatsCodeFrequency(
      params: Github.ReposGetStatsCodeFrequencyParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatsCodeFrequencyResponse>
      >
    ): Promise<Github.Response<Github.GetStatsCodeFrequencyResponse>>;
    getStatsCommitActivity(
      params: Github.ReposGetStatsCommitActivityParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatsCommitActivityResponse>
      >
    ): Promise<Github.Response<Github.GetStatsCommitActivityResponse>>;
    getStatsContributors(
      params: Github.ReposGetStatsContributorsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatsContributorsResponse>
      >
    ): Promise<Github.Response<Github.GetStatsContributorsResponse>>;
    getStatsParticipation(
      params: Github.ReposGetStatsParticipationParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatsParticipationResponse>
      >
    ): Promise<Github.Response<Github.GetStatsParticipationResponse>>;
    getStatsPunchCard(
      params: Github.ReposGetStatsPunchCardParams,
      callback?: Github.Callback<
        Github.Response<Github.GetStatsPunchCardResponse>
      >
    ): Promise<Github.Response<Github.GetStatsPunchCardResponse>>;
    getStatuses(
      params: Github.ReposGetStatusesParams,
      callback?: Github.Callback<Github.Response<Github.GetStatusesResponse>>
    ): Promise<Github.Response<Github.GetStatusesResponse>>;
    getTags(
      params: Github.ReposGetTagsParams,
      callback?: Github.Callback<Github.Response<Github.GetTagsResponse>>
    ): Promise<Github.Response<Github.GetTagsResponse>>;
    getTeams(
      params: Github.ReposGetTeamsParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamsResponse>>
    ): Promise<Github.Response<Github.GetTeamsResponse>>;
    getTopics(
      params: Github.ReposGetTopicsParams,
      callback?: Github.Callback<Github.Response<Github.GetTopicsResponse>>
    ): Promise<Github.Response<Github.GetTopicsResponse>>;
    getViews(
      params: Github.ReposGetViewsParams,
      callback?: Github.Callback<Github.Response<Github.GetViewsResponse>>
    ): Promise<Github.Response<Github.GetViewsResponse>>;
    merge(
      params: Github.ReposMergeParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    pingHook(
      params: Github.ReposPingHookParams,
      callback?: Github.Callback<Github.Response<Github.PingHookResponse>>
    ): Promise<Github.Response<Github.PingHookResponse>>;
    removeBranchProtection(
      params: Github.ReposRemoveBranchProtectionParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveBranchProtectionResponse>
      >
    ): Promise<Github.Response<Github.RemoveBranchProtectionResponse>>;
    removeCollaborator(
      params: Github.ReposRemoveCollaboratorParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveCollaboratorResponse>
      >
    ): Promise<Github.Response<Github.RemoveCollaboratorResponse>>;
    removeProtectedBranchAdminEnforcement(
      params: Github.ReposRemoveProtectedBranchAdminEnforcementParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    removeProtectedBranchPullRequestReviewEnforcement(
      params: Github.ReposRemoveProtectedBranchPullRequestReviewEnforcementParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    removeProtectedBranchRequiredSignatures(
      params: Github.ReposRemoveProtectedBranchRequiredSignaturesParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    removeProtectedBranchRequiredStatusChecks(
      params: Github.ReposRemoveProtectedBranchRequiredStatusChecksParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    removeProtectedBranchRequiredStatusChecksContexts(
      params: Github.ReposRemoveProtectedBranchRequiredStatusChecksContextsParams,
      callback?: Github.Callback<
        Github.Response<
          Github.RemoveProtectedBranchRequiredStatusChecksContextsResponse
        >
      >
    ): Promise<
      Github.Response<
        Github.RemoveProtectedBranchRequiredStatusChecksContextsResponse
      >
    >;
    removeProtectedBranchRestrictions(
      params: Github.ReposRemoveProtectedBranchRestrictionsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    removeProtectedBranchTeamRestrictions(
      params: Github.ReposRemoveProtectedBranchTeamRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveProtectedBranchTeamRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.RemoveProtectedBranchTeamRestrictionsResponse>
    >;
    removeProtectedBranchUserRestrictions(
      params: Github.ReposRemoveProtectedBranchUserRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveProtectedBranchUserRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.RemoveProtectedBranchUserRestrictionsResponse>
    >;
    replaceProtectedBranchRequiredStatusChecksContexts(
      params: Github.ReposReplaceProtectedBranchRequiredStatusChecksContextsParams,
      callback?: Github.Callback<
        Github.Response<
          Github.ReplaceProtectedBranchRequiredStatusChecksContextsResponse
        >
      >
    ): Promise<
      Github.Response<
        Github.ReplaceProtectedBranchRequiredStatusChecksContextsResponse
      >
    >;
    replaceProtectedBranchTeamRestrictions(
      params: Github.ReposReplaceProtectedBranchTeamRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.ReplaceProtectedBranchTeamRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.ReplaceProtectedBranchTeamRestrictionsResponse>
    >;
    replaceProtectedBranchUserRestrictions(
      params: Github.ReposReplaceProtectedBranchUserRestrictionsParams,
      callback?: Github.Callback<
        Github.Response<Github.ReplaceProtectedBranchUserRestrictionsResponse>
      >
    ): Promise<
      Github.Response<Github.ReplaceProtectedBranchUserRestrictionsResponse>
    >;
    replaceTopics(
      params: Github.ReposReplaceTopicsParams,
      callback?: Github.Callback<Github.Response<Github.ReplaceTopicsResponse>>
    ): Promise<Github.Response<Github.ReplaceTopicsResponse>>;
    requestPageBuild(
      params: Github.ReposRequestPageBuildParams,
      callback?: Github.Callback<
        Github.Response<Github.RequestPageBuildResponse>
      >
    ): Promise<Github.Response<Github.RequestPageBuildResponse>>;
    reviewUserPermissionLevel(
      params: Github.ReposReviewUserPermissionLevelParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    testHook(
      params: Github.ReposTestHookParams,
      callback?: Github.Callback<Github.Response<Github.TestHookResponse>>
    ): Promise<Github.Response<Github.TestHookResponse>>;
    transfer(
      params: Github.ReposTransferParams,
      callback?: Github.Callback<Github.Response<Github.TransferResponse>>
    ): Promise<Github.Response<Github.TransferResponse>>;
    updateBranchProtection(
      params: Github.ReposUpdateBranchProtectionParams,
      callback?: Github.Callback<
        Github.Response<Github.UpdateBranchProtectionResponse>
      >
    ): Promise<Github.Response<Github.UpdateBranchProtectionResponse>>;
    updateCommitComment(
      params: Github.ReposUpdateCommitCommentParams,
      callback?: Github.Callback<
        Github.Response<Github.UpdateCommitCommentResponse>
      >
    ): Promise<Github.Response<Github.UpdateCommitCommentResponse>>;
    updateFile(
      params: Github.ReposUpdateFileParams,
      callback?: Github.Callback<Github.Response<Github.UpdateFileResponse>>
    ): Promise<Github.Response<Github.UpdateFileResponse>>;
    updateInvite(
      params: Github.ReposUpdateInviteParams,
      callback?: Github.Callback<Github.Response<Github.UpdateInviteResponse>>
    ): Promise<Github.Response<Github.UpdateInviteResponse>>;
    updateProtectedBranchPullRequestReviewEnforcement(
      params: Github.ReposUpdateProtectedBranchPullRequestReviewEnforcementParams,
      callback?: Github.Callback<
        Github.Response<
          Github.UpdateProtectedBranchPullRequestReviewEnforcementResponse
        >
      >
    ): Promise<
      Github.Response<
        Github.UpdateProtectedBranchPullRequestReviewEnforcementResponse
      >
    >;
    updateProtectedBranchRequiredStatusChecks(
      params: Github.ReposUpdateProtectedBranchRequiredStatusChecksParams,
      callback?: Github.Callback<
        Github.Response<
          Github.UpdateProtectedBranchRequiredStatusChecksResponse
        >
      >
    ): Promise<
      Github.Response<Github.UpdateProtectedBranchRequiredStatusChecksResponse>
    >;
    uploadAsset(
      params: Github.ReposUploadAssetParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
  };
  search: {
    code(
      params: Github.SearchCodeParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    commits(
      params: Github.SearchCommitsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    issues(
      params: Github.SearchIssuesParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    labels(
      params: Github.SearchLabelsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    repos(
      params: Github.SearchReposParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    topics(
      params: Github.SearchTopicsParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    users(
      params: Github.SearchUsersParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
  };
  users: {
    acceptRepoInvite(
      params: Github.UsersAcceptRepoInviteParams,
      callback?: Github.Callback<
        Github.Response<Github.AcceptRepoInviteResponse>
      >
    ): Promise<Github.Response<Github.AcceptRepoInviteResponse>>;
    addEmails(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.AddEmailsResponse>>
    ): Promise<Github.Response<Github.AddEmailsResponse>>;
    addRepoToInstallation(
      params: Github.UsersAddRepoToInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.AddRepoToInstallationResponse>
      >
    ): Promise<Github.Response<Github.AddRepoToInstallationResponse>>;
    blockUser(
      params: Github.UsersBlockUserParams,
      callback?: Github.Callback<Github.Response<Github.BlockUserResponse>>
    ): Promise<Github.Response<Github.BlockUserResponse>>;
    checkBlockedUser(
      params: Github.UsersCheckBlockedUserParams,
      callback?: Github.Callback<
        Github.Response<Github.CheckBlockedUserResponse>
      >
    ): Promise<Github.Response<Github.CheckBlockedUserResponse>>;
    checkFollowing(
      params: Github.UsersCheckFollowingParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    checkIfOneFollowersOther(
      params: Github.UsersCheckIfOneFollowersOtherParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    createGpgKey(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.CreateGpgKeyResponse>>
    ): Promise<Github.Response<Github.CreateGpgKeyResponse>>;
    createKey(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.CreateKeyResponse>>
    ): Promise<Github.Response<Github.CreateKeyResponse>>;
    declineRepoInvite(
      params: Github.UsersDeclineRepoInviteParams,
      callback?: Github.Callback<
        Github.Response<Github.DeclineRepoInviteResponse>
      >
    ): Promise<Github.Response<Github.DeclineRepoInviteResponse>>;
    deleteEmails(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.Response<Github.DeleteEmailsResponse>>
    ): Promise<Github.Response<Github.DeleteEmailsResponse>>;
    deleteGpgKey(
      params: Github.UsersDeleteGpgKeyParams,
      callback?: Github.Callback<Github.Response<Github.DeleteGpgKeyResponse>>
    ): Promise<Github.Response<Github.DeleteGpgKeyResponse>>;
    deleteKey(
      params: Github.UsersDeleteKeyParams,
      callback?: Github.Callback<Github.Response<Github.DeleteKeyResponse>>
    ): Promise<Github.Response<Github.DeleteKeyResponse>>;
    editOrgMembership(
      params: Github.UsersEditOrgMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.EditOrgMembershipResponse>
      >
    ): Promise<Github.Response<Github.EditOrgMembershipResponse>>;
    followUser(
      params: Github.UsersFollowUserParams,
      callback?: Github.Callback<Github.Response<Github.FollowUserResponse>>
    ): Promise<Github.Response<Github.FollowUserResponse>>;
    get(
      params: Github.EmptyParams,
      callback?: Github.Callback<Github.AnyResponse>
    ): Promise<Github.AnyResponse>;
    getAll(
      params: Github.UsersGetAllParams,
      callback?: Github.Callback<Github.Response<Github.GetAllResponse>>
    ): Promise<Github.Response<Github.GetAllResponse>>;
    getBlockedUsers(
      params: Github.EmptyParams,
      callback?: Github.Callback<
        Github.Response<Github.GetBlockedUsersResponse>
      >
    ): Promise<Github.Response<Github.GetBlockedUsersResponse>>;
    getContextForUser(
      params: Github.UsersGetContextForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetContextForUserResponse>
      >
    ): Promise<Github.Response<Github.GetContextForUserResponse>>;
    getEmails(
      params: Github.UsersGetEmailsParams,
      callback?: Github.Callback<Github.Response<Github.GetEmailsResponse>>
    ): Promise<Github.Response<Github.GetEmailsResponse>>;
    getFollowers(
      params: Github.UsersGetFollowersParams,
      callback?: Github.Callback<Github.Response<Github.GetFollowersResponse>>
    ): Promise<Github.Response<Github.GetFollowersResponse>>;
    getFollowersForUser(
      params: Github.UsersGetFollowersForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetFollowersForUserResponse>
      >
    ): Promise<Github.Response<Github.GetFollowersForUserResponse>>;
    getFollowing(
      params: Github.UsersGetFollowingParams,
      callback?: Github.Callback<Github.Response<Github.GetFollowingResponse>>
    ): Promise<Github.Response<Github.GetFollowingResponse>>;
    getFollowingForUser(
      params: Github.UsersGetFollowingForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetFollowingForUserResponse>
      >
    ): Promise<Github.Response<Github.GetFollowingForUserResponse>>;
    getForUser(
      params: Github.UsersGetForUserParams,
      callback?: Github.Callback<Github.Response<Github.GetForUserResponse>>
    ): Promise<Github.Response<Github.GetForUserResponse>>;
    getGpgKey(
      params: Github.UsersGetGpgKeyParams,
      callback?: Github.Callback<Github.Response<Github.GetGpgKeyResponse>>
    ): Promise<Github.Response<Github.GetGpgKeyResponse>>;
    getGpgKeys(
      params: Github.UsersGetGpgKeysParams,
      callback?: Github.Callback<Github.Response<Github.GetGpgKeysResponse>>
    ): Promise<Github.Response<Github.GetGpgKeysResponse>>;
    getGpgKeysForUser(
      params: Github.UsersGetGpgKeysForUserParams,
      callback?: Github.Callback<
        Github.Response<Github.GetGpgKeysForUserResponse>
      >
    ): Promise<Github.Response<Github.GetGpgKeysForUserResponse>>;
    getInstallationRepos(
      params: Github.UsersGetInstallationReposParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInstallationReposResponse>
      >
    ): Promise<Github.Response<Github.GetInstallationReposResponse>>;
    getInstallations(
      params: Github.UsersGetInstallationsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetInstallationsResponse>
      >
    ): Promise<Github.Response<Github.GetInstallationsResponse>>;
    getKey(
      params: Github.UsersGetKeyParams,
      callback?: Github.Callback<Github.Response<Github.GetKeyResponse>>
    ): Promise<Github.Response<Github.GetKeyResponse>>;
    getKeys(
      params: Github.UsersGetKeysParams,
      callback?: Github.Callback<Github.Response<Github.GetKeysResponse>>
    ): Promise<Github.Response<Github.GetKeysResponse>>;
    getKeysForUser(
      params: Github.UsersGetKeysForUserParams,
      callback?: Github.Callback<Github.Response<Github.GetKeysForUserResponse>>
    ): Promise<Github.Response<Github.GetKeysForUserResponse>>;
    getMarketplacePurchases(
      params: Github.UsersGetMarketplacePurchasesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplacePurchasesResponse>
      >
    ): Promise<Github.Response<Github.GetMarketplacePurchasesResponse>>;
    getMarketplaceStubbedPurchases(
      params: Github.UsersGetMarketplaceStubbedPurchasesParams,
      callback?: Github.Callback<
        Github.Response<Github.GetMarketplaceStubbedPurchasesResponse>
      >
    ): Promise<Github.Response<Github.GetMarketplaceStubbedPurchasesResponse>>;
    getOrgMembership(
      params: Github.UsersGetOrgMembershipParams,
      callback?: Github.Callback<
        Github.Response<Github.GetOrgMembershipResponse>
      >
    ): Promise<Github.Response<Github.GetOrgMembershipResponse>>;
    getOrgMemberships(
      params: Github.UsersGetOrgMembershipsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetOrgMembershipsResponse>
      >
    ): Promise<Github.Response<Github.GetOrgMembershipsResponse>>;
    getOrgs(
      params: Github.UsersGetOrgsParams,
      callback?: Github.Callback<Github.Response<Github.GetOrgsResponse>>
    ): Promise<Github.Response<Github.GetOrgsResponse>>;
    getPublicEmails(
      params: Github.UsersGetPublicEmailsParams,
      callback?: Github.Callback<
        Github.Response<Github.GetPublicEmailsResponse>
      >
    ): Promise<Github.Response<Github.GetPublicEmailsResponse>>;
    getRepoInvites(
      params: Github.UsersGetRepoInvitesParams,
      callback?: Github.Callback<Github.Response<Github.GetRepoInvitesResponse>>
    ): Promise<Github.Response<Github.GetRepoInvitesResponse>>;
    getTeams(
      params: Github.UsersGetTeamsParams,
      callback?: Github.Callback<Github.Response<Github.GetTeamsResponse>>
    ): Promise<Github.Response<Github.GetTeamsResponse>>;
    removeRepoFromInstallation(
      params: Github.UsersRemoveRepoFromInstallationParams,
      callback?: Github.Callback<
        Github.Response<Github.RemoveRepoFromInstallationResponse>
      >
    ): Promise<Github.Response<Github.RemoveRepoFromInstallationResponse>>;
    togglePrimaryEmailVisibility(
      params: Github.UsersTogglePrimaryEmailVisibilityParams,
      callback?: Github.Callback<
        Github.Response<Github.TogglePrimaryEmailVisibilityResponse>
      >
    ): Promise<Github.Response<Github.TogglePrimaryEmailVisibilityResponse>>;
    unblockUser(
      params: Github.UsersUnblockUserParams,
      callback?: Github.Callback<Github.Response<Github.UnblockUserResponse>>
    ): Promise<Github.Response<Github.UnblockUserResponse>>;
    unfollowUser(
      params: Github.UsersUnfollowUserParams,
      callback?: Github.Callback<Github.Response<Github.UnfollowUserResponse>>
    ): Promise<Github.Response<Github.UnfollowUserResponse>>;
    update(
      params: Github.UsersUpdateParams,
      callback?: Github.Callback<Github.Response<Github.UpdateResponse>>
    ): Promise<Github.Response<Github.UpdateResponse>>;
  };
}

export = Github;
