import * as vscode from "vscode";
/**
 * Entrypoint for access to the IntelliCode API from another extension. If you are packaged as part of
 * IntelliCode, do not call this.
 *
 * @returns an instance of the IntelliCode API, or null if the IntelliCode extension
 * is not installed or failed to activate.
 *
 * @example To access the IntelliCode API from another extension:
 *
 *     import * as vsi from 'vs-intellicode-api';
 *     const intellicode = await vsi.getApiAsync(extensionContext);
 */
export declare function getApiAsync(currentExtensionContext: vscode.ExtensionContext): Thenable<IIntelliCode | null>;
export interface IIntelliCodeExtension {
    getApiAsync(callingExtensionContext: vscode.ExtensionContext, requestedApiVersion: number): Promise<IIntelliCode | null>;
}
export interface IIntelliCode {
    ModelAcquisitionService: IModelAcquisitionService;
}
export interface IModelAcquisitionService {
    getModelProvider(analyzerName: string, modelName: string, minSchemaVersion: number, maxSchemaVersion: number, tags: string[]): IModelProvider;
}
export interface IModelProvider {
    modelUpdatedCallback: (model: IModelDescriptor) => void;
    getModelAsync(repoUri: string | undefined): Promise<IModelDescriptor | undefined>;
}
export interface IModelDescriptor {
    modelPath: string;
    tags: string[];
    repoUri: string | undefined;
    schemaVersion: number;
}
export interface IRequestedConfigSetting {
    scopeName: string;
    settingName: string;
    desiredValue: any;
    required: boolean;
    scopesToTry: vscode.ConfigurationTarget[];
    reloadWindowAfterApplying: boolean;
    notificationMessage: string;
    actionLabel: string;
}
export interface IIntelliCodeLanguageSupport {
    getRequestedConfig(): IRequestedConfigSetting[];
    activate(api: IIntelliCode, logger: (str: string) => void): Promise<void>;
}
