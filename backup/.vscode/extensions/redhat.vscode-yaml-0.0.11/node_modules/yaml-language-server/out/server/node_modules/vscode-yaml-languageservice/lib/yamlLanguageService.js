(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "vscode-languageserver-types", "vscode-json-languageservice/lib/services/jsonCompletion", "vscode-json-languageservice/lib/services/jsonHover", "vscode-json-languageservice/lib/services/jsonValidation", "vscode-json-languageservice/lib/services/jsonDocumentSymbols", "./parser/yamlParser", "./services/yamlCompletion", "./services/yamlFormatter", "vscode-json-languageservice/lib/services/configuration", "vscode-json-languageservice/lib/services/jsonSchemaService"], factory);
    }
})(function (require, exports) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Adam Voss. All rights reserved.
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    const vscode_languageserver_types_1 = require("vscode-languageserver-types");
    exports.TextDocument = vscode_languageserver_types_1.TextDocument;
    exports.Position = vscode_languageserver_types_1.Position;
    exports.CompletionItem = vscode_languageserver_types_1.CompletionItem;
    exports.CompletionList = vscode_languageserver_types_1.CompletionList;
    exports.Range = vscode_languageserver_types_1.Range;
    exports.SymbolInformation = vscode_languageserver_types_1.SymbolInformation;
    exports.Diagnostic = vscode_languageserver_types_1.Diagnostic;
    exports.TextEdit = vscode_languageserver_types_1.TextEdit;
    exports.FormattingOptions = vscode_languageserver_types_1.FormattingOptions;
    exports.MarkedString = vscode_languageserver_types_1.MarkedString;
    const jsonCompletion_1 = require("vscode-json-languageservice/lib/services/jsonCompletion");
    const jsonHover_1 = require("vscode-json-languageservice/lib/services/jsonHover");
    const jsonValidation_1 = require("vscode-json-languageservice/lib/services/jsonValidation");
    const jsonDocumentSymbols_1 = require("vscode-json-languageservice/lib/services/jsonDocumentSymbols");
    const yamlParser_1 = require("./parser/yamlParser");
    const yamlCompletion_1 = require("./services/yamlCompletion");
    const yamlFormatter_1 = require("./services/yamlFormatter");
    const configuration_1 = require("vscode-json-languageservice/lib/services/configuration");
    const jsonSchemaService_1 = require("vscode-json-languageservice/lib/services/jsonSchemaService");
    function getLanguageService(params) {
        let promise = params.promiseConstructor || Promise;
        let jsonSchemaService = new jsonSchemaService_1.JSONSchemaService(params.schemaRequestService, params.workspaceContext, promise);
        jsonSchemaService.setSchemaContributions(configuration_1.schemaContributions);
        let jsonCompletion = new jsonCompletion_1.JSONCompletion(jsonSchemaService, params.contributions, promise);
        jsonCompletion['isInComment'] = yamlCompletion_1.isInComment.bind(jsonCompletion);
        let jsonHover = new jsonHover_1.JSONHover(jsonSchemaService, params.contributions, promise);
        let jsonDocumentSymbols = new jsonDocumentSymbols_1.JSONDocumentSymbols(jsonSchemaService);
        let jsonValidation = new jsonValidation_1.JSONValidation(jsonSchemaService, promise);
        function doValidation(textDocument, yamlDocument) {
            var validate = jsonValidation.doValidation.bind(jsonValidation, textDocument);
            const validationResults = yamlDocument.documents.map(d => validate(d));
            const resultsPromise = promise.all(validationResults);
            return resultsPromise.then(res => [].concat(...res));
        }
        return {
            configure: (settings) => {
                jsonSchemaService.clearExternalSchemas();
                if (settings.schemas) {
                    settings.schemas.forEach(settings => {
                        jsonSchemaService.registerExternalSchema(settings.uri, settings.fileMatch, settings.schema);
                    });
                }
                ;
                jsonValidation.configure(settings);
            },
            resetSchema: (uri) => jsonSchemaService.onResourceChange(uri),
            doValidation: doValidation,
            parseYAMLDocument: (document) => yamlParser_1.parse(document.getText()),
            doResolve: jsonCompletion.doResolve.bind(jsonCompletion),
            doComplete: jsonCompletion.doComplete.bind(jsonCompletion),
            findDocumentSymbols: jsonDocumentSymbols.findDocumentSymbols.bind(jsonDocumentSymbols),
            doHover: jsonHover.doHover.bind(jsonHover),
            format: yamlFormatter_1.format
        };
    }
    exports.getLanguageService = getLanguageService;
});
//# sourceMappingURL=yamlLanguageService.js.map