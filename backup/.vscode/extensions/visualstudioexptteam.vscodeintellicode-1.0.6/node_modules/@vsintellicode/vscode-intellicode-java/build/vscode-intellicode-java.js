"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const vscode = __importStar(require("vscode"));
const javaCommand = __importStar(require("./command"));
const minModelSchemaVersion = 1;
const maxModelSchemaVersion = 1;
let useLocalModel = false;
class JavaSupport {
    getRequestedConfig() {
        if (arguments.length > 0) {
            useLocalModel = arguments[1];
        }
        return [{
                scopeName: "vsintellicode",
                settingName: "java.completionsEnabled",
                desiredValue: true,
                required: true,
                scopesToTry: [
                    vscode.ConfigurationTarget.Global,
                    vscode.ConfigurationTarget.Workspace,
                    vscode.ConfigurationTarget.WorkspaceFolder,
                ],
                reloadWindowAfterApplying: false,
                notificationMessage: "IntelliCode Java support requires you to enable it.",
                actionLabel: "Enable it and Reload Window",
            }];
    }
    async activate(api, logger) {
        if (useLocalModel) {
            await javaCommand.registerCompletionItemProvider(path.join(__dirname, "../test/resources/MODEL"));
        }
        else {
            const model = await api.ModelAcquisitionService
                .getModelProvider("JavaIntellicode", "Completions", minModelSchemaVersion, maxModelSchemaVersion, [])
                .getModelAsync(undefined);
            if (model === undefined) {
                logger("No model available for Java, cannot continue.");
                return Promise.resolve();
            }
            const modelJson = JSON.stringify(model);
            logger(`vs-intellicode-java was passed a model: ${modelJson}.`);
            await javaCommand.registerCompletionItemProvider(model.modelPath);
            logger("Enabled IntelliCode for Java.");
            return Promise.resolve();
        }
    }
}
exports.JavaSupport = JavaSupport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnNjb2RlLWludGVsbGljb2RlLWphdmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdnNjb2RlLWludGVsbGljb2RlLWphdmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0EsMkNBQTZCO0FBQzdCLCtDQUFpQztBQUNqQyx1REFBeUM7QUFFekMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUE7QUFDL0IsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUE7QUFFL0IsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBRTFCO0lBRVcsa0JBQWtCO1FBQ3JCLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdEIsYUFBYSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sQ0FBQztnQkFDSixTQUFTLEVBQUUsZUFBZTtnQkFDMUIsV0FBVyxFQUFFLHlCQUF5QjtnQkFDdEMsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFdBQVcsRUFBRTtvQkFDVCxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTTtvQkFDakMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7b0JBQ3BDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlO2lCQUM3QztnQkFDRCx5QkFBeUIsRUFBRSxLQUFLO2dCQUNoQyxtQkFBbUIsRUFBRSxxREFBcUQ7Z0JBQzFFLFdBQVcsRUFBRSw2QkFBNkI7YUFDN0MsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBcUIsRUFBRSxNQUE2QjtRQUN0RSxJQUFJLGFBQWEsRUFBRTtZQUNmLE1BQU0sV0FBVyxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHlCQUF5QixDQUFDLENBQUMsQ0FBQztTQUNyRzthQUFNO1lBQ0gsTUFBTSxLQUFLLEdBQXFDLE1BQU0sR0FBRyxDQUFDLHVCQUF1QjtpQkFDNUUsZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLEVBQUUsQ0FBQztpQkFDcEcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTlCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtnQkFDckIsTUFBTSxDQUFDLCtDQUErQyxDQUFDLENBQUM7Z0JBQ3hELE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzVCO1lBRUQsTUFBTSxTQUFTLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsMkNBQTJDLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFFaEUsTUFBTSxXQUFXLENBQUMsOEJBQThCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztDQUNKO0FBN0NELGtDQTZDQyJ9