/*! Copyright (c) Microsoft Corporation. All rights reserved. */
import * as vscode from "vscode";
export declare function getApiAsync(currentExtensionContext: vscode.ExtensionContext): Thenable<IIntelliCode | null>;
export interface IIntelliCodeExtension {
    getApiAsync(callingExtensionContext: vscode.ExtensionContext, requestedApiVersion: number): Promise<IIntelliCode | null>;
}
export interface IIntelliCode {
    ModelAcquisitionService: IModelAcquisitionService;
}
export interface IModelAcquisitionService {
    getModelProvider(analyzerName: string, modelName: string, minSchemaVersion: number, maxSchemaVersion: number, tags: string[]): IModelProvider;
}
export interface IModelProvider {
    modelUpdatedCallback: (model: IModelDescriptor) => void;
    getModelAsync(repoUri: string | undefined): Promise<IModelDescriptor | undefined>;
}
export interface IModelDescriptor {
    modelPath: string;
    tags: string[];
    repoUri: string | undefined;
    schemaVersion: number;
}
export interface IRequestedConfigSetting {
    scopeName: string;
    settingName: string;
    desiredValue: any;
    required: boolean;
    scopesToTry: vscode.ConfigurationTarget[];
    reloadWindowAfterApplying: boolean;
    notificationMessage: string;
    actionLabel: string;
}
export interface IIntelliCodeLanguageSupport {
    getRequestedConfig(): IRequestedConfigSetting[];
    activate(api: IIntelliCode, logger: (str: string) => void): Promise<void>;
}
