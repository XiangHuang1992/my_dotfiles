/// <reference types="node" />
/**
 * @license
 * Copyright Mauricio Gemelli Vigolo. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/mauriciovigolo/file-matcher/LICENSE
 */
import { EventEmitter } from 'events';
import { FindOptions } from './interfaces/findoptions';
/**
 * @author Mauricio Gemelli Vigolo
 *
 * @module
 *
 * @description
 * Finds file(s) by name / contents, according to the @see {@link FindOptions} criteria -  by filename
 * (using globs) or file attribute as size, birth and modified date. Finally it's possible to refine
 * the search by using a regex to match file contents. The search can be done recursively or not.
 *
 * This class extends the Node's EventEmitter. The following events are triggered:
 * - preSearchDirectory: emitted when the search starts to look for matching files in new directory.
 * - endSearchDirectory: emitted when the search ends. This event is emitted only once.
 * - contentMatch: emitted when the content regex is matched.
 *
 * @example
 * ``` ts
 * let finder: FileFinder = new FileFinder();
 *
 * let criteria: FindOptions = {
 *      path: 'pathToSearch',
 *      fileFilter: {
 *          fileNamePattern: ['*.js'], // glob
 *          attributeFilters: [
 *              {
 *                  type: AttributeType.Size,
 *                  value: 1000,
 *                  operator: PredicateOperator.GreaterThan
 *              }
 *          ],
 *          content: /test/i,
 *          fileReadOptions: {
 *              encoding: 'utf8'
 *              flag: 'r'
 *          }
 *      },
 *      recursiveSearch: true
 * };
 *
 * finder.find(criteria)
 *  .then(files => {
 *      ...
 *  })
 * .catch(error => {
 *      ...
 *  });
 * ```
 */
export declare class FileMatcher extends EventEmitter {
    private path;
    private fileFilter;
    private recursiveSearch;
    private negationFilter;
    private files;
    private processing;
    constructor();
    /**
     * Starts the search according to the {@link FindOptions} criteria. The search
     * supports glob searching for the filenames, including aditional criteria by
     * modified and birth time. It can be executed recursively or not. The
     * default search is not recursive.
     *
     * The content of the matched files can be also checked using a RegExp.
     *
     * First of all, the files are filtered by the {@link FileFilter} and after that,
     * the found files are matched by the RegExp, but only if the contentMatch attribute
     * is informed.
     *
     * This class extends the Node's EventEmitter. List of events:
     * - preSearchDirectory: emitted when the search starts to look for matching files in new directory. Returns the corresponding DIR.
     * - initSearchSubDirectory: emitted in the beginning of the search in a subdirectory. Returns the SUBDIR.
     * - endSearchSubDirectory: emitted when the search in the subdirectory ends. Returns the SUBDIR.
     * - endSearchDirectory: emitted when the search ends. This event is emitted only once. Returns the DIR.
     * - contentMatch: emitted when the content regex is matched. Returns the filename.
     *
     * @param {FindOptions} - [criteria]
     *
     * @return {Promise}
     * returns a promise with the results of the find execution.
     */
    find(criteria: FindOptions): Promise<string[]>;
    /**
     * Loads and prepares the FileMatcher attributes, applying the filters
     * and registering the callback functions events.
     *
     * @param {FindOptions} - criteria.
     */
    private init(criteria);
    /**
     * List all files and directories of a directory, applying the
     * glob filter and other filters.
     *
     * @param {string} dir - directory to be searched.
     */
    private readDirectory(dir);
    /**
     * Checks if the current item is a directory - in this case it should be evaluated - if recursive attribute is true, and if it's a file
     * it checks if the filters are matched.
     *
     * @param {string} dir - parent's directory.
     * @param {string} item - directory item that will checked, if it's a subdirectory or a file.
     * @param {Function} resolve - promise's resolve function.
     * @param {Function} reject -  promise's reject function.
     * @param {number} totalItensDir - total of files/directories inside of dir (parent's directory).
     * @param {number} indexItem - Index of the present directory item, helping to check if it's time to end the file search.
     */
    private checkAndApplyFilters(dir, item, resolve, reject, totalItensDir, indexItem);
    /**
     * Applies the filters in the file, checking:
     * - filename pattern;
     * - file size;
     * - file creation time;
     * - file modified time;
     *
     * @param {string} file - filename.
     * @param {fs.Stats} stats - Node's Fs Stats to extract the file infos.
     *
     * @return {boolean} returns if the file matches the informed filters.
     */
    private matchFilters(file, stats);
    /**
     * Makes the conversion of the FilterPredicates Enum to the corresponding operation and
     * checks if the file is ok.
     *
     * @param {number | string} valueStat - file attribute value from stat.
     * @param {number | string} valueFilter - value from @see {@link AttributeFilter}
     * @param {PredicateOperator} operatorFilter - operator filter type.
     *
     * @return {boolean} indicates if the file matches or not the Filters.
     */
    private checkFilterPredicates(valueStat, valueFilter, operatorFilter);
    /**
     * Deals with the end of file search, can be a subdirectory or directory.
     *
     * @param {string} dir - directory path.
     * @param {any} resolve - promise's resolve.
     */
    private endFileSearch(dir, resolve);
    /**
     * Filter files by content.
     *
     * @return {Promise<any>} - promise resolving the matched files.
     */
    private filterFileContent();
    /**
     * It does the file read and applies the content RegExp.
     *
     * @param {string} file - file name to be loaded and it's content verified.
     *
     * @return {Promise} - promise's callback.
     */
    private readFileContent(file);
    /**
     * Register all event listeners, done internally by this library.
     */
    private registerEventListeners();
}
