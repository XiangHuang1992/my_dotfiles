"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Mauricio Gemelli Vigolo. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/mauriciovigolo/file-matcher/LICENSE
 */
var events_1 = require("events");
var fs = require("fs");
var mm = require("micromatch");
var path = require("path");
var attributetype_1 = require("./enums/attributetype");
var predicateoperator_1 = require("./enums/predicateoperator");
/**
 * @author Mauricio Gemelli Vigolo
 *
 * @module
 *
 * @description
 * Finds file(s) by name / contents, according to the @see {@link FindOptions} criteria -  by filename
 * (using globs) or file attribute as size, birth and modified date. Finally it's possible to refine
 * the search by using a regex to match file contents. The search can be done recursively or not.
 *
 * This class extends the Node's EventEmitter. The following events are triggered:
 * - preSearchDirectory: emitted when the search starts to look for matching files in new directory.
 * - endSearchDirectory: emitted when the search ends. This event is emitted only once.
 * - contentMatch: emitted when the content regex is matched.
 *
 * @example
 * ``` ts
 * let finder: FileFinder = new FileFinder();
 *
 * let criteria: FindOptions = {
 *      path: 'pathToSearch',
 *      fileFilter: {
 *          fileNamePattern: ['*.js'], // glob
 *          attributeFilters: [
 *              {
 *                  type: AttributeType.Size,
 *                  value: 1000,
 *                  operator: PredicateOperator.GreaterThan
 *              }
 *          ],
 *          content: /test/i,
 *          fileReadOptions: {
 *              encoding: 'utf8'
 *              flag: 'r'
 *          }
 *      },
 *      recursiveSearch: true
 * };
 *
 * finder.find(criteria)
 *  .then(files => {
 *      ...
 *  })
 * .catch(error => {
 *      ...
 *  });
 * ```
 */
var FileMatcher = /** @class */ (function (_super) {
    __extends(FileMatcher, _super);
    function FileMatcher() {
        var _this = _super.call(this) || this;
        _this.files = [];
        _this.processing = [];
        _this.setMaxListeners(0);
        _this.registerEventListeners();
        return _this;
    }
    /**
     * Starts the search according to the {@link FindOptions} criteria. The search
     * supports glob searching for the filenames, including aditional criteria by
     * modified and birth time. It can be executed recursively or not. The
     * default search is not recursive.
     *
     * The content of the matched files can be also checked using a RegExp.
     *
     * First of all, the files are filtered by the {@link FileFilter} and after that,
     * the found files are matched by the RegExp, but only if the contentMatch attribute
     * is informed.
     *
     * This class extends the Node's EventEmitter. List of events:
     * - preSearchDirectory: emitted when the search starts to look for matching files in new directory. Returns the corresponding DIR.
     * - initSearchSubDirectory: emitted in the beginning of the search in a subdirectory. Returns the SUBDIR.
     * - endSearchSubDirectory: emitted when the search in the subdirectory ends. Returns the SUBDIR.
     * - endSearchDirectory: emitted when the search ends. This event is emitted only once. Returns the DIR.
     * - contentMatch: emitted when the content regex is matched. Returns the filename.
     *
     * @param {FindOptions} - [criteria]
     *
     * @return {Promise}
     * returns a promise with the results of the find execution.
     */
    FileMatcher.prototype.find = function (criteria) {
        var _this = this;
        var files = [];
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var files_1, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        try {
                            this.init(criteria);
                        }
                        catch (e) {
                            reject(e);
                            return [2 /*return*/];
                        }
                        if (!this.path) {
                            reject('The path must be informed to execute the file search!');
                            return [2 /*return*/];
                        }
                        if (!this.fileFilter.fileNamePattern && !this.fileFilter.attributeFilters
                            && !this.fileFilter.content) {
                            reject('At least a filename pattern, fileattribute or file content regex should be declared!');
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.readDirectory(this.path)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.filterFileContent()];
                    case 3:
                        files_1 = _a.sent();
                        resolve(files_1);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        reject(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Loads and prepares the FileMatcher attributes, applying the filters
     * and registering the callback functions events.
     *
     * @param {FindOptions} - criteria.
     */
    FileMatcher.prototype.init = function (criteria) {
        var _this = this;
        this.path = criteria.path;
        if (this.path && this.path.trim() === '') {
            this.path = undefined;
        }
        this.recursiveSearch = criteria.recursiveSearch || false;
        if (!criteria.fileFilter) {
            throw new Error('FileFilter object should not be null or undefined!');
        }
        this.fileFilter = criteria.fileFilter;
        if (this.fileFilter.content) {
            this.fileFilter.fileReadOptions = this.fileFilter.fileReadOptions || { encoding: 'utf8', flag: 'r' };
        }
        if (this.fileFilter.attributeFilters && this.fileFilter.attributeFilters.length === 0) {
            this.fileFilter.attributeFilters = undefined;
        }
        this.files = [];
        this.processing = [];
        this.negationFilter = ['**/**'];
        if (this.fileFilter.fileNamePattern) {
            var fileGlob = this.fileFilter.fileNamePattern;
            if (typeof fileGlob !== 'string') {
                fileGlob = fileGlob;
                fileGlob.forEach(function (item) {
                    if (item.indexOf('!') === 0) {
                        _this.negationFilter.push(item);
                    }
                });
            }
            else {
                if (fileGlob.indexOf('!') === 0) {
                    fileGlob = fileGlob;
                    this.negationFilter.push(fileGlob);
                }
            }
        }
    };
    /**
     * List all files and directories of a directory, applying the
     * glob filter and other filters.
     *
     * @param {string} dir - directory to be searched.
     */
    FileMatcher.prototype.readDirectory = function (dir) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            fs.readdir(dir, function (err, list) {
                if (err) {
                    reject(err);
                    return;
                }
                // Emit directory pre processing
                self.emit('preSearchDirectory', dir);
                list = mm(list, _this.negationFilter);
                if (list.length === 0) {
                    self.endFileSearch(dir, resolve);
                }
                var totalItensList = list.length - 1;
                list.forEach(function (item, index) {
                    item = path.resolve(dir, item);
                    self.checkAndApplyFilters(dir, item, resolve, reject, totalItensList, index);
                });
            });
        });
    };
    /**
     * Checks if the current item is a directory - in this case it should be evaluated - if recursive attribute is true, and if it's a file
     * it checks if the filters are matched.
     *
     * @param {string} dir - parent's directory.
     * @param {string} item - directory item that will checked, if it's a subdirectory or a file.
     * @param {Function} resolve - promise's resolve function.
     * @param {Function} reject -  promise's reject function.
     * @param {number} totalItensDir - total of files/directories inside of dir (parent's directory).
     * @param {number} indexItem - Index of the present directory item, helping to check if it's time to end the file search.
     */
    FileMatcher.prototype.checkAndApplyFilters = function (dir, item, resolve, reject, totalItensDir, indexItem) {
        var _this = this;
        fs.stat(item, function (err, stats) {
            if (stats.isDirectory()) {
                // Should search recursively?
                if (_this.recursiveSearch) {
                    _this.processing.push({
                        dir: item,
                        parentDir: dir,
                        parentResolve: resolve
                    });
                    _this.readDirectory(item);
                }
            }
            else {
                if (_this.matchFilters(item, stats)) {
                    _this.files.push(item);
                }
            }
            if (totalItensDir === indexItem) {
                var stillProcessingSubdir = _this.processing.findIndex(function (processingItem) { return processingItem.parentDir === dir; }) > -1;
                if (!stillProcessingSubdir) {
                    _this.endFileSearch(dir, resolve);
                }
            }
        });
    };
    /**
     * Applies the filters in the file, checking:
     * - filename pattern;
     * - file size;
     * - file creation time;
     * - file modified time;
     *
     * @param {string} file - filename.
     * @param {fs.Stats} stats - Node's Fs Stats to extract the file infos.
     *
     * @return {boolean} returns if the file matches the informed filters.
     */
    FileMatcher.prototype.matchFilters = function (file, stats) {
        var _this = this;
        var matchFilter = true;
        var fileNamePattern = this.fileFilter.fileNamePattern;
        var attributeFilters = this.fileFilter.attributeFilters;
        if (!fileNamePattern && !attributeFilters) {
            return matchFilter;
        }
        // Check filename pattern
        if (fileNamePattern) {
            matchFilter = mm([file], fileNamePattern).length > 0;
        }
        // Check file attributes as size, birth and modified date.
        if (matchFilter && attributeFilters) {
            attributeFilters.some(function (attributeFilter) {
                var valueStat;
                var valueFilter;
                var operatorFilter;
                operatorFilter = attributeFilter.operator;
                switch (attributeFilter.type) {
                    case attributetype_1.AttributeType.Size:
                        valueStat = stats.size;
                        valueFilter = attributeFilter.value;
                        break;
                    case attributetype_1.AttributeType.BirthDate:
                        valueStat = stats.birthtime.getTime();
                        valueFilter = attributeFilter.value.getTime();
                        break;
                    case attributetype_1.AttributeType.ModifiedDate:
                        valueStat = stats.mtime.getTime();
                        valueFilter = attributeFilter.value.getTime();
                        break;
                }
                matchFilter = _this.checkFilterPredicates(valueStat, valueFilter, operatorFilter);
                return !matchFilter;
            });
        }
        return matchFilter;
    };
    /**
     * Makes the conversion of the FilterPredicates Enum to the corresponding operation and
     * checks if the file is ok.
     *
     * @param {number | string} valueStat - file attribute value from stat.
     * @param {number | string} valueFilter - value from @see {@link AttributeFilter}
     * @param {PredicateOperator} operatorFilter - operator filter type.
     *
     * @return {boolean} indicates if the file matches or not the Filters.
     */
    FileMatcher.prototype.checkFilterPredicates = function (valueStat, valueFilter, operatorFilter) {
        var matchFilter = false;
        switch (operatorFilter) {
            case predicateoperator_1.PredicateOperator.GreaterThan:
                matchFilter = valueStat > valueFilter;
                break;
            case predicateoperator_1.PredicateOperator.LessThan:
                matchFilter = valueStat < valueFilter;
                break;
            case predicateoperator_1.PredicateOperator.Equal:
                matchFilter = valueStat === valueFilter;
                break;
            case predicateoperator_1.PredicateOperator.NotEqual:
                matchFilter = valueStat !== valueFilter;
                break;
        }
        return matchFilter;
    };
    /**
     * Deals with the end of file search, can be a subdirectory or directory.
     *
     * @param {string} dir - directory path.
     * @param {any} resolve - promise's resolve.
     */
    FileMatcher.prototype.endFileSearch = function (dir, resolve) {
        var subDir = this.processing.find(function (processingItem) { return processingItem.dir === dir; });
        if (subDir) {
            var parentDir = subDir.parentDir;
            this.processing.splice(this.processing.indexOf(subDir), 1);
            this.emit('endSearchSubDirectory', parentDir, subDir.parentResolve);
        }
        else {
            // End of file searching on the directory.
            var totalOfFiles = 0;
            if (this.files && this.files.length > 0) {
                totalOfFiles = this.files.length;
            }
            this.emit('endSearchDirectory', this.files, totalOfFiles);
        }
        resolve();
    };
    /**
     * Filter files by content.
     *
     * @return {Promise<any>} - promise resolving the matched files.
     */
    FileMatcher.prototype.filterFileContent = function () {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            var matchingFiles = [];
            if (_this.fileFilter.content && _this.files && _this.files.length > 0) {
                _this.files.some(function (file, index) {
                    _this.readFileContent(file)
                        .then(function (result) {
                        if (result) {
                            var processed = (index + 1) / _this.files.length;
                            self.emit('contentMatch', file, processed);
                            matchingFiles.push(result);
                        }
                        if ((self.files.length - 1) === index) {
                            resolve(matchingFiles);
                            return true;
                        }
                    }).catch(function (err) {
                        reject(err);
                        return true;
                    });
                    return false;
                });
            }
            else {
                matchingFiles = _this.files;
                resolve(matchingFiles);
            }
        });
    };
    /**
     * It does the file read and applies the content RegExp.
     *
     * @param {string} file - file name to be loaded and it's content verified.
     *
     * @return {Promise} - promise's callback.
     */
    FileMatcher.prototype.readFileContent = function (file) {
        var self = this;
        return new Promise(function (resolve, reject) {
            fs.readFile(file, self.fileFilter.fileReadOptions, function (err, data) {
                if (err) {
                    reject(err);
                    return;
                }
                if (self.fileFilter.content.test(data)) {
                    resolve(file);
                }
                else {
                    resolve();
                }
            });
        });
    };
    /**
     * Register all event listeners, done internally by this library.
     */
    FileMatcher.prototype.registerEventListeners = function () {
        var _this = this;
        this.on('endSearchSubDirectory', function (parentDir, resolve) {
            var stillProcessingSubdir = _this.processing.findIndex(function (processingItem) { return processingItem.parentDir === parentDir; }) > -1;
            if (!stillProcessingSubdir) {
                _this.endFileSearch(parentDir, resolve);
            }
        });
    };
    return FileMatcher;
}(events_1.EventEmitter));
exports.FileMatcher = FileMatcher;
//# sourceMappingURL=filematcher.js.map