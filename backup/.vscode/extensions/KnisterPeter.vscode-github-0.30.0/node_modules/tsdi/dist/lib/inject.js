"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("./helper");
var debug = require("debug");
var log = debug('tsdi');
function Inject() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var defaultOptions = function (optionsOrString) {
        var options = helper_1.getNamedOptions(optionsOrString || {});
        if (options.lazy === undefined) {
            options.lazy = true;
        }
        return options;
    };
    var decorateProperty = function (target, propertyKey, options) {
        log("@Inject " + target.constructor.name + "#" + String(propertyKey));
        var type = Reflect.getMetadata('design:type', target, propertyKey);
        var injects = Reflect.getMetadata('component:injects', target);
        if (!injects) {
            injects = [];
            Reflect.defineMetadata('component:injects', injects, target);
        }
        injects.push({
            target: target,
            property: propertyKey.toString(),
            options: options,
            type: type
        });
    };
    var decorateParameter = function (target, propertyKey, parameterIndex, options) {
        log("@Inject " + String(propertyKey));
        var parameters = Reflect.getMetadata('component:parameters', target);
        if (!parameters) {
            parameters = [];
            Reflect.defineMetadata('component:parameters', parameters, target);
        }
        parameters.push({
            options: options,
            index: parameterIndex,
            rtti: Reflect.getMetadata('design:paramtypes', target)[parameterIndex]
        });
    };
    if (args.length > 1) {
        var options = defaultOptions({});
        if (typeof args[2] === 'undefined') {
            decorateProperty(args[0], args[1], options);
        }
        else {
            decorateParameter(args[0], args[1], args[2], options);
        }
        return;
    }
    return function (target, propertyKey, parameterIndex) {
        var options = defaultOptions(args[0] || {});
        if (typeof parameterIndex === 'undefined') {
            return decorateProperty(target, propertyKey, options);
        }
        else {
            return decorateParameter(target, propertyKey, parameterIndex, options);
        }
    };
}
exports.Inject = Inject;
exports.inject = Inject;
//# sourceMappingURL=inject.js.map