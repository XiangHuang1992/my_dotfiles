// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var posix = require('path-posix');
var signaling_1 = require('phosphor/lib/core/signaling');
var utils = require('../utils');
var validate = require('./validate');
/**
 * The url for the contents service.
 */
var SERVICE_CONTENTS_URL = 'api/contents';
/**
 * The url for the file access.
 */
var FILES_URL = 'files';
/**
 * A contents manager that passes file operations to the server.
 *
 * This includes checkpointing with the normal file operations.
 */
var ContentsManager = (function () {
    /**
     * Construct a new contents manager object.
     *
     * @param options - The options used to initialize the object.
     */
    function ContentsManager(options) {
        if (options === void 0) { options = {}; }
        this._baseUrl = '';
        this._isDisposed = false;
        this._ajaxSettings = null;
        this._baseUrl = options.baseUrl || utils.getBaseUrl();
        this._ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
    }
    Object.defineProperty(ContentsManager.prototype, "isDisposed", {
        /**
         * Test whether the manager has been disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the manager.
     */
    ContentsManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.clearSignalData(this);
    };
    Object.defineProperty(ContentsManager.prototype, "baseUrl", {
        /**
         * Get the base url of the manager.
         */
        get: function () {
            return this._baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContentsManager.prototype, "ajaxSettings", {
        /**
         * Get a copy of the default ajax settings for the contents manager.
         */
        get: function () {
            return utils.copy(this._ajaxSettings);
        },
        /**
         * Set the default ajax settings for the contents manager.
         */
        set: function (value) {
            this._ajaxSettings = utils.copy(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get a file or directory.
     *
     * @param path: The path to the file.
     *
     * @param options: The options used to fetch the file.
     *
     * @returns A promise which resolves with the file content.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.get = function (path, options) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path);
        if (options) {
            // The notebook type cannot take an format option.
            if (options.type === 'notebook') {
                delete options['format'];
            }
            var params = utils.copy(options);
            params.content = options.content ? '1' : '0';
            url += utils.jsonToQueryString(params);
        }
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            try {
                validate.validateContentsModel(success.data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            return success.data;
        });
    };
    /**
     * Get an encoded download url given a file path.
     *
     * @param path - An absolute POSIX file path on the server.
     *
     * #### Notes
     * It is expected that the path contains no relative paths,
     * use [[ContentsManager.getAbsolutePath]] to get an absolute
     * path if necessary.
     */
    ContentsManager.prototype.getDownloadUrl = function (path) {
        return utils.urlPathJoin(this._baseUrl, FILES_URL, utils.urlEncodeParts(path));
    };
    /**
     * Create a new untitled file or directory in the specified directory path.
     *
     * @param options: The options used to create the file.
     *
     * @returns A promise which resolves with the created file content when the
     *    file is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.newUntitled = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        if (options) {
            if (options.ext) {
                options.ext = ContentsManager.normalizeExtension(options.ext);
            }
            ajaxSettings.data = JSON.stringify(options);
            ajaxSettings.contentType = 'application/json';
        }
        var url = this._getUrl(options.path || '');
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateContentsModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            _this.fileChanged.emit({
                type: 'new',
                oldValue: null,
                newValue: data
            });
            return data;
        });
    };
    /**
     * Delete a file.
     *
     * @param path - The path to the file.
     *
     * @returns A promise which resolves when the file is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.delete = function (path) {
        var _this = this;
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                return utils.makeAjaxError(success);
            }
            _this.fileChanged.emit({
                type: 'delete',
                oldValue: { path: path },
                newValue: null
            });
        }, function (error) {
            // Translate certain errors to more specific ones.
            // TODO: update IPEP27 to specify errors more precisely, so
            // that error types can be detected here with certainty.
            if (error.xhr.status === 400) {
                var err = JSON.parse(error.xhr.response);
                if (err.message) {
                    error.throwError = err.message;
                }
            }
            return Promise.reject(error);
        });
    };
    /**
     * Rename a file or directory.
     *
     * @param path - The original file path.
     *
     * @param newPath - The new file path.
     *
     * @returns A promise which resolves with the new file contents model when
     *   the file is renamed.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.rename = function (path, newPath) {
        var _this = this;
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'PATCH';
        ajaxSettings.dataType = 'json';
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.data = JSON.stringify({ path: newPath });
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateContentsModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            _this.fileChanged.emit({
                type: 'rename',
                oldValue: { path: path },
                newValue: data
            });
            return data;
        });
    };
    /**
     * Save a file.
     *
     * @param path - The desired file path.
     *
     * @param options - Optional overrides to the model.
     *
     * @returns A promise which resolves with the file content model when the
     *   file is saved.
     *
     * #### Notes
     * Ensure that `model.content` is populated for the file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.save = function (path, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'PUT';
        ajaxSettings.dataType = 'json';
        ajaxSettings.data = JSON.stringify(options);
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            // will return 200 for an existing file and 201 for a new file
            if (success.xhr.status !== 200 && success.xhr.status !== 201) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateContentsModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            _this.fileChanged.emit({
                type: 'save',
                oldValue: null,
                newValue: data
            });
            return data;
        });
    };
    /**
     * Copy a file into a given directory.
     *
     * @param path - The original file path.
     *
     * @param toDir - The destination directory path.
     *
     * @returns A promise which resolves with the new contents model when the
     *  file is copied.
     *
     * #### Notes
     * The server will select the name of the copied file.
     *
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.copy = function (fromFile, toDir) {
        var _this = this;
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.data = JSON.stringify({ copy_from: fromFile });
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(toDir);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                return utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateContentsModel(data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            _this.fileChanged.emit({
                type: 'new',
                oldValue: null,
                newValue: data
            });
            return data;
        });
    };
    /**
     * Create a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with the new checkpoint model when the
     *   checkpoint is created.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.createCheckpoint = function (path) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints');
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                return utils.makeAjaxError(success);
            }
            try {
                validate.validateCheckpointModel(success.data);
            }
            catch (err) {
                return utils.makeAjaxError(success, err.message);
            }
            return success.data;
        });
    };
    /**
     * List available checkpoints for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with a list of checkpoint models for
     *    the file.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.
     */
    ContentsManager.prototype.listCheckpoints = function (path) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        var url = this._getUrl(path, 'checkpoints');
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                return utils.makeAjaxError(success);
            }
            if (!Array.isArray(success.data)) {
                return utils.makeAjaxError(success, 'Invalid Checkpoint list');
            }
            for (var i = 0; i < success.data.length; i++) {
                try {
                    validate.validateCheckpointModel(success.data[i]);
                }
                catch (err) {
                    return utils.makeAjaxError(success, err.message);
                }
            }
            return success.data;
        });
    };
    /**
     * Restore a file to a known checkpoint state.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to restore.
     *
     * @returns A promise which resolves when the checkpoint is restored.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.restoreCheckpoint = function (path, checkpointID) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints', checkpointID);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                return utils.makeAjaxError(success);
            }
        });
    };
    /**
     * Delete a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @param checkpointID - The id of the checkpoint to delete.
     *
     * @returns A promise which resolves when the checkpoint is deleted.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).
     */
    ContentsManager.prototype.deleteCheckpoint = function (path, checkpointID) {
        var ajaxSettings = this.ajaxSettings;
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        var url = this._getUrl(path, 'checkpoints', checkpointID);
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                return utils.makeAjaxError(success);
            }
        });
    };
    /**
     * Get a REST url for a file given a path.
     */
    ContentsManager.prototype._getUrl = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var parts = args.map(function (path) { return utils.urlEncodeParts(path); });
        return utils.urlPathJoin.apply(utils, [this._baseUrl, SERVICE_CONTENTS_URL].concat(parts));
    };
    return ContentsManager;
}());
exports.ContentsManager = ContentsManager;
// Define the signals for the `ContentsManager` class.
signaling_1.defineSignal(ContentsManager.prototype, 'fileChanged');
/**
 * A namespace for ContentsManager statics.
 */
var ContentsManager;
(function (ContentsManager) {
    /**
     * Get the absolute POSIX path to a file on the server.
     *
     * @param relativePath - The relative POSIX path to the file.
     *
     * @param cwd - The optional POSIX current working directory.  The default is
     *  an empty string.
     *
     * #### Notes
     * Absolute path in this context is equivalent to a POSIX path without
     * the initial `'/'` because IPEP 27 paths denote `''` as the root.
     * If the resulting path is not contained within the server root,
     * returns `null`, since it cannot be served.
     */
    function getAbsolutePath(relativePath, cwd) {
        if (cwd === void 0) { cwd = ''; }
        // Bail if it looks like a url.
        var urlObj = utils.urlParse(relativePath);
        if (urlObj.protocol) {
            return relativePath;
        }
        var norm = posix.normalize(posix.join(cwd, relativePath));
        if (norm.indexOf('../') === 0) {
            return null;
        }
        return posix.resolve('/', cwd, relativePath).slice(1);
    }
    ContentsManager.getAbsolutePath = getAbsolutePath;
    /**
     * Get the last portion of a path, similar to the Unix basename command.
     */
    function basename(path, ext) {
        return posix.basename(path, ext);
    }
    ContentsManager.basename = basename;
    /**
     * Get the directory name of a path, similar to the Unix dirname command.
     */
    function dirname(path) {
        return posix.dirname(path);
    }
    ContentsManager.dirname = dirname;
    /**
     * Get the extension of the path.
     *
     * #### Notes
     * The extension is the string from the last occurance of the `.`
     * character to end of string in the last portion of the path.
     * If there is no `.` in the last portion of the path, or if the first
     * character of the basename of path [[basename]] is `.`, then an
     * empty string is returned.
     */
    function extname(path) {
        return posix.extname(path);
    }
    ContentsManager.extname = extname;
    /**
     * Normalize a file extension to be of the type `'.foo'`.
     *
     * Adds a leading dot if not present and converts to lower case.
     */
    function normalizeExtension(extension) {
        if (extension.length > 0 && extension.indexOf('.') !== 0) {
            extension = "." + extension;
        }
        return extension;
    }
    ContentsManager.normalizeExtension = normalizeExtension;
})(ContentsManager = exports.ContentsManager || (exports.ContentsManager = {}));
