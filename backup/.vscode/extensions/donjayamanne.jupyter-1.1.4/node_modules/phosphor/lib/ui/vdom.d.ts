/**
 * The base attributes object for a virtual DOM node.
 */
export interface IVNodeAttrs {
    /**
     * The key id for the node.
     *
     * If a node is given a key id, the generated DOM node will not be
     * recreated during a rendering update if it only moves among its
     * siblings in the render tree, provided the type of the node does
     * not change.
     *
     * In general, reordering child nodes will cause the nodes to be
     * completely re-rendered. Keys allow this to be optimized away.
     *
     * If a key is provided, it must be unique among sibling nodes.
     */
    key?: string;
}
/**
 * The attributes available for all elements.
 */
export interface IElementAttrs extends IVNodeAttrs {
    accessKey?: string;
    className?: string;
    contentEditable?: string;
    dataset?: any;
    dir?: string;
    draggable?: boolean;
    hidden?: any;
    id?: string;
    lang?: string;
    spellcheck?: boolean;
    style?: any;
    tabIndex?: number;
    title?: string;
    onabort?: (ev: UIEvent) => any;
    onbeforecopy?: (ev: DragEvent) => any;
    onbeforecut?: (ev: DragEvent) => any;
    onbeforepaste?: (ev: DragEvent) => any;
    onblur?: (ev: FocusEvent) => any;
    oncanplay?: (ev: Event) => any;
    oncanplaythrough?: (ev: Event) => any;
    onchange?: (ev: Event) => any;
    onclick?: (ev: MouseEvent) => any;
    oncontextmenu?: (ev: MouseEvent) => any;
    oncopy?: (ev: DragEvent) => any;
    oncuechange?: (ev: Event) => any;
    oncut?: (ev: DragEvent) => any;
    ondblclick?: (ev: MouseEvent) => any;
    ondrag?: (ev: DragEvent) => any;
    ondragend?: (ev: DragEvent) => any;
    ondragenter?: (ev: DragEvent) => any;
    ondragleave?: (ev: DragEvent) => any;
    ondragover?: (ev: DragEvent) => any;
    ondragstart?: (ev: DragEvent) => any;
    ondrop?: (ev: DragEvent) => any;
    ondurationchange?: (ev: Event) => any;
    onended?: (ev: Event) => any;
    onemptied?: (ev: Event) => any;
    onerror?: (ev: ErrorEvent) => any;
    onfocus?: (ev: FocusEvent) => any;
    onhelp?: (ev: Event) => any;
    oninput?: (ev: Event) => any;
    onkeydown?: (ev: KeyboardEvent) => any;
    onkeypress?: (ev: KeyboardEvent) => any;
    onkeyup?: (ev: KeyboardEvent) => any;
    onload?: (ev: Event) => any;
    onloadeddata?: (ev: Event) => any;
    onloadedmetadata?: (ev: Event) => any;
    onloadstart?: (ev: Event) => any;
    onmousedown?: (ev: MouseEvent) => any;
    onmouseenter?: (ev: MouseEvent) => any;
    onmouseleave?: (ev: MouseEvent) => any;
    onmousemove?: (ev: MouseEvent) => any;
    onmouseout?: (ev: MouseEvent) => any;
    onmouseover?: (ev: MouseEvent) => any;
    onmouseup?: (ev: MouseEvent) => any;
    onmousewheel?: (ev: MouseWheelEvent) => any;
    onpaste?: (ev: DragEvent) => any;
    onpause?: (ev: Event) => any;
    onplay?: (ev: Event) => any;
    onplaying?: (ev: Event) => any;
    onprogress?: (ev: ProgressEvent) => any;
    onratechange?: (ev: Event) => any;
    onreadystatechange?: (ev: Event) => any;
    onreset?: (ev: Event) => any;
    onscroll?: (ev: UIEvent) => any;
    onseeked?: (ev: Event) => any;
    onseeking?: (ev: Event) => any;
    onselect?: (ev: UIEvent) => any;
    onselectstart?: (ev: Event) => any;
    onstalled?: (ev: Event) => any;
    onsubmit?: (ev: Event) => any;
    onsuspend?: (ev: Event) => any;
    ontimeupdate?: (ev: Event) => any;
    onvolumechange?: (ev: Event) => any;
    onwaiting?: (ev: Event) => any;
}
/**
 * The attributes for `<a>` elements.
 */
export interface IAnchorAttrs extends IElementAttrs {
    download?: string;
    href?: string;
    hreflang?: string;
    media?: string;
    rel?: string;
    target?: string;
    type?: string;
}
/**
 * The attributes for `<area>` elements.
 */
export interface IAreaAttrs extends IElementAttrs {
    alt?: string;
    coords?: string;
    download?: string;
    href?: string;
    hreflang?: string;
    media?: string;
    rel?: string;
    shape?: string;
    target?: string;
    type?: string;
}
/**
 * The attributes for `<button>` elements.
 */
export interface IButtonAttrs extends IElementAttrs {
    autofocus?: boolean;
    disabled?: boolean;
    form?: string;
    formAction?: string;
    formEnctype?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    name?: string;
    type?: string;
    value?: string;
}
/**
 * The attributes for `<canvas>` elements.
 */
export interface ICanvasAttrs extends IElementAttrs {
    width?: number;
    height?: number;
}
/**
 * The attributes for `<data>` elements.
 */
export interface IDataAttrs extends IElementAttrs {
    value?: string;
}
/**
 * The attributes for `<embed>` elements.
 */
export interface IEmbedAttrs extends IElementAttrs {
    height?: string;
    src?: string;
    type?: string;
    width?: string;
}
/**
 * The attributes for `<fieldset>` elements.
 */
export interface IFieldSetAttrs extends IElementAttrs {
    disabled?: boolean;
    form?: string;
    name?: string;
}
/**
 * The attributes for `<form>` elements.
 */
export interface IFormAttrs extends IElementAttrs {
    acceptCharset?: string;
    action?: string;
    autocomplete?: string;
    enctype?: string;
    method?: string;
    name?: string;
    noValidate?: boolean;
    target?: string;
}
/**
 * The attributes for `<iframe>` elements.
 */
export interface IIFrameAttrs extends IElementAttrs {
    allowFullscreen?: boolean;
    height?: string;
    name?: string;
    sandbox?: string;
    seamless?: boolean;
    src?: string;
    srcdoc?: string;
    width?: string;
}
/**
 * The attributes for `<img>` elements.
 */
export interface IImageAttrs extends IElementAttrs {
    alt?: string;
    crossOrigin?: string;
    height?: number;
    isMap?: boolean;
    src?: string;
    sizes?: string;
    srcset?: string;
    width?: number;
    useMap?: string;
}
/**
 * The attributes for `<input>` elements.
 */
export interface IInputAttrs extends IElementAttrs {
    accept?: string;
    alt?: string;
    autocomplete?: string;
    autofocus?: boolean;
    checked?: boolean;
    disabled?: boolean;
    form?: string;
    formAction?: string;
    formEnctype?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    height?: string;
    inputMode?: string;
    list?: string;
    max?: string;
    maxLength?: number;
    min?: string;
    minLength?: number;
    multiple?: boolean;
    name?: string;
    pattern?: string;
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    size?: number;
    spellcheck?: boolean;
    src?: string;
    step?: string;
    type?: string;
    value?: string;
    width?: string;
}
/**
 * The attributes for `<label>` elements.
 */
export interface ILabelAttrs extends IElementAttrs {
    form?: string;
    htmlFor?: string;
}
/**
 * The attributes for `<li>` elements.
 */
export interface ILIAttrs extends IElementAttrs {
    value?: number;
}
/**
 * The attributes for `<map>` elements.
 */
export interface IMapAttrs extends IElementAttrs {
    name?: string;
}
/**
 * The attributes for `<meter>` elements.
 */
export interface IMeterAttrs extends IElementAttrs {
    high?: number;
    low?: number;
    max?: number;
    min?: number;
    optimum?: number;
    value?: number;
}
/**
 * The attributes for `<audio>` and `<video>` elements.
 */
export interface IMediaAttrs extends IElementAttrs {
    autoplay?: boolean;
    controls?: boolean;
    crossOrigin?: string;
    loop?: boolean;
    mediaGroup?: string;
    muted?: boolean;
    preload?: string;
    src?: string;
    volume?: number;
}
/**
 * The attributes for `<del>` and `<ins>` elements.
 */
export interface IModAttrs extends IElementAttrs {
    cite?: string;
    dateTime?: string;
}
/**
 * The attributes for `<object>` elements.
 */
export interface IObjectAttrs extends IElementAttrs {
    data?: string;
    form?: string;
    height?: string;
    name?: string;
    type?: string;
    typeMustMatch?: boolean;
    useMap?: string;
    width?: string;
}
/**
 * The attributes for `<ol>` elements.
 */
export interface IOListAttrs extends IElementAttrs {
    reversed?: boolean;
    start?: number;
    type?: string;
}
/**
 * The attributes for `<optgroup>` elements.
 */
export interface IOptGroupAttrs extends IElementAttrs {
    disabled?: boolean;
    label?: string;
}
/**
 * The attributes for `<option>` elements.
 */
export interface IOptionAttrs extends IElementAttrs {
    disabled?: boolean;
    label?: string;
    selected?: boolean;
    value?: string;
}
/**
 * The attributes for `<output>` elements.
 */
export interface IOutputAttrs extends IElementAttrs {
    form?: string;
    htmlFor?: string;
    name?: string;
}
/**
 * The attributes for `<param>` elements.
 */
export interface IParamAttrs extends IElementAttrs {
    name?: string;
    value?: string;
}
/**
 * The attributes for `<progress>` elements.
 */
export interface IProgressAttrs extends IElementAttrs {
    max?: number;
    value?: number;
}
/**
 * The attributes for `<blockquote>` elements.
 */
export interface IQuoteAttrs extends IElementAttrs {
    cite?: string;
}
/**
 * The attributes for `<select>` elements.
 */
export interface ISelectAttrs extends IElementAttrs {
    autofocus?: boolean;
    disabled?: boolean;
    form?: string;
    multiple?: boolean;
    name?: string;
    required?: boolean;
    size?: number;
}
/**
 * The attributes for `<source>` elements.
 */
export interface ISourceAttrs extends IElementAttrs {
    media?: string;
    sizes?: string;
    src?: string;
    srcset?: string;
    type?: string;
}
/**
 * The attributes for `<col>` elements.
 */
export interface ITableColAttrs extends IElementAttrs {
    span?: number;
}
/**
 * The attributes for `<td>` elements.
 */
export interface ITableDataCellAttrs extends IElementAttrs {
    colSpan?: number;
    headers?: number;
    rowSpan?: number;
}
/**
 * The attributes for `<th>` elements.
 */
export interface ITableHeaderCellAttrs extends IElementAttrs {
    colSpan?: number;
    headers?: string;
    rowSpan?: number;
    scope?: string;
    sorted?: string;
}
/**
 * The attributes for `<textarea>` elements.
 */
export interface ITextAreaAttrs extends IElementAttrs {
    autocomplete?: string;
    autofocus?: boolean;
    cols?: number;
    dirName?: string;
    disabled?: boolean;
    form?: string;
    inputMode?: string;
    maxLength?: number;
    minLength?: number;
    name?: string;
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    rows?: number;
    wrap?: string;
}
/**
 * The attributes for `<time>` elements.
 */
export interface ITimeAttrs extends IElementAttrs {
    dateTime?: string;
}
/**
 * The attributes for `<track>` elements.
 */
export interface ITrackAttrs extends IElementAttrs {
    default?: boolean;
    kind?: string;
    label?: string;
    src?: string;
    srclang?: string;
}
/**
 * The attributes for `<video>` elements.
 */
export interface IVideoAttrs extends IMediaAttrs {
    height?: number;
    poster?: string;
    width?: number;
}
/**
 * A node in a virtual DOM hierarchy.
 *
 * #### Notes
 * User code will not usually instantiate an node directly. Rather, the
 * `h()` function will be called to create a node in a type-safe manner.
 *
 * A node *must* be treated as immutable. Mutating the state of a node
 * **will** result in undefined rendering behavior.
 */
export declare class VNode {
    /**
     * The type of the node.
     *
     * #### Notes
     * An `'element'` type represents an `HTMLElement`.
     *
     * A `'text'` type represents a `Text` node.
     */
    type: 'element' | 'text';
    /**
     * The tag for the node.
     *
     * #### Notes
     * The interpretation of the tag depends upon the node `type`:
     *   - `'element'`: the element tag name
     *   - `'text'`: the text content
     */
    tag: string;
    /**
     * The attributes for the node.
     *
     * #### Notes
     * The interpretation of the attrs depends upon the node `type`:
     *   - `'element'`: the element attributes
     *   - `'text'`: an empty object
     */
    attrs: IVNodeAttrs;
    /**
     * The array of child elements.
     *
     * #### Notes
     * The interpretation of the children depends upon the node `type`:
     *   - `'element'`: the element children
     *   - `'text'`: an empty array
     */
    children: VNode[];
    /**
     * Construct a new virtual DOM node.
     *
     * @param type - The type of the node.
     *
     * @param tag - The node tag.
     *
     * @param attrs - The node attributes.
     *
     * @param children - The node children.
     */
    constructor(type: 'element' | 'text', tag: string, attrs: IVNodeAttrs, children: VNode[]);
}
/**
 * Create a new virtual DOM node.
 *
 * @param tag - The tag name for the node.
 *
 * @param attrs - The attributes for the node, if any.
 *
 * @param children - The children for the node, if any.
 *
 * @returns A new virtual DOM node for the given parameters.
 *
 * #### Notes
 * The children may be string literals, other virtual DOM nodes, or an
 * array of either of those things. String literals are converted into
 * text nodes, and arrays are inlined as if their contents were given
 * as positional arguments. This makes it easy to build up an array of
 * children by any desired means. `null` child values are ignored.
 *
 * A strongly typed bound function for each tag name is also available
 * as a static attached to the `h()` function. E.g. `h('div', ...)` is
 * equivalent to `h.div(...)`.
 */
export declare function h(tag: 'a', attrs?: IAnchorAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'abbr', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'address', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'area', attrs?: IAreaAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'article', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'aside', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'audio', attrs?: IMediaAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'b', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'bdi', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'bdo', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'blockquote', attrs?: IQuoteAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'br', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'button', attrs?: IButtonAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'canvas', attrs?: ICanvasAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'caption', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'cite', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'code', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'col', attrs?: ITableColAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'colgroup', attrs?: ITableColAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'data', attrs?: IDataAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'datalist', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'dd', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'del', attrs?: IModAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'dfn', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'div', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'dl', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'dt', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'em', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'embed', attrs?: IEmbedAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'fieldset', attrs?: IFieldSetAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'figcaption', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'figure', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'footer', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'form', attrs?: IFormAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h1', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h2', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h3', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h4', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h5', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'h6', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'header', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'hr', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'i', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'iframe', attrs?: IIFrameAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'img', attrs?: IImageAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'input', attrs?: IInputAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'ins', attrs?: IModAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'kbd', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'label', attrs?: ILabelAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'legend', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'li', attrs?: ILIAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'main', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'map', attrs?: IMapAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'mark', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'meter', attrs?: IMeterAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'nav', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'noscript', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'object', attrs?: IObjectAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'ol', attrs?: IOListAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'optgroup', attrs?: IOptGroupAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'option', attrs?: IOptionAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'output', attrs?: IOutputAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'p', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'param', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'pre', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'progress', attrs?: IProgressAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'q', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'rp', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'rt', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'ruby', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 's', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'samp', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'section', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'select', attrs?: ISelectAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'small', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'source', attrs?: ISourceAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'span', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'strong', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'sub', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'summary', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'sup', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'table', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'tbody', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'td', attrs?: ITableDataCellAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'textarea', attrs?: ITextAreaAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'tfoot', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'th', attrs?: ITableHeaderCellAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'thead', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'time', attrs?: ITimeAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'title', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'tr', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'track', attrs?: ITrackAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'u', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'ul', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'var', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'video', attrs?: IVideoAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: 'wbr', attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
export declare function h(tag: string, attrs?: IElementAttrs, ...children: h.FactoryChild[]): VNode;
/**
 * The namespace for the `h()` function statics.
 */
export declare namespace h {
    type FactoryChild = (string | VNode) | Array<string | VNode>;
    type Factory<T extends IVNodeAttrs> = (attrs?: T, ...children: FactoryChild[]) => VNode;
    const a: Factory<IAnchorAttrs>;
    const abbr: Factory<IElementAttrs>;
    const address: Factory<IElementAttrs>;
    const area: Factory<IAreaAttrs>;
    const article: Factory<IElementAttrs>;
    const aside: Factory<IElementAttrs>;
    const audio: Factory<IMediaAttrs>;
    const b: Factory<IElementAttrs>;
    const bdi: Factory<IElementAttrs>;
    const bdo: Factory<IElementAttrs>;
    const blockquote: Factory<IQuoteAttrs>;
    const br: Factory<IElementAttrs>;
    const button: Factory<IButtonAttrs>;
    const canvas: Factory<ICanvasAttrs>;
    const caption: Factory<IElementAttrs>;
    const cite: Factory<IElementAttrs>;
    const code: Factory<IElementAttrs>;
    const col: Factory<ITableColAttrs>;
    const colgroup: Factory<ITableColAttrs>;
    const data: Factory<IDataAttrs>;
    const datalist: Factory<IElementAttrs>;
    const dd: Factory<IElementAttrs>;
    const del: Factory<IModAttrs>;
    const dfn: Factory<IElementAttrs>;
    const div: Factory<IElementAttrs>;
    const dl: Factory<IElementAttrs>;
    const dt: Factory<IElementAttrs>;
    const em: Factory<IElementAttrs>;
    const embed: Factory<IEmbedAttrs>;
    const fieldset: Factory<IFieldSetAttrs>;
    const figcaption: Factory<IElementAttrs>;
    const figure: Factory<IElementAttrs>;
    const footer: Factory<IElementAttrs>;
    const form: Factory<IFormAttrs>;
    const h1: Factory<IElementAttrs>;
    const h2: Factory<IElementAttrs>;
    const h3: Factory<IElementAttrs>;
    const h4: Factory<IElementAttrs>;
    const h5: Factory<IElementAttrs>;
    const h6: Factory<IElementAttrs>;
    const header: Factory<IElementAttrs>;
    const hr: Factory<IElementAttrs>;
    const i: Factory<IElementAttrs>;
    const iframe: Factory<IIFrameAttrs>;
    const img: Factory<IImageAttrs>;
    const input: Factory<IInputAttrs>;
    const ins: Factory<IModAttrs>;
    const kbd: Factory<IElementAttrs>;
    const label: Factory<ILabelAttrs>;
    const legend: Factory<IElementAttrs>;
    const li: Factory<ILIAttrs>;
    const main: Factory<IElementAttrs>;
    const map: Factory<IMapAttrs>;
    const mark: Factory<IElementAttrs>;
    const meter: Factory<IMeterAttrs>;
    const nav: Factory<IElementAttrs>;
    const noscript: Factory<IElementAttrs>;
    const object: Factory<IObjectAttrs>;
    const ol: Factory<IOListAttrs>;
    const optgroup: Factory<IOptGroupAttrs>;
    const option: Factory<IOptionAttrs>;
    const output: Factory<IOutputAttrs>;
    const p: Factory<IElementAttrs>;
    const param: Factory<IElementAttrs>;
    const pre: Factory<IElementAttrs>;
    const progress: Factory<IProgressAttrs>;
    const q: Factory<IElementAttrs>;
    const rp: Factory<IElementAttrs>;
    const rt: Factory<IElementAttrs>;
    const ruby: Factory<IElementAttrs>;
    const s: Factory<IElementAttrs>;
    const samp: Factory<IElementAttrs>;
    const section: Factory<IElementAttrs>;
    const select: Factory<ISelectAttrs>;
    const small: Factory<IElementAttrs>;
    const source: Factory<ISourceAttrs>;
    const span: Factory<IElementAttrs>;
    const strong: Factory<IElementAttrs>;
    const sub: Factory<IElementAttrs>;
    const summary: Factory<IElementAttrs>;
    const sup: Factory<IElementAttrs>;
    const table: Factory<IElementAttrs>;
    const tbody: Factory<IElementAttrs>;
    const td: Factory<ITableDataCellAttrs>;
    const textarea: Factory<ITextAreaAttrs>;
    const tfoot: Factory<IElementAttrs>;
    const th: Factory<ITableHeaderCellAttrs>;
    const thead: Factory<IElementAttrs>;
    const time: Factory<ITimeAttrs>;
    const title: Factory<IElementAttrs>;
    const tr: Factory<IElementAttrs>;
    const track: Factory<ITrackAttrs>;
    const u: Factory<IElementAttrs>;
    const ul: Factory<IElementAttrs>;
    const var_: Factory<IElementAttrs>;
    const video: Factory<IVideoAttrs>;
    const wbr: Factory<IElementAttrs>;
}
/**
 * Create a real DOM node from a virtual DOM node.
 *
 * @param content - The virtual DOM content to realize.
 *
 * @returns A new DOM node for the given virtual DOM tree.
 *
 * #### Notes
 * The content node is assumed to be of the `'element'` type.
 *
 * This creates a brand new *real* DOM node with a structure which
 * matches the given virtual DOM node.
 *
 * If virtual diffing is desired, use the `render` function instead.
 */
export declare function realize(content: VNode): HTMLElement;
/**
 * Render virtual DOM content into a host element.
 *
 * @param content - The virtual DOM content to render.
 *
 * @param host - The host element for the rendered content.
 *
 * #### Notes
 * This renders the delta from the previous rendering. It assumes that
 * the content of the host element is not manipulated by external code.
 *
 * Providing `null` content will clear the rendering.
 *
 * Externally modifying the provided content or the host element will
 * result in undefined rendering behavior.
 */
export declare function render(content: VNode | VNode[], host: HTMLElement): void;
