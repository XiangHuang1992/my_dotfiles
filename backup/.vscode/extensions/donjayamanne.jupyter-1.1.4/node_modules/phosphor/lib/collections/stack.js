"use strict";
/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2016, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
var iteration_1 = require("../algorithm/iteration");
/**
 * A generic LIFO stack data structure.
 */
var Stack = (function () {
    /**
     * Construct a new stack.
     *
     * @param values - The initial values for the stack.
     */
    function Stack(values) {
        var _this = this;
        this._array = [];
        if (values)
            iteration_1.each(values, function (value) { _this.pushBack(value); });
    }
    Object.defineProperty(Stack.prototype, "isEmpty", {
        /**
         * Test whether the stack is empty.
         *
         * @returns `true` if the stack is empty, `false` otherwise.
         *
         * #### Notes
         * This is a read-only property.
         *
         * #### Complexity
         * Constant.
         *
         * #### Iterator Validity
         * No changes.
         */
        get: function () {
            return this._array.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stack.prototype, "length", {
        /**
         * Get the length of the stack.
         *
         * @return The number of values in the stack.
         *
         * #### Notes
         * This is a read-only property.
         *
         * #### Complexity
         * Constant.
         *
         * #### Iterator Validity
         * No changes.
         */
        get: function () {
            return this._array.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stack.prototype, "back", {
        /**
         * Get the value at the back of the stack.
         *
         * @returns The value at the back of the stack, or `undefined` if
         *   the stack is empty.
         *
         * #### Notes
         * This is a read-only property.
         *
         * #### Complexity
         * Constant.
         *
         * #### Iterator Validity
         * No changes.
         */
        get: function () {
            return this._array[this._array.length - 1];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create an iterator over the values in the stack.
     *
     * @returns A new iterator starting at the top of the stack.
     *
     * #### Complexity
     * Constant.
     *
     * #### Iterator Validity
     * No changes.
     */
    Stack.prototype.iter = function () {
        return new StackIterator(this._array, this._array.length - 1);
    };
    /**
     * Add a value to the back of the stack.
     *
     * @param value - The value to add to the back of the stack.
     *
     * @returns The new length of the stack.
     *
     * #### Complexity
     * Constant.
     *
     * #### Iterator Validity
     * No changes.
     */
    Stack.prototype.pushBack = function (value) {
        return this._array.push(value);
    };
    /**
     * Remove and return the value at the back of the stack.
     *
     * @returns The value at the back of the stack, or `undefined` if
     *   the stack is empty.
     *
     * #### Complexity
     * Constant.
     *
     * #### Iterator Validity
     * Iterators pointing at the removed value are invalidated.
     */
    Stack.prototype.popBack = function () {
        return this._array.pop();
    };
    /**
     * Remove all values from the stack.
     *
     * #### Complexity
     * Linear.
     *
     * #### Iterator Validity
     * All current iterators are invalidated.
     */
    Stack.prototype.clear = function () {
        this._array.length = 0;
    };
    /**
     * Swap the contents of the stack with the contents of another.
     *
     * @param other - The other stack holding the contents to swap.
     *
     * #### Complexity
     * Constant.
     *
     * #### Iterator Validity
     * All current iterators remain valid, but will now point to the
     * contents of the other stack involved in the swap.
     */
    Stack.prototype.swap = function (other) {
        var array = other._array;
        other._array = this._array;
        this._array = array;
    };
    return Stack;
}());
exports.Stack = Stack;
/**
 * An iterator for a stack.
 */
var StackIterator = (function () {
    /**
     * Construct a new stack iterator.
     *
     * @param array - The stack of values of interest.
     *
     * @param index - The index of the top of the stack.
     */
    function StackIterator(array, index) {
        this._array = array;
        this._index = index;
    }
    /**
     * Create an iterator over the object's values.
     *
     * @returns A reference to `this` iterator.
     */
    StackIterator.prototype.iter = function () {
        return this;
    };
    /**
     * Create an independent clone of the stack iterator.
     *
     * @returns A new iterator starting with the current value.
     */
    StackIterator.prototype.clone = function () {
        return new StackIterator(this._array, this._index);
    };
    /**
     * Get the next value from the stack.
     *
     * @returns The next value from the stack, or `undefined` if the
     *   iterator is exhausted.
     */
    StackIterator.prototype.next = function () {
        if (this._index < 0 || this._index >= this._array.length) {
            return void 0;
        }
        return this._array[this._index--];
    };
    return StackIterator;
}());
