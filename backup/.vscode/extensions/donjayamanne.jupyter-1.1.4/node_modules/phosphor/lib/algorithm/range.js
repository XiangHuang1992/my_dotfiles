"use strict";
/**
 * Create a range of evenly spaced values.
 *
 * @param start - The starting value for the range, inclusive.
 *
 * @param stop - The stopping value for the range, exclusive.
 *
 * @param step - The nonzero distance between each value.
 *
 * @returns A range object which produces evenly spaced values.
 *
 * #### Notes
 * In the single argument form of `range(stop)`, `start` defaults to
 * `0` and `step` defaults to `1`.
 *
 * In the two argument form of `range(start, stop)`, `step` defaults
 * to `1`.
 *
 * All values can be any real number, but `step` cannot be `0`.
 */
function range(start, stop, step) {
    if (stop === void 0) {
        return new Range(0, start, 1);
    }
    if (step === void 0) {
        return new Range(start, stop, 1);
    }
    return new Range(start, stop, step);
}
exports.range = range;
/**
 * An object which produces a range of evenly spaced values.
 */
var Range = (function () {
    /**
     * Construct a new range.
     *
     * @param start - The starting value for the range, inclusive.
     *
     * @param stop - The stopping value for the range, exclusive.
     *
     * @param step - The nonzero distance between each value.
     */
    function Range(start, stop, step) {
        if (step === 0)
            throw new Error('Range(): Step cannot be zero');
        this._start = start;
        this._stop = stop;
        this._step = step;
        this._length = rangeLength(start, stop, step);
    }
    Object.defineProperty(Range.prototype, "start", {
        /**
         * The starting value for the range, inclusive.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._start;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "stop", {
        /**
         * The stopping value for the range, exclusive.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._stop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "step", {
        /**
         * The distance between each value.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Range.prototype, "length", {
        /**
         * The number of values in the range.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create an iterator over the range of values.
     *
     * @returns A new iterator for the range of values.
     */
    Range.prototype.iter = function () {
        return new RangeIterator(this._start, this._stop, this._step);
    };
    /**
     * Get the value at the specified index.
     *
     * @param index - The positive integer index of interest.
     *
     * @returns The value at the specified index.
     *
     * #### Undefined Behavior
     * An `index` which is non-integral or out of range.
     */
    Range.prototype.at = function (index) {
        return this._start + this._step * index;
    };
    return Range;
}());
exports.Range = Range;
/**
 * An iterator which generates evenly spaced values.
 */
var RangeIterator = (function () {
    /**
     * Construct a new range iterator.
     *
     * @param start - The starting value for the range, inclusive.
     *
     * @param stop - The stopping value for the range, exclusive.
     *
     * @param step - The non-zero distance between each value.
     */
    function RangeIterator(start, stop, step) {
        if (step === 0)
            throw new Error('RangeIterator(): Step cannot be zero');
        this._index = 0;
        this._step = step;
        this._start = start;
        this._length = rangeLength(start, stop, step);
    }
    /**
     * Create an iterator over the object's values.
     *
     * @returns A reference to `this` iterator.
     */
    RangeIterator.prototype.iter = function () {
        return this;
    };
    /**
     * Create an independent clone of the range iterator.
     *
     * @returns A new iterator starting with the current value.
     */
    RangeIterator.prototype.clone = function () {
        var start = this._start + this._step * this._index;
        var stop = this._start + this._step * this._length;
        return new RangeIterator(start, stop, this._step);
    };
    /**
     * Get the next value from the range.
     *
     * @returns The next value from the range, or `undefined` if the
     *   iterator is exhausted.
     */
    RangeIterator.prototype.next = function () {
        if (this._index >= this._length) {
            return void 0;
        }
        return this._start + this._step * this._index++;
    };
    return RangeIterator;
}());
exports.RangeIterator = RangeIterator;
/**
 * Compute the effective length of a range.
 *
 * @param start - The starting value for the range, inclusive.
 *
 * @param stop - The stopping value for the range, exclusive.
 *
 * @param step - The non-zero distance between each value.
 *
 * @returns The number of steps need to traverse the range.
 */
function rangeLength(start, stop, step) {
    if (start > stop && step > 0) {
        return 0;
    }
    if (start < stop && step < 0) {
        return 0;
    }
    return Math.ceil((stop - start) / step);
}
