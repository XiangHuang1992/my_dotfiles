/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2016, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
"use strict";
/**
 * Topologically sort an array of edges.
 *
 * @param edges - The array of edges to sort. An edge is represented
 *   as a 2-tuple of the form `[fromNode, toNode]`.
 *
 * @returns The sorted array of nodes.
 *
 * #### Notes
 * If a cycle is present in the graph, the cycle will be ignored and
 * the return value will be only approximately sorted.
 */
function topSort(edges) {
    // Setup the shared sorting state.
    var sorted = [];
    var graph = Object.create(null);
    var visited = Object.create(null);
    // Add the edges to the graph.
    for (var _i = 0, edges_1 = edges; _i < edges_1.length; _i++) {
        var _a = edges_1[_i], fromNode = _a[0], toNode = _a[1];
        addEdge(fromNode, toNode);
    }
    // Visit each node in the graph.
    for (var node in graph) {
        visit(node);
    }
    // Return the sorted results.
    return sorted;
    // Add an edge to the graph.
    function addEdge(fromNode, toNode) {
        if (toNode in graph) {
            graph[toNode].push(fromNode);
        }
        else {
            graph[toNode] = [fromNode];
        }
    }
    // Recursively visit the node.
    function visit(node) {
        if (node in visited) {
            return;
        }
        visited[node] = true;
        if (node in graph) {
            for (var _i = 0, _a = graph[node]; _i < _a.length; _i++) {
                var other = _a[_i];
                visit(other);
            }
        }
        sorted.push(node);
    }
}
exports.topSort = topSort;
