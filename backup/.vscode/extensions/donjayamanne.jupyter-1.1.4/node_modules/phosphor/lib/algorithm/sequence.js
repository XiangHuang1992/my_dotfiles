"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2016, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
var iteration_1 = require("./iteration");
/**
 * Cast a sequence or array-like object to a sequence.
 *
 * @param object - The sequence or array-like object of interest.
 *
 * @returns A sequence for the given object.
 *
 * #### Notes
 * This function allows sequence algorithms to operate on user-defined
 * sequence types and builtin array-like objects in a uniform fashion.
 */
function asSequence(object) {
    var seq;
    if (typeof object.at === 'function') {
        seq = object;
    }
    else {
        seq = new ArraySequence(object);
    }
    return seq;
}
exports.asSequence = asSequence;
/**
 * Cast a mutable sequence or array-like object to a mutable sequence.
 *
 * @param object - The sequence or array-like object of interest.
 *
 * @returns A mutable sequence for the given object.
 *
 * #### Notes
 * This function allows sequence algorithms to operate on user-defined
 * sequence types and builtin array-like objects in a uniform fashion.
 */
function asMutableSequence(object) {
    var seq;
    if (typeof object.set === 'function') {
        seq = object;
    }
    else {
        seq = new MutableArraySequence(object);
    }
    return seq;
}
exports.asMutableSequence = asMutableSequence;
/**
 * A sequence for an array-like object.
 *
 * #### Notes
 * This sequence can be used for any builtin JS array-like object.
 */
var ArraySequence = (function () {
    /**
     * Construct a new array sequence.
     *
     * @param source - The array-like object of interest.
     */
    function ArraySequence(source) {
        this._source = source;
    }
    Object.defineProperty(ArraySequence.prototype, "length", {
        /**
         * The length of the sequence.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._source.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Create an iterator over the object's values.
     *
     * @returns A new iterator which traverses the object's values.
     */
    ArraySequence.prototype.iter = function () {
        return new iteration_1.ArrayIterator(this._source, 0);
    };
    /**
     * Get the value at the specified index.
     *
     * @param index - The positive integer index of interest.
     *
     * @returns The value at the specified index.
     *
     * #### Undefined Behavior
     * An `index` which is non-integral or out of range.
     */
    ArraySequence.prototype.at = function (index) {
        return this._source[index];
    };
    return ArraySequence;
}());
exports.ArraySequence = ArraySequence;
/**
 * A sequence for a mutable array-like object.
 *
 * #### Notes
 * This sequence can be used for any builtin JS array-like object.
 */
var MutableArraySequence = (function (_super) {
    __extends(MutableArraySequence, _super);
    function MutableArraySequence() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Set the value at the specified index.
     *
     * @param index - The positive integer index of interest.
     *
     * @param value - The value to set at the specified index.
     *
     * #### Undefined Behavior
     * An `index` which is non-integral or out of range.
     */
    MutableArraySequence.prototype.set = function (index, value) {
        this._source[index] = value;
    };
    return MutableArraySequence;
}(ArraySequence));
exports.MutableArraySequence = MutableArraySequence;
