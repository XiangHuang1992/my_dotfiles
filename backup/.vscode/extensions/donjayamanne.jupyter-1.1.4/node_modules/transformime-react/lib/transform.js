'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.displayOrder = exports.transforms = undefined;
exports.richestMimetype = richestMimetype;

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _textDisplay = require('./components/text-display');

var _textDisplay2 = _interopRequireDefault(_textDisplay);

var _javascriptDisplay = require('./components/javascript-display');

var _javascriptDisplay2 = _interopRequireDefault(_javascriptDisplay);

var _htmlDisplay = require('./components/html-display');

var _htmlDisplay2 = _interopRequireDefault(_htmlDisplay);

var _markdownDisplay = require('./components/markdown-display');

var _markdownDisplay2 = _interopRequireDefault(_markdownDisplay);

var _latexDisplay = require('./components/latex-display');

var _latexDisplay2 = _interopRequireDefault(_latexDisplay);

var _imageDisplay = require('./components/image-display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transforms = exports.transforms = new _immutable2.default.Map({
  'text/plain': _textDisplay2.default,
  'image/png': _imageDisplay.PNGDisplay,
  'image/jpeg': _imageDisplay.JPEGDisplay,
  'image/gif': _imageDisplay.GIFDisplay,
  'text/html': _htmlDisplay2.default,
  'text/markdown': _markdownDisplay2.default,
  'text/latex': _latexDisplay2.default,
  'application/javascript': _javascriptDisplay2.default
});

var displayOrder = exports.displayOrder = new _immutable2.default.List(['application/javascript', 'text/html', 'text/markdown', 'text/latex', 'image/svg+xml', 'image/gif', 'image/png', 'image/jpeg', 'application/pdf', 'text/plain']);

/**
 * Choose the richest mimetype available based on the displayOrder and transforms
 * @param  {Immutable.Map}   bundle - Map({mimetype1: data1, mimetype2: data2, ...})
 * @param  {Immutable.List}  ordered list of mimetypes - List(['text/html', 'text/plain'])
 * @param  {Immutable.Map}   mimetype -> React Component - Map({'text/plain': TextTransform})
 * @return {string}          Richest mimetype
 */
function richestMimetype(bundle) {
  var order = arguments.length <= 1 || arguments[1] === undefined ? displayOrder : arguments[1];
  var tf = arguments.length <= 2 || arguments[2] === undefined ? transforms : arguments[2];

  return bundle.keySeq()
  // we can only use those we have a transform for
  .filter(function (mimetype) {
    return tf.has(mimetype) && order.includes(mimetype);
  })
  // the richest is based on the order in displayOrder
  .sortBy(function (mimetype) {
    return order.indexOf(mimetype);
  }).first();
}
//# sourceMappingURL=transform.js.map