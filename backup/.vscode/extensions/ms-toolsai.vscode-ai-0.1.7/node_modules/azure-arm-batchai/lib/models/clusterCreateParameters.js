/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Parameters supplied to the Create operation.
 *
 */
class ClusterCreateParameters {
  /**
   * Create a ClusterCreateParameters.
   * @member {string} location The region in which to create the cluster.
   * @member {object} [tags] The user specified tags associated with the
   * Cluster.
   * @member {string} vmSize The size of the virtual machines in the cluster.
   * All virtual machines in a cluster are the same size. For information about
   * available VM sizes for clusters using images from the Virtual Machines
   * Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for Virtual
   * Machines (Windows). Batch AI service supports all Azure VM sizes except
   * STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and
   * STANDARD_DSV2 series).
   * @member {string} [vmPriority] dedicated or lowpriority. Default is
   * dedicated. Possible values include: 'dedicated', 'lowpriority'. Default
   * value: 'dedicated' .
   * @member {object} [scaleSettings] Desired scale for the cluster.
   * @member {object} [scaleSettings.manual]
   * @member {number} [scaleSettings.manual.targetNodeCount] Default is 0. If
   * autoScaleSettings are not specified, then the Cluster starts with this
   * target.
   * @member {string} [scaleSettings.manual.nodeDeallocationOption] The default
   * value is requeue. Possible values include: 'requeue', 'terminate',
   * 'waitforjobcompletion', 'unknown'
   * @member {object} [scaleSettings.autoScale]
   * @member {number} [scaleSettings.autoScale.minimumNodeCount]
   * @member {number} [scaleSettings.autoScale.maximumNodeCount]
   * @member {number} [scaleSettings.autoScale.initialNodeCount]
   * @member {object} [virtualMachineConfiguration] Settings for OS image and
   * mounted data volumes.
   * @member {object} [virtualMachineConfiguration.imageReference]
   * @member {string} [virtualMachineConfiguration.imageReference.publisher]
   * @member {string} [virtualMachineConfiguration.imageReference.offer]
   * @member {string} [virtualMachineConfiguration.imageReference.sku]
   * @member {string} [virtualMachineConfiguration.imageReference.version]
   * @member {object} [nodeSetup] Setup to be done on all compute nodes in the
   * cluster.
   * @member {object} [nodeSetup.setupTask]
   * @member {string} [nodeSetup.setupTask.commandLine]
   * @member {array} [nodeSetup.setupTask.environmentVariables]
   * @member {boolean} [nodeSetup.setupTask.runElevated]
   * @member {string} [nodeSetup.setupTask.stdOutErrPathPrefix] The path where
   * the Batch AI service will upload the stdout and stderror of setup task.
   * @member {object} [nodeSetup.mountVolumes]
   * @member {array} [nodeSetup.mountVolumes.azureFileShares] References to
   * Azure File Shares that are to be mounted to the cluster nodes.
   * @member {array} [nodeSetup.mountVolumes.azureBlobFileSystems] References
   * to Azure Blob FUSE that are to be mounted to the cluster nodes.
   * @member {array} [nodeSetup.mountVolumes.fileServers]
   * @member {array} [nodeSetup.mountVolumes.unmanagedFileSystems]
   * @member {object} userAccountSettings Settings for user account that will
   * be created on all compute nodes of the cluster.
   * @member {string} [userAccountSettings.adminUserName]
   * @member {string} [userAccountSettings.adminUserSshPublicKey]
   * @member {string} [userAccountSettings.adminUserPassword]
   * @member {object} [subnet] Specifies the identifier of the subnet. .
   * @member {string} [subnet.id] The ID of the resource
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterCreateParameters
   *
   * @returns {object} metadata of ClusterCreateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterCreateParameters',
      type: {
        name: 'Composite',
        className: 'ClusterCreateParameters',
        modelProperties: {
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          vmSize: {
            required: true,
            serializedName: 'properties.vmSize',
            type: {
              name: 'String'
            }
          },
          vmPriority: {
            required: false,
            serializedName: 'properties.vmPriority',
            defaultValue: 'dedicated',
            type: {
              name: 'Enum',
              allowedValues: [ 'dedicated', 'lowpriority' ]
            }
          },
          scaleSettings: {
            required: false,
            serializedName: 'properties.scaleSettings',
            type: {
              name: 'Composite',
              className: 'ScaleSettings'
            }
          },
          virtualMachineConfiguration: {
            required: false,
            serializedName: 'properties.virtualMachineConfiguration',
            type: {
              name: 'Composite',
              className: 'VirtualMachineConfiguration'
            }
          },
          nodeSetup: {
            required: false,
            serializedName: 'properties.nodeSetup',
            type: {
              name: 'Composite',
              className: 'NodeSetup'
            }
          },
          userAccountSettings: {
            required: true,
            serializedName: 'properties.userAccountSettings',
            type: {
              name: 'Composite',
              className: 'UserAccountSettings'
            }
          },
          subnet: {
            required: false,
            serializedName: 'properties.subnet',
            type: {
              name: 'Composite',
              className: 'ResourceId'
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterCreateParameters;
