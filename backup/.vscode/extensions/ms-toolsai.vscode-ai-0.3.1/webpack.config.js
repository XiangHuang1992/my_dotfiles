'use strict';
const fs = require('fs-extra');
const glob = require('glob');
const path = require('path');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const UglifyPlugin = require('uglifyjs-webpack-plugin');

const production = process.env === 'production';

const babelOptions = {
  'presets': [
    'react',
    ['env', {
      targets: {
        electron: '2.0.5'
      },
    }],
  ]
};

function getPlugins(text) {
  const plugins = [
    {
      apply: (compiler) => {
        compiler.hooks.beforeCompile.tap("WebpackInfo", compilation => {
          console.log(`${text} compilation startingâ€¦`);
        });
        compiler.hooks.afterCompile.tap("WebpackInfo", compilation => {
          console.log(`${text} compilation finished`);
        });
      }
    }
  ];
  if (production) {
    plugins.push(new UglifyPlugin({ parallel: true }))
  }

  return plugins;
}

const frontend = {
  cache: true,
  entry: {
    jobListView: 'joblistView.tsx',
    jobDetailView: 'jobDetailView.tsx',
    galleryView: 'galleryView.tsx',
    galleryDetailView: 'galleryDetailView.tsx',
    startPage: 'homepage/startPage.tsx',
    installationPage: 'homepage/installationPage.tsx',
    samplePage: 'homepage/samplePage.tsx',
    docConfig: 'docConfig.tsx',
    feedback: 'feedback.tsx'
  },
  output: {
    path: path.resolve(__dirname, './out/public'),
    filename: '[name].js'
  },
  module: {
    rules: [{
      test: /\.ts(x?)$/,
      exclude: /node_modules/,
      use: [
        {
          loader: 'babel-loader',
          options: babelOptions
        },
        {
          loader: 'ts-loader'
        }
      ]
    }, {
      test: /\.js$/,
      exclude: /node_modules/,
      use: [
        {
          loader: 'babel-loader',
          options: babelOptions
        }
      ]
    }, {
      test: /\.css$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            modules: true,
            camelCase: true
          }
        }
      ]
    }]
  },
  plugins: [
    ...getPlugins('Frontend'),
    new CopyWebpackPlugin([
      { from: path.resolve(__dirname, './src/scripts/docs/'), to: path.resolve(__dirname, './out/public/docs') }
    ])
  ],
  resolve: {
    modules: [path.resolve(__dirname, 'src', 'scripts'), 'node_modules'],
    extensions: ['.ts', '.tsx', '.js']
  },
};

const initializeJS = path.join(__dirname, 'src', 'initialize.ts');
const files = glob.sync('**/*.ts', {
  cwd: path.join(__dirname, 'src'),
  ignore: [
    '**/*.d.ts',
    'scripts/**'
  ]
});
let result = [];
result.push(`// This file is auto generated by webpack.config.js.`);
result.push(`// tslint:disable`)
for (let file of files) {
    const ext = path.extname(file);
    result.push(`import '${file.slice(0, file.length - ext.length)}';`);
}
fs.writeFileSync(initializeJS, result.join('\n'));

const backend = {
  cache: true,
  devtool: !production ? "source-map" : false,
  entry: path.join(__dirname, 'src', 'extension.ts'),
  node: {
    __dirname: true,
    __filename: true,
  },
  output: {
    libraryTarget: 'umd',
    path: path.resolve(__dirname, 'out', 'src'),
    filename: 'extension.js',
    devtoolModuleFilenameTemplate: '[absolute-resource-path]'
  },
  target: 'node',
  module: {
    rules: [{
      test: /\.ts(x?)$/,
      exclude: [/node_modules/, /\.d.ts$/],
      use: [
        {
          loader: 'ts-loader'
        }
      ]
    }, {
      test: /\.d.ts$/,
      use: 'ignore-loader'
    }]
  },
  externals: [
    'colors/safe',
    'copy-paste',
    'cross-spawn',
    'express',
    'formidable',
    'globalize',
    'vscode',
    'vscode-extension-telemetry'
  ],
  plugins: getPlugins('Backend'),
  resolve: {
    modules: [path.resolve(__dirname, 'src'), 'node_modules'],
    extensions: ['.ts', '.tsx', '.js']
  },
};

module.exports = [
  backend,
  frontend
];