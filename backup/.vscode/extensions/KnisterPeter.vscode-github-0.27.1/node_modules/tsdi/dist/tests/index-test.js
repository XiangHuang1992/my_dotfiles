"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
require("source-map-support/register");
var tsdi_1 = require("../lib/tsdi");
var cyclic1_1 = require("./cyclic1");
var dependency_1 = require("./dependency");
var eager1_1 = require("./eager1");
var eager2_1 = require("./eager2");
var user_1 = require("./user");
describe('TSDI', function () {
    describe('when creating a container instance', function () {
        var tsdi;
        beforeEach(function () {
            tsdi = new tsdi_1.TSDI();
        });
        afterEach(function () {
            tsdi.close();
        });
        it('a returned component should be of the requested instance', function () {
            tsdi.register(user_1.User);
            tsdi.register(dependency_1.Dependency);
            var user = tsdi.get(user_1.User);
            chai_1.assert.isTrue(user instanceof user_1.User);
        });
        it('a returned instance should have all dependencies satisfied', function () {
            tsdi.register(user_1.User);
            tsdi.register(dependency_1.Dependency);
            var user = tsdi.get(user_1.User);
            chai_1.assert.equal(user.method(), 'hello');
        });
        it('two returned instances should have the same dependency instances', function () {
            tsdi.register(user_1.User);
            tsdi.register(dependency_1.Dependency);
            var user1 = tsdi.get(user_1.User);
            var user2 = tsdi.get(user_1.User);
            chai_1.assert.equal(user1.getDep(), user2.getDep());
        });
        it('a returned instance should call decorated lifecycle methods when available', function () {
            tsdi.register(user_1.User);
            tsdi.register(dependency_1.Dependency);
            var user = tsdi.get(user_1.User);
            chai_1.assert.equal(user.initResult(), 'init');
        });
        it('enabling componentScanner should add all known components to the container', function () {
            tsdi.enableComponentScanner();
            var user = tsdi.get(user_1.User);
            chai_1.assert.isTrue(user instanceof user_1.User);
        });
        it('a container with enabled componentScanner should lazy register components', function () {
            tsdi.enableComponentScanner();
            var Late = /** @class */ (function () {
                function Late() {
                }
                Late = __decorate([
                    tsdi_1.component()
                ], Late);
                return Late;
            }());
            var late = tsdi.get(Late);
            chai_1.assert.isTrue(late instanceof Late);
        });
        it('components could registered by name', function () {
            var A = /** @class */ (function () {
                function A() {
                }
                return A;
            }());
            var B = /** @class */ (function (_super) {
                __extends(B, _super);
                function B() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                B = __decorate([
                    tsdi_1.Component()
                ], B);
                return B;
            }(A));
            tsdi.register(A);
            tsdi.register(B, 'Foo');
            chai_1.assert.equal(tsdi.get(A, 'Foo'), tsdi.get(B));
        });
        it('components could registered with metadata', function () {
            var A = /** @class */ (function () {
                function A() {
                }
                return A;
            }());
            var B = /** @class */ (function (_super) {
                __extends(B, _super);
                function B() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                B = __decorate([
                    tsdi_1.Component({ name: 'RegisteredWithMetadata' })
                ], B);
                return B;
            }(A));
            tsdi.register(A);
            tsdi.register(B);
            chai_1.assert.equal(tsdi.get(A, 'RegisteredWithMetadata'), tsdi.get(B));
        });
        it('components could be queried by name', function () {
            tsdi.enableComponentScanner();
            var A = /** @class */ (function () {
                function A() {
                }
                A.prototype.m = function () { return 'a'; };
                A = __decorate([
                    tsdi_1.Component()
                ], A);
                return A;
            }());
            var BExtendsA = /** @class */ (function (_super) {
                __extends(BExtendsA, _super);
                // @ts-ignore // ignore unused warning
                function BExtendsA() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BExtendsA.prototype.m = function () { return 'b'; };
                BExtendsA = __decorate([
                    tsdi_1.Component()
                    // @ts-ignore // ignore unused warning
                ], BExtendsA);
                return BExtendsA;
            }(A));
            var CExtendsA = /** @class */ (function (_super) {
                __extends(CExtendsA, _super);
                // @ts-ignore // ignore unused warning
                function CExtendsA() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CExtendsA.prototype.m = function () { return 'c'; };
                CExtendsA = __decorate([
                    tsdi_1.Component({ name: 'Foo' })
                    // @ts-ignore // ignore unused warning
                ], CExtendsA);
                return CExtendsA;
            }(A));
            var DExtendsA = /** @class */ (function (_super) {
                __extends(DExtendsA, _super);
                // @ts-ignore // ignore unused warning
                function DExtendsA() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                DExtendsA.prototype.m = function () {
                    return this.a.m();
                };
                __decorate([
                    tsdi_1.inject({ name: 'Foo' }),
                    __metadata("design:type", A)
                ], DExtendsA.prototype, "a", void 0);
                DExtendsA = __decorate([
                    tsdi_1.Component({ name: 'Bar' })
                    // @ts-ignore // ignore unused warning
                ], DExtendsA);
                return DExtendsA;
            }(A));
            chai_1.assert.equal(tsdi.get(A, 'Bar').m(), 'c');
        });
        it('should warn if register component with duplicate name', function (done) {
            var A = /** @class */ (function () {
                function A() {
                }
                return A;
            }());
            var B = /** @class */ (function () {
                function B() {
                }
                return B;
            }());
            var consoleWarn = console.warn;
            try {
                console.warn = function (msg) {
                    chai_1.assert.equal(msg, "Component with name 'DuplicateComponentName' already registered.");
                    done();
                };
                tsdi.register(A, 'DuplicateComponentName');
                tsdi.register(B, 'DuplicateComponentName');
            }
            finally {
                console.warn = consoleWarn;
            }
        });
        it('should inject defined properties', function () {
            var ComponentWithProperties = /** @class */ (function () {
                function ComponentWithProperties() {
                }
                Object.defineProperty(ComponentWithProperties.prototype, "prop", {
                    get: function () { return this._prop; },
                    enumerable: true,
                    configurable: true
                });
                __decorate([
                    tsdi_1.Inject({ name: 'prop' }),
                    __metadata("design:type", Boolean)
                ], ComponentWithProperties.prototype, "_prop", void 0);
                ComponentWithProperties = __decorate([
                    tsdi_1.Component()
                ], ComponentWithProperties);
                return ComponentWithProperties;
            }());
            tsdi.addProperty('prop', false);
            tsdi.register(ComponentWithProperties);
            chai_1.assert.equal(tsdi.get(ComponentWithProperties).prop, false);
        });
        it('should throw if requried component was not found', function () {
            var NonRegisteredComponent = /** @class */ (function () {
                function NonRegisteredComponent() {
                }
                NonRegisteredComponent = __decorate([
                    tsdi_1.Component()
                ], NonRegisteredComponent);
                return NonRegisteredComponent;
            }());
            try {
                tsdi.get(NonRegisteredComponent);
                chai_1.assert.fail('Should throw');
            }
            catch (e) {
                chai_1.assert.equal(e.message, "Component 'NonRegisteredComponent' not found");
            }
        });
        it('should add itself to the component list', function () {
            tsdi.enableComponentScanner();
            var ComponentWithContainerDependency = /** @class */ (function () {
                function ComponentWithContainerDependency() {
                }
                Object.defineProperty(ComponentWithContainerDependency.prototype, "prop", {
                    get: function () { return this._tsdi; },
                    enumerable: true,
                    configurable: true
                });
                __decorate([
                    tsdi_1.Inject,
                    __metadata("design:type", tsdi_1.TSDI)
                ], ComponentWithContainerDependency.prototype, "_tsdi", void 0);
                ComponentWithContainerDependency = __decorate([
                    tsdi_1.Component()
                ], ComponentWithContainerDependency);
                return ComponentWithContainerDependency;
            }());
            chai_1.assert.strictEqual(tsdi.get(ComponentWithContainerDependency).prop, tsdi);
        });
        it('should call the initalizer', function () {
            tsdi.enableComponentScanner();
            var called = false;
            var ComponentWithInitializer = /** @class */ (function () {
                function ComponentWithInitializer() {
                }
                ComponentWithInitializer.prototype.init = function () {
                    called = true;
                };
                __decorate([
                    tsdi_1.Initialize,
                    __metadata("design:type", Function),
                    __metadata("design:paramtypes", []),
                    __metadata("design:returntype", void 0)
                ], ComponentWithInitializer.prototype, "init", null);
                ComponentWithInitializer = __decorate([
                    tsdi_1.Component()
                ], ComponentWithInitializer);
                return ComponentWithInitializer;
            }());
            tsdi.get(ComponentWithInitializer);
            chai_1.assert.isTrue(called);
        });
        it('should inject annotated constructor parameters', function () {
            tsdi.enableComponentScanner();
            var ConstructorParameterComponent = /** @class */ (function () {
                function ConstructorParameterComponent() {
                }
                ConstructorParameterComponent = __decorate([
                    tsdi_1.Component
                ], ConstructorParameterComponent);
                return ConstructorParameterComponent;
            }());
            var ComponentWithConstructor = /** @class */ (function () {
                function ComponentWithConstructor(container, b) {
                    this._tsdi = container;
                    this.b = b;
                }
                Object.defineProperty(ComponentWithConstructor.prototype, "prop", {
                    get: function () { return this._tsdi; },
                    enumerable: true,
                    configurable: true
                });
                ComponentWithConstructor = __decorate([
                    tsdi_1.Component,
                    __param(0, tsdi_1.Inject()), __param(1, tsdi_1.Inject),
                    __metadata("design:paramtypes", [tsdi_1.TSDI, ConstructorParameterComponent])
                ], ComponentWithConstructor);
                return ComponentWithConstructor;
            }());
            chai_1.assert.strictEqual(tsdi.get(ComponentWithConstructor).prop, tsdi);
            chai_1.assert.instanceOf(tsdi.get(ComponentWithConstructor).b, ConstructorParameterComponent);
        });
        it('should create a new instance for non-singletons', function () {
            tsdi.enableComponentScanner();
            var NonSingletonComponent = /** @class */ (function () {
                function NonSingletonComponent() {
                }
                NonSingletonComponent = __decorate([
                    tsdi_1.Component({ singleton: false })
                ], NonSingletonComponent);
                return NonSingletonComponent;
            }());
            chai_1.assert.notEqual(tsdi.get(NonSingletonComponent), tsdi.get(NonSingletonComponent));
        });
        it('should register factories on components', function () {
            tsdi.enableComponentScanner();
            var NonSingletonObject = /** @class */ (function () {
                function NonSingletonObject() {
                }
                return NonSingletonObject;
            }());
            var FactoryComponentWithSingletonFactory = /** @class */ (function () {
                // @ts-ignore // ignore unused warning
                function FactoryComponentWithSingletonFactory() {
                }
                FactoryComponentWithSingletonFactory.prototype.someFactory = function () {
                    return new NonSingletonObject();
                };
                __decorate([
                    tsdi_1.factory,
                    __metadata("design:type", Function),
                    __metadata("design:paramtypes", []),
                    __metadata("design:returntype", NonSingletonObject)
                ], FactoryComponentWithSingletonFactory.prototype, "someFactory", null);
                FactoryComponentWithSingletonFactory = __decorate([
                    tsdi_1.Component()
                    // @ts-ignore // ignore unused warning
                ], FactoryComponentWithSingletonFactory);
                return FactoryComponentWithSingletonFactory;
            }());
            // @Component()
            // class C {}
            chai_1.assert.instanceOf(tsdi.get(NonSingletonObject), NonSingletonObject);
            chai_1.assert.strictEqual(tsdi.get(NonSingletonObject), tsdi.get(NonSingletonObject));
        });
        it('should return a new component on each call for non singleton factories', function () {
            tsdi.enableComponentScanner();
            var NonSingletonObject = /** @class */ (function () {
                function NonSingletonObject() {
                }
                return NonSingletonObject;
            }());
            var FactoryComponentWithNonSingletonFactory = /** @class */ (function () {
                // @ts-ignore // ignore unused warning
                function FactoryComponentWithNonSingletonFactory() {
                }
                FactoryComponentWithNonSingletonFactory.prototype.someFactory = function () {
                    return new NonSingletonObject();
                };
                __decorate([
                    tsdi_1.Factory({ singleton: false }),
                    __metadata("design:type", Function),
                    __metadata("design:paramtypes", []),
                    __metadata("design:returntype", NonSingletonObject)
                ], FactoryComponentWithNonSingletonFactory.prototype, "someFactory", null);
                FactoryComponentWithNonSingletonFactory = __decorate([
                    tsdi_1.Component()
                    // @ts-ignore // ignore unused warning
                ], FactoryComponentWithNonSingletonFactory);
                return FactoryComponentWithNonSingletonFactory;
            }());
            chai_1.assert.instanceOf(tsdi.get(NonSingletonObject), NonSingletonObject);
            chai_1.assert.notEqual(tsdi.get(NonSingletonObject), tsdi.get(NonSingletonObject));
        });
        it('inject should fallback to typename if no explicit name given', function () {
            tsdi.enableComponentScanner();
            var InjectedComponent = /** @class */ (function () {
                function InjectedComponent() {
                }
                InjectedComponent = __decorate([
                    tsdi_1.Component()
                ], InjectedComponent);
                return InjectedComponent;
            }());
            var ComponentWithNonNamedInject = /** @class */ (function () {
                function ComponentWithNonNamedInject() {
                }
                Object.defineProperty(ComponentWithNonNamedInject.prototype, "comp", {
                    get: function () {
                        return this._comp;
                    },
                    enumerable: true,
                    configurable: true
                });
                __decorate([
                    tsdi_1.Inject(),
                    __metadata("design:type", InjectedComponent)
                ], ComponentWithNonNamedInject.prototype, "_comp", void 0);
                ComponentWithNonNamedInject = __decorate([
                    tsdi_1.Component()
                ], ComponentWithNonNamedInject);
                return ComponentWithNonNamedInject;
            }());
            chai_1.assert.strictEqual(tsdi.get(ComponentWithNonNamedInject).comp, tsdi.get(InjectedComponent));
        });
        it('should report an error if named injection could not resolve to a component', function () {
            tsdi.enableComponentScanner();
            var UnknownComponent = /** @class */ (function () {
                function UnknownComponent() {
                }
                UnknownComponent = __decorate([
                    tsdi_1.Component()
                ], UnknownComponent);
                return UnknownComponent;
            }());
            var ComponentWithNamedInject = /** @class */ (function () {
                function ComponentWithNamedInject() {
                }
                Object.defineProperty(ComponentWithNamedInject.prototype, "comp", {
                    get: function () {
                        return this._comp;
                    },
                    enumerable: true,
                    configurable: true
                });
                __decorate([
                    tsdi_1.Inject('unknown'),
                    __metadata("design:type", UnknownComponent)
                ], ComponentWithNamedInject.prototype, "_comp", void 0);
                ComponentWithNamedInject = __decorate([
                    tsdi_1.Component()
                ], ComponentWithNamedInject);
                return ComponentWithNamedInject;
            }());
            chai_1.assert.throws(function () { return tsdi.get(ComponentWithNamedInject).comp; }, "Component named 'unknown' not found");
        });
        it('should report an error for a probable cyclic dependency', function () {
            tsdi.enableComponentScanner();
            chai_1.assert.throws(function () { return tsdi.get(cyclic1_1.Cyclic1); }, /Probably a cyclic dependency/);
        });
        it('should get a component by hint/name only', function () {
            tsdi.enableComponentScanner();
            var NamedComponent = /** @class */ (function () {
                function NamedComponent() {
                }
                NamedComponent = __decorate([
                    tsdi_1.Component('Component')
                ], NamedComponent);
                return NamedComponent;
            }());
            chai_1.assert.instanceOf(tsdi.get('Component'), NamedComponent);
        });
        it('should report an error duplicate named component', function () {
            tsdi.enableComponentScanner();
            try {
                var NamedComponent1 = /** @class */ (function () {
                    // @ts-ignore // ignore unused warning
                    function NamedComponent1() {
                    }
                    NamedComponent1 = __decorate([
                        tsdi_1.Component('Component')
                        // @ts-ignore // ignore unused warning
                    ], NamedComponent1);
                    return NamedComponent1;
                }());
                var NamedComponent2 = /** @class */ (function () {
                    // @ts-ignore // ignore unused warning
                    function NamedComponent2() {
                    }
                    NamedComponent2 = __decorate([
                        tsdi_1.Component('Component')
                        // @ts-ignore // ignore unused warning
                    ], NamedComponent2);
                    return NamedComponent2;
                }());
                chai_1.assert.fail('Should throw error');
            }
            catch (e) {
                chai_1.assert.match(e.message, /Duplicate name 'Component' for known Components/);
            }
        });
        it('should lazy create an inject dependencies', function () {
            tsdi.enableComponentScanner();
            var Injected = /** @class */ (function () {
                function Injected() {
                }
                Injected = __decorate([
                    tsdi_1.Component()
                ], Injected);
                return Injected;
            }());
            var ComponentWithLazyInjection = /** @class */ (function () {
                function ComponentWithLazyInjection() {
                }
                __decorate([
                    tsdi_1.Inject({ lazy: true }),
                    __metadata("design:type", Injected)
                ], ComponentWithLazyInjection.prototype, "dependency", void 0);
                ComponentWithLazyInjection = __decorate([
                    tsdi_1.Component()
                ], ComponentWithLazyInjection);
                return ComponentWithLazyInjection;
            }());
            var component = tsdi.get(ComponentWithLazyInjection);
            var instances = tsdi.instances;
            var injected = Object
                .keys(instances)
                .map(function (key) { return instances[key]; })
                .filter(function (instance) { return instance instanceof Injected; });
            chai_1.assert.lengthOf(injected, 0);
            chai_1.assert.isDefined(component.dependency);
        });
        it('should create eager components as soon as possible', function (done) {
            tsdi.enableComponentScanner();
            var count = 0;
            var EagerComponent = /** @class */ (function () {
                // @ts-ignore // ignore unused warning
                function EagerComponent() {
                }
                EagerComponent.prototype.init = function () {
                    count++;
                };
                __decorate([
                    tsdi_1.initialize,
                    __metadata("design:type", Function),
                    __metadata("design:paramtypes", []),
                    __metadata("design:returntype", void 0)
                ], EagerComponent.prototype, "init", null);
                EagerComponent = __decorate([
                    tsdi_1.component({ eager: true })
                    // @ts-ignore // ignore unused warning
                ], EagerComponent);
                return EagerComponent;
            }());
            setTimeout(function () {
                chai_1.assert.equal(count, 1);
                done();
            }, 1);
        });
        it('should respect dependency tree for eager creation', function (done) {
            tsdi.enableComponentScanner();
            var eager1 = tsdi.get(eager1_1.EagerComponent1);
            var eager2 = tsdi.get(eager2_1.EagerComponent2);
            setTimeout(function () {
                chai_1.assert.strictEqual(eager1.dependency, eager2);
                done();
            }, 1);
        });
        it('should call lifecycle listener on component creation', function () {
            tsdi.enableComponentScanner();
            var count = 0;
            var Component = /** @class */ (function () {
                function Component() {
                }
                Component = __decorate([
                    tsdi_1.component
                ], Component);
                return Component;
            }());
            tsdi.addLifecycleListener({
                onCreate: function (component) {
                    if (component instanceof Component) {
                        count++;
                    }
                }
            });
            tsdi.get(Component);
            chai_1.assert.equal(count, 1);
        });
        it('should call lifecycle listener on component destruction', function () {
            tsdi.enableComponentScanner();
            var count = 0;
            var Component = /** @class */ (function () {
                function Component() {
                }
                Component = __decorate([
                    tsdi_1.component
                ], Component);
                return Component;
            }());
            tsdi.addLifecycleListener({
                onDestroy: function (component) {
                    if (component instanceof Component) {
                        count++;
                    }
                }
            });
            tsdi.get(Component);
            tsdi.close();
            chai_1.assert.equal(count, 1);
        });
        it('should allow overriding a dependency', function () {
            tsdi.enableComponentScanner();
            var Component = /** @class */ (function () {
                function Component() {
                }
                Component.prototype.foo = function () {
                    return 'foo';
                };
                Component = __decorate([
                    tsdi_1.component
                ], Component);
                return Component;
            }());
            var ComponentOverride = /** @class */ (function () {
                function ComponentOverride() {
                }
                ComponentOverride.prototype.foo = function () {
                    return 'foo-override';
                };
                return ComponentOverride;
            }());
            tsdi.override(Component, new ComponentOverride());
            chai_1.assert.equal(tsdi.get(Component).foo(), 'foo-override');
        });
        it('should call destructor on container close', function () {
            var calledDestructor = false;
            var ComponentWithDestructor = /** @class */ (function () {
                function ComponentWithDestructor() {
                }
                ComponentWithDestructor.prototype.foo = function () {
                    calledDestructor = true;
                };
                __decorate([
                    tsdi_1.destroy,
                    __metadata("design:type", Function),
                    __metadata("design:paramtypes", []),
                    __metadata("design:returntype", void 0)
                ], ComponentWithDestructor.prototype, "foo", null);
                ComponentWithDestructor = __decorate([
                    tsdi_1.component
                ], ComponentWithDestructor);
                return ComponentWithDestructor;
            }());
            tsdi.enableComponentScanner();
            tsdi.get(ComponentWithDestructor);
            tsdi.close();
            chai_1.assert.isTrue(calledDestructor);
        });
        it('should re-resolve dependency if injected as dynamic  one', function () {
            var Dependency = /** @class */ (function () {
                function Dependency() {
                    this.value = 1;
                }
                Dependency = __decorate([
                    tsdi_1.component({ scope: 're-resolve' })
                ], Dependency);
                return Dependency;
            }());
            var Dependent = /** @class */ (function () {
                function Dependent() {
                }
                __decorate([
                    tsdi_1.inject({ dynamic: true }),
                    __metadata("design:type", Dependency)
                ], Dependent.prototype, "dependency", void 0);
                __decorate([
                    tsdi_1.inject({ lazy: false, dynamic: true }),
                    __metadata("design:type", Dependency)
                ], Dependent.prototype, "eagerDependency", void 0);
                Dependent = __decorate([
                    tsdi_1.component
                ], Dependent);
                return Dependent;
            }());
            tsdi.enableComponentScanner();
            tsdi.getScope('re-resolve').enter();
            var dependent = tsdi.get(Dependent);
            var dependency1 = dependent.dependency;
            var eagerDependency1 = dependent.eagerDependency;
            tsdi.getScope('re-resolve').leave();
            tsdi.getScope('re-resolve').enter();
            var dependency2 = dependent.dependency;
            var eagerDependency2 = dependent.eagerDependency;
            chai_1.assert.notEqual(dependency1, dependency2);
            chai_1.assert.notEqual(eagerDependency1, eagerDependency2);
        });
        it('should throw if use unavailable dependency injected as dynamic one', function () {
            var Dependency = /** @class */ (function () {
                function Dependency() {
                    this.value = 1;
                }
                Dependency = __decorate([
                    tsdi_1.component({ scope: 'scope' })
                ], Dependency);
                return Dependency;
            }());
            var Dependent = /** @class */ (function () {
                function Dependent() {
                }
                __decorate([
                    tsdi_1.inject({ dynamic: true }),
                    __metadata("design:type", Dependency)
                ], Dependent.prototype, "dependency", void 0);
                Dependent = __decorate([
                    tsdi_1.component
                ], Dependent);
                return Dependent;
            }());
            tsdi.enableComponentScanner();
            var dependent = tsdi.get(Dependent);
            chai_1.assert.throws(function () { return dependent.dependency.value; }, "Component 'Dependency' not found");
        });
        describe('with external classes', function () {
            it('should inject dependencies', function () {
                tsdi.enableComponentScanner();
                var User2 = /** @class */ (function (_super) {
                    __extends(User2, _super);
                    function User2() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    User2 = __decorate([
                        tsdi_1.Component('user2')
                    ], User2);
                    return User2;
                }(user_1.User));
                var ExternalClass = /** @class */ (function () {
                    function ExternalClass() {
                    }
                    __decorate([
                        tsdi_1.Inject(),
                        __metadata("design:type", user_1.User)
                    ], ExternalClass.prototype, "user", void 0);
                    __decorate([
                        tsdi_1.Inject('user2'),
                        __metadata("design:type", user_1.User)
                    ], ExternalClass.prototype, "user2", void 0);
                    ExternalClass = __decorate([
                        tsdi_1.external
                    ], ExternalClass);
                    return ExternalClass;
                }());
                var test = new ExternalClass();
                chai_1.assert.strictEqual(test.user, tsdi.get(user_1.User));
                chai_1.assert.strictEqual(test.user2, tsdi.get(User2));
            });
            it('should call the initializer', function () {
                tsdi.enableComponentScanner();
                var called = false;
                var fn = function () { return called = true; };
                var ExternalClass = /** @class */ (function () {
                    function ExternalClass() {
                    }
                    ExternalClass.prototype.init = function () {
                        fn();
                    };
                    __decorate([
                        tsdi_1.initialize(),
                        __metadata("design:type", Function),
                        __metadata("design:paramtypes", []),
                        __metadata("design:returntype", void 0)
                    ], ExternalClass.prototype, "init", null);
                    ExternalClass = __decorate([
                        tsdi_1.External()
                    ], ExternalClass);
                    return ExternalClass;
                }());
                // tslint:disable-next-line:no-unused-expression
                new ExternalClass();
                chai_1.assert.isTrue(called);
            });
            it('should inject defined properties', function () {
                tsdi.enableComponentScanner();
                var ExternalClass = /** @class */ (function () {
                    function ExternalClass() {
                    }
                    Object.defineProperty(ExternalClass.prototype, "prop", {
                        get: function () { return this._prop; },
                        enumerable: true,
                        configurable: true
                    });
                    __decorate([
                        tsdi_1.Inject('prop'),
                        __metadata("design:type", Boolean)
                    ], ExternalClass.prototype, "_prop", void 0);
                    ExternalClass = __decorate([
                        tsdi_1.External()
                    ], ExternalClass);
                    return ExternalClass;
                }());
                tsdi.addProperty('prop', false);
                chai_1.assert.equal(new ExternalClass().prop, false);
            });
            it('should allow constructor injection', function () {
                tsdi.enableComponentScanner();
                var ExternalClass = /** @class */ (function () {
                    function ExternalClass(_value, user) {
                        this.injected = user;
                    }
                    ExternalClass = __decorate([
                        tsdi_1.External(),
                        __param(1, tsdi_1.Inject()),
                        __metadata("design:paramtypes", [String, user_1.User])
                    ], ExternalClass);
                    return ExternalClass;
                }());
                chai_1.assert.equal(new ExternalClass('value').injected, tsdi.get(user_1.User));
            });
            it('should keep static methods and properties', function () {
                tsdi.enableComponentScanner();
                var noop = function () { return console.log('noop'); };
                var ExternalClass = /** @class */ (function () {
                    function ExternalClass() {
                    }
                    ExternalClass.user = 'test';
                    ExternalClass.noop = noop;
                    ExternalClass = __decorate([
                        tsdi_1.External()
                    ], ExternalClass);
                    return ExternalClass;
                }());
                chai_1.assert.strictEqual(ExternalClass.user, 'test');
                chai_1.assert.strictEqual(ExternalClass.noop, noop);
            });
            it('should keep prototype chain correct', function () {
                tsdi.enableComponentScanner();
                var Base = /** @class */ (function () {
                    function Base() {
                    }
                    return Base;
                }());
                var ExternalClass = /** @class */ (function (_super) {
                    __extends(ExternalClass, _super);
                    function ExternalClass() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    }
                    ExternalClass = __decorate([
                        tsdi_1.External()
                    ], ExternalClass);
                    return ExternalClass;
                }(Base));
                chai_1.assert.instanceOf(new ExternalClass(), Base);
            });
        });
        describe('and scope', function () {
            it('should create components for that scopes', function () {
                tsdi.enableComponentScanner();
                var ComponentWithScope = /** @class */ (function () {
                    function ComponentWithScope() {
                    }
                    ComponentWithScope = __decorate([
                        tsdi_1.component({ scope: 'scope' })
                    ], ComponentWithScope);
                    return ComponentWithScope;
                }());
                tsdi.getScope('scope').enter();
                var instance = tsdi.get(ComponentWithScope);
                chai_1.assert.isDefined(instance);
            });
            it('should throw if scope is not enabled', function () {
                tsdi.enableComponentScanner();
                var ComponentWithScope = /** @class */ (function () {
                    function ComponentWithScope() {
                    }
                    ComponentWithScope = __decorate([
                        tsdi_1.component({ scope: 'scope' })
                    ], ComponentWithScope);
                    return ComponentWithScope;
                }());
                chai_1.assert.throws(function () { return tsdi.get(ComponentWithScope); });
            });
            it('should destroy instances when their scope was left', function () {
                tsdi.enableComponentScanner();
                var destructorCalled = false;
                var ComponentWithScope = /** @class */ (function () {
                    function ComponentWithScope() {
                    }
                    ComponentWithScope.prototype.destroy = function () {
                        destructorCalled = true;
                    };
                    __decorate([
                        tsdi_1.destroy,
                        __metadata("design:type", Function),
                        __metadata("design:paramtypes", []),
                        __metadata("design:returntype", void 0)
                    ], ComponentWithScope.prototype, "destroy", null);
                    ComponentWithScope = __decorate([
                        tsdi_1.component({ scope: 'scope' })
                    ], ComponentWithScope);
                    return ComponentWithScope;
                }());
                tsdi.getScope('scope').enter();
                tsdi.get(ComponentWithScope);
                tsdi.getScope('scope').leave();
                chai_1.assert.isTrue(destructorCalled);
            });
            it('should keep instances which are out of left scope', function () {
                tsdi.enableComponentScanner();
                var destructorCalled = false;
                var ComponentWithoutScope = /** @class */ (function () {
                    function ComponentWithoutScope() {
                    }
                    ComponentWithoutScope.prototype.destroy = function () {
                        destructorCalled = true;
                    };
                    __decorate([
                        tsdi_1.destroy,
                        __metadata("design:type", Function),
                        __metadata("design:paramtypes", []),
                        __metadata("design:returntype", void 0)
                    ], ComponentWithoutScope.prototype, "destroy", null);
                    ComponentWithoutScope = __decorate([
                        tsdi_1.component
                    ], ComponentWithoutScope);
                    return ComponentWithoutScope;
                }());
                var ComponentWithOtherScope = /** @class */ (function () {
                    function ComponentWithOtherScope() {
                    }
                    ComponentWithOtherScope.prototype.destroy = function () {
                        destructorCalled = true;
                    };
                    __decorate([
                        tsdi_1.destroy,
                        __metadata("design:type", Function),
                        __metadata("design:paramtypes", []),
                        __metadata("design:returntype", void 0)
                    ], ComponentWithOtherScope.prototype, "destroy", null);
                    ComponentWithOtherScope = __decorate([
                        tsdi_1.component({ scope: 'other' })
                    ], ComponentWithOtherScope);
                    return ComponentWithOtherScope;
                }());
                tsdi.getScope('other').enter();
                tsdi.getScope('scope').enter();
                tsdi.get(ComponentWithoutScope);
                tsdi.get(ComponentWithOtherScope);
                tsdi.getScope('scope').leave();
                chai_1.assert.isFalse(destructorCalled);
            });
        });
    });
    describe('without container instance', function () {
        it('a created instance should not have dependencies satisified', function () {
            var comp = new user_1.User();
            chai_1.assert.throw(comp.method);
        });
        it('a created instance should have mockable dependencies', function () {
            var comp = new user_1.User();
            comp['dependency'] = {
                echo: function () {
                    return 'world';
                }
            };
            chai_1.assert.equal(comp.method(), 'world');
        });
    });
});
//# sourceMappingURL=index-test.js.map